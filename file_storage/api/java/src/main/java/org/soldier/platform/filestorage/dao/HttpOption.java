/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.filestorage.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HttpOption implements org.apache.thrift.TBase<HttpOption, HttpOption._Fields>, java.io.Serializable, Cloneable, Comparable<HttpOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HttpOption");

  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("expireTimestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("contentEncoding", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CATCH_CONTROL_FIELD_DESC = new org.apache.thrift.protocol.TField("catchControl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_DISPOSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("contentDisposition", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("userMetaData", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField ACL_CONTROL_FIELD_DESC = new org.apache.thrift.protocol.TField("aclControl", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HttpOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HttpOptionTupleSchemeFactory());
  }

  public String contentType; // optional
  public long expireTimestamp; // optional
  public String contentEncoding; // optional
  public String catchControl; // optional
  public String contentDisposition; // optional
  public Map<String,String> userMetaData; // optional
  /**
   * 
   * @see EACLControlList
   */
  public EACLControlList aclControl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTENT_TYPE((short)1, "contentType"),
    EXPIRE_TIMESTAMP((short)2, "expireTimestamp"),
    CONTENT_ENCODING((short)3, "contentEncoding"),
    CATCH_CONTROL((short)4, "catchControl"),
    CONTENT_DISPOSITION((short)5, "contentDisposition"),
    USER_META_DATA((short)6, "userMetaData"),
    /**
     * 
     * @see EACLControlList
     */
    ACL_CONTROL((short)7, "aclControl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 2: // EXPIRE_TIMESTAMP
          return EXPIRE_TIMESTAMP;
        case 3: // CONTENT_ENCODING
          return CONTENT_ENCODING;
        case 4: // CATCH_CONTROL
          return CATCH_CONTROL;
        case 5: // CONTENT_DISPOSITION
          return CONTENT_DISPOSITION;
        case 6: // USER_META_DATA
          return USER_META_DATA;
        case 7: // ACL_CONTROL
          return ACL_CONTROL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRETIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTENT_TYPE,_Fields.EXPIRE_TIMESTAMP,_Fields.CONTENT_ENCODING,_Fields.CATCH_CONTROL,_Fields.CONTENT_DISPOSITION,_Fields.USER_META_DATA,_Fields.ACL_CONTROL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("expireTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT_ENCODING, new org.apache.thrift.meta_data.FieldMetaData("contentEncoding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATCH_CONTROL, new org.apache.thrift.meta_data.FieldMetaData("catchControl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_DISPOSITION, new org.apache.thrift.meta_data.FieldMetaData("contentDisposition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_META_DATA, new org.apache.thrift.meta_data.FieldMetaData("userMetaData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ACL_CONTROL, new org.apache.thrift.meta_data.FieldMetaData("aclControl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EACLControlList.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HttpOption.class, metaDataMap);
  }

  public HttpOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HttpOption(HttpOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    this.expireTimestamp = other.expireTimestamp;
    if (other.isSetContentEncoding()) {
      this.contentEncoding = other.contentEncoding;
    }
    if (other.isSetCatchControl()) {
      this.catchControl = other.catchControl;
    }
    if (other.isSetContentDisposition()) {
      this.contentDisposition = other.contentDisposition;
    }
    if (other.isSetUserMetaData()) {
      Map<String,String> __this__userMetaData = new HashMap<String,String>(other.userMetaData);
      this.userMetaData = __this__userMetaData;
    }
    if (other.isSetAclControl()) {
      this.aclControl = other.aclControl;
    }
  }

  public HttpOption deepCopy() {
    return new HttpOption(this);
  }

  @Override
  public void clear() {
    this.contentType = null;
    setExpireTimestampIsSet(false);
    this.expireTimestamp = 0;
    this.contentEncoding = null;
    this.catchControl = null;
    this.contentDisposition = null;
    this.userMetaData = null;
    this.aclControl = null;
  }

  public String getContentType() {
    return this.contentType;
  }

  public HttpOption setContentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  public long getExpireTimestamp() {
    return this.expireTimestamp;
  }

  public HttpOption setExpireTimestamp(long expireTimestamp) {
    this.expireTimestamp = expireTimestamp;
    setExpireTimestampIsSet(true);
    return this;
  }

  public void unsetExpireTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field expireTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRETIMESTAMP_ISSET_ID);
  }

  public void setExpireTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRETIMESTAMP_ISSET_ID, value);
  }

  public String getContentEncoding() {
    return this.contentEncoding;
  }

  public HttpOption setContentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
    return this;
  }

  public void unsetContentEncoding() {
    this.contentEncoding = null;
  }

  /** Returns true if field contentEncoding is set (has been assigned a value) and false otherwise */
  public boolean isSetContentEncoding() {
    return this.contentEncoding != null;
  }

  public void setContentEncodingIsSet(boolean value) {
    if (!value) {
      this.contentEncoding = null;
    }
  }

  public String getCatchControl() {
    return this.catchControl;
  }

  public HttpOption setCatchControl(String catchControl) {
    this.catchControl = catchControl;
    return this;
  }

  public void unsetCatchControl() {
    this.catchControl = null;
  }

  /** Returns true if field catchControl is set (has been assigned a value) and false otherwise */
  public boolean isSetCatchControl() {
    return this.catchControl != null;
  }

  public void setCatchControlIsSet(boolean value) {
    if (!value) {
      this.catchControl = null;
    }
  }

  public String getContentDisposition() {
    return this.contentDisposition;
  }

  public HttpOption setContentDisposition(String contentDisposition) {
    this.contentDisposition = contentDisposition;
    return this;
  }

  public void unsetContentDisposition() {
    this.contentDisposition = null;
  }

  /** Returns true if field contentDisposition is set (has been assigned a value) and false otherwise */
  public boolean isSetContentDisposition() {
    return this.contentDisposition != null;
  }

  public void setContentDispositionIsSet(boolean value) {
    if (!value) {
      this.contentDisposition = null;
    }
  }

  public int getUserMetaDataSize() {
    return (this.userMetaData == null) ? 0 : this.userMetaData.size();
  }

  public void putToUserMetaData(String key, String val) {
    if (this.userMetaData == null) {
      this.userMetaData = new HashMap<String,String>();
    }
    this.userMetaData.put(key, val);
  }

  public Map<String,String> getUserMetaData() {
    return this.userMetaData;
  }

  public HttpOption setUserMetaData(Map<String,String> userMetaData) {
    this.userMetaData = userMetaData;
    return this;
  }

  public void unsetUserMetaData() {
    this.userMetaData = null;
  }

  /** Returns true if field userMetaData is set (has been assigned a value) and false otherwise */
  public boolean isSetUserMetaData() {
    return this.userMetaData != null;
  }

  public void setUserMetaDataIsSet(boolean value) {
    if (!value) {
      this.userMetaData = null;
    }
  }

  /**
   * 
   * @see EACLControlList
   */
  public EACLControlList getAclControl() {
    return this.aclControl;
  }

  /**
   * 
   * @see EACLControlList
   */
  public HttpOption setAclControl(EACLControlList aclControl) {
    this.aclControl = aclControl;
    return this;
  }

  public void unsetAclControl() {
    this.aclControl = null;
  }

  /** Returns true if field aclControl is set (has been assigned a value) and false otherwise */
  public boolean isSetAclControl() {
    return this.aclControl != null;
  }

  public void setAclControlIsSet(boolean value) {
    if (!value) {
      this.aclControl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((String)value);
      }
      break;

    case EXPIRE_TIMESTAMP:
      if (value == null) {
        unsetExpireTimestamp();
      } else {
        setExpireTimestamp((Long)value);
      }
      break;

    case CONTENT_ENCODING:
      if (value == null) {
        unsetContentEncoding();
      } else {
        setContentEncoding((String)value);
      }
      break;

    case CATCH_CONTROL:
      if (value == null) {
        unsetCatchControl();
      } else {
        setCatchControl((String)value);
      }
      break;

    case CONTENT_DISPOSITION:
      if (value == null) {
        unsetContentDisposition();
      } else {
        setContentDisposition((String)value);
      }
      break;

    case USER_META_DATA:
      if (value == null) {
        unsetUserMetaData();
      } else {
        setUserMetaData((Map<String,String>)value);
      }
      break;

    case ACL_CONTROL:
      if (value == null) {
        unsetAclControl();
      } else {
        setAclControl((EACLControlList)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTENT_TYPE:
      return getContentType();

    case EXPIRE_TIMESTAMP:
      return Long.valueOf(getExpireTimestamp());

    case CONTENT_ENCODING:
      return getContentEncoding();

    case CATCH_CONTROL:
      return getCatchControl();

    case CONTENT_DISPOSITION:
      return getContentDisposition();

    case USER_META_DATA:
      return getUserMetaData();

    case ACL_CONTROL:
      return getAclControl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTENT_TYPE:
      return isSetContentType();
    case EXPIRE_TIMESTAMP:
      return isSetExpireTimestamp();
    case CONTENT_ENCODING:
      return isSetContentEncoding();
    case CATCH_CONTROL:
      return isSetCatchControl();
    case CONTENT_DISPOSITION:
      return isSetContentDisposition();
    case USER_META_DATA:
      return isSetUserMetaData();
    case ACL_CONTROL:
      return isSetAclControl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HttpOption)
      return this.equals((HttpOption)that);
    return false;
  }

  public boolean equals(HttpOption that) {
    if (that == null)
      return false;

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_expireTimestamp = true && this.isSetExpireTimestamp();
    boolean that_present_expireTimestamp = true && that.isSetExpireTimestamp();
    if (this_present_expireTimestamp || that_present_expireTimestamp) {
      if (!(this_present_expireTimestamp && that_present_expireTimestamp))
        return false;
      if (this.expireTimestamp != that.expireTimestamp)
        return false;
    }

    boolean this_present_contentEncoding = true && this.isSetContentEncoding();
    boolean that_present_contentEncoding = true && that.isSetContentEncoding();
    if (this_present_contentEncoding || that_present_contentEncoding) {
      if (!(this_present_contentEncoding && that_present_contentEncoding))
        return false;
      if (!this.contentEncoding.equals(that.contentEncoding))
        return false;
    }

    boolean this_present_catchControl = true && this.isSetCatchControl();
    boolean that_present_catchControl = true && that.isSetCatchControl();
    if (this_present_catchControl || that_present_catchControl) {
      if (!(this_present_catchControl && that_present_catchControl))
        return false;
      if (!this.catchControl.equals(that.catchControl))
        return false;
    }

    boolean this_present_contentDisposition = true && this.isSetContentDisposition();
    boolean that_present_contentDisposition = true && that.isSetContentDisposition();
    if (this_present_contentDisposition || that_present_contentDisposition) {
      if (!(this_present_contentDisposition && that_present_contentDisposition))
        return false;
      if (!this.contentDisposition.equals(that.contentDisposition))
        return false;
    }

    boolean this_present_userMetaData = true && this.isSetUserMetaData();
    boolean that_present_userMetaData = true && that.isSetUserMetaData();
    if (this_present_userMetaData || that_present_userMetaData) {
      if (!(this_present_userMetaData && that_present_userMetaData))
        return false;
      if (!this.userMetaData.equals(that.userMetaData))
        return false;
    }

    boolean this_present_aclControl = true && this.isSetAclControl();
    boolean that_present_aclControl = true && that.isSetAclControl();
    if (this_present_aclControl || that_present_aclControl) {
      if (!(this_present_aclControl && that_present_aclControl))
        return false;
      if (!this.aclControl.equals(that.aclControl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HttpOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, other.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireTimestamp()).compareTo(other.isSetExpireTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTimestamp, other.expireTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentEncoding()).compareTo(other.isSetContentEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentEncoding, other.contentEncoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatchControl()).compareTo(other.isSetCatchControl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatchControl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catchControl, other.catchControl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentDisposition()).compareTo(other.isSetContentDisposition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentDisposition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentDisposition, other.contentDisposition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserMetaData()).compareTo(other.isSetUserMetaData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserMetaData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userMetaData, other.userMetaData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAclControl()).compareTo(other.isSetAclControl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAclControl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aclControl, other.aclControl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HttpOption(");
    boolean first = true;

    if (isSetContentType()) {
      sb.append("contentType:");
      if (this.contentType == null) {
        sb.append("null");
      } else {
        sb.append(this.contentType);
      }
      first = false;
    }
    if (isSetExpireTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("expireTimestamp:");
      sb.append(this.expireTimestamp);
      first = false;
    }
    if (isSetContentEncoding()) {
      if (!first) sb.append(", ");
      sb.append("contentEncoding:");
      if (this.contentEncoding == null) {
        sb.append("null");
      } else {
        sb.append(this.contentEncoding);
      }
      first = false;
    }
    if (isSetCatchControl()) {
      if (!first) sb.append(", ");
      sb.append("catchControl:");
      if (this.catchControl == null) {
        sb.append("null");
      } else {
        sb.append(this.catchControl);
      }
      first = false;
    }
    if (isSetContentDisposition()) {
      if (!first) sb.append(", ");
      sb.append("contentDisposition:");
      if (this.contentDisposition == null) {
        sb.append("null");
      } else {
        sb.append(this.contentDisposition);
      }
      first = false;
    }
    if (isSetUserMetaData()) {
      if (!first) sb.append(", ");
      sb.append("userMetaData:");
      if (this.userMetaData == null) {
        sb.append("null");
      } else {
        sb.append(this.userMetaData);
      }
      first = false;
    }
    if (isSetAclControl()) {
      if (!first) sb.append(", ");
      sb.append("aclControl:");
      if (this.aclControl == null) {
        sb.append("null");
      } else {
        sb.append(this.aclControl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HttpOptionStandardSchemeFactory implements SchemeFactory {
    public HttpOptionStandardScheme getScheme() {
      return new HttpOptionStandardScheme();
    }
  }

  private static class HttpOptionStandardScheme extends StandardScheme<HttpOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HttpOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentType = iprot.readString();
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPIRE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireTimestamp = iprot.readI64();
              struct.setExpireTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT_ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentEncoding = iprot.readString();
              struct.setContentEncodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATCH_CONTROL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catchControl = iprot.readString();
              struct.setCatchControlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT_DISPOSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentDisposition = iprot.readString();
              struct.setContentDispositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_META_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.userMetaData = new HashMap<String,String>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  String _key12;
                  String _val13;
                  _key12 = iprot.readString();
                  _val13 = iprot.readString();
                  struct.userMetaData.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setUserMetaDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACL_CONTROL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.aclControl = EACLControlList.findByValue(iprot.readI32());
              struct.setAclControlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HttpOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contentType != null) {
        if (struct.isSetContentType()) {
          oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.contentType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpireTimestamp()) {
        oprot.writeFieldBegin(EXPIRE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.expireTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.contentEncoding != null) {
        if (struct.isSetContentEncoding()) {
          oprot.writeFieldBegin(CONTENT_ENCODING_FIELD_DESC);
          oprot.writeString(struct.contentEncoding);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catchControl != null) {
        if (struct.isSetCatchControl()) {
          oprot.writeFieldBegin(CATCH_CONTROL_FIELD_DESC);
          oprot.writeString(struct.catchControl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentDisposition != null) {
        if (struct.isSetContentDisposition()) {
          oprot.writeFieldBegin(CONTENT_DISPOSITION_FIELD_DESC);
          oprot.writeString(struct.contentDisposition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userMetaData != null) {
        if (struct.isSetUserMetaData()) {
          oprot.writeFieldBegin(USER_META_DATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.userMetaData.size()));
            for (Map.Entry<String, String> _iter14 : struct.userMetaData.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.aclControl != null) {
        if (struct.isSetAclControl()) {
          oprot.writeFieldBegin(ACL_CONTROL_FIELD_DESC);
          oprot.writeI32(struct.aclControl.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HttpOptionTupleSchemeFactory implements SchemeFactory {
    public HttpOptionTupleScheme getScheme() {
      return new HttpOptionTupleScheme();
    }
  }

  private static class HttpOptionTupleScheme extends TupleScheme<HttpOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HttpOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContentType()) {
        optionals.set(0);
      }
      if (struct.isSetExpireTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetContentEncoding()) {
        optionals.set(2);
      }
      if (struct.isSetCatchControl()) {
        optionals.set(3);
      }
      if (struct.isSetContentDisposition()) {
        optionals.set(4);
      }
      if (struct.isSetUserMetaData()) {
        optionals.set(5);
      }
      if (struct.isSetAclControl()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetContentType()) {
        oprot.writeString(struct.contentType);
      }
      if (struct.isSetExpireTimestamp()) {
        oprot.writeI64(struct.expireTimestamp);
      }
      if (struct.isSetContentEncoding()) {
        oprot.writeString(struct.contentEncoding);
      }
      if (struct.isSetCatchControl()) {
        oprot.writeString(struct.catchControl);
      }
      if (struct.isSetContentDisposition()) {
        oprot.writeString(struct.contentDisposition);
      }
      if (struct.isSetUserMetaData()) {
        {
          oprot.writeI32(struct.userMetaData.size());
          for (Map.Entry<String, String> _iter15 : struct.userMetaData.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
      if (struct.isSetAclControl()) {
        oprot.writeI32(struct.aclControl.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HttpOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.contentType = iprot.readString();
        struct.setContentTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.expireTimestamp = iprot.readI64();
        struct.setExpireTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contentEncoding = iprot.readString();
        struct.setContentEncodingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.catchControl = iprot.readString();
        struct.setCatchControlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contentDisposition = iprot.readString();
        struct.setContentDispositionIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.userMetaData = new HashMap<String,String>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18;
            String _val19;
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            struct.userMetaData.put(_key18, _val19);
          }
        }
        struct.setUserMetaDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.aclControl = EACLControlList.findByValue(iprot.readI32());
        struct.setAclControlIsSet(true);
      }
    }
  }

}

