/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.dal_set.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RoleServiceRelation implements org.apache.thrift.TBase<RoleServiceRelation, RoleServiceRelation._Fields>, java.io.Serializable, Cloneable, Comparable<RoleServiceRelation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoleServiceRelation");

  private static final org.apache.thrift.protocol.TField SERVICE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceKey", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField INTERFACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("interfaceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roleName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("userKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RELATED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RoleServiceRelationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RoleServiceRelationTupleSchemeFactory());
  }

  public int serviceKey; // required
  public String interfaceName; // required
  public String roleName; // required
  public String userKey; // optional
  /**
   * 
   * @see ServiceRelatedType
   */
  public ServiceRelatedType relatedType; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_KEY((short)1, "serviceKey"),
    INTERFACE_NAME((short)2, "interfaceName"),
    ROLE_NAME((short)3, "roleName"),
    USER_KEY((short)4, "userKey"),
    /**
     * 
     * @see ServiceRelatedType
     */
    RELATED_TYPE((short)5, "relatedType"),
    CREATE_TIMESTAMP((short)6, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)7, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_KEY
          return SERVICE_KEY;
        case 2: // INTERFACE_NAME
          return INTERFACE_NAME;
        case 3: // ROLE_NAME
          return ROLE_NAME;
        case 4: // USER_KEY
          return USER_KEY;
        case 5: // RELATED_TYPE
          return RELATED_TYPE;
        case 6: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 7: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVICEKEY_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.USER_KEY,_Fields.RELATED_TYPE,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_KEY, new org.apache.thrift.meta_data.FieldMetaData("serviceKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERFACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("interfaceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("roleName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_KEY, new org.apache.thrift.meta_data.FieldMetaData("userKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("relatedType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceRelatedType.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoleServiceRelation.class, metaDataMap);
  }

  public RoleServiceRelation() {
  }

  public RoleServiceRelation(
    int serviceKey,
    String interfaceName,
    String roleName)
  {
    this();
    this.serviceKey = serviceKey;
    setServiceKeyIsSet(true);
    this.interfaceName = interfaceName;
    this.roleName = roleName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoleServiceRelation(RoleServiceRelation other) {
    __isset_bitfield = other.__isset_bitfield;
    this.serviceKey = other.serviceKey;
    if (other.isSetInterfaceName()) {
      this.interfaceName = other.interfaceName;
    }
    if (other.isSetRoleName()) {
      this.roleName = other.roleName;
    }
    if (other.isSetUserKey()) {
      this.userKey = other.userKey;
    }
    if (other.isSetRelatedType()) {
      this.relatedType = other.relatedType;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public RoleServiceRelation deepCopy() {
    return new RoleServiceRelation(this);
  }

  @Override
  public void clear() {
    setServiceKeyIsSet(false);
    this.serviceKey = 0;
    this.interfaceName = null;
    this.roleName = null;
    this.userKey = null;
    this.relatedType = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public int getServiceKey() {
    return this.serviceKey;
  }

  public RoleServiceRelation setServiceKey(int serviceKey) {
    this.serviceKey = serviceKey;
    setServiceKeyIsSet(true);
    return this;
  }

  public void unsetServiceKey() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICEKEY_ISSET_ID);
  }

  /** Returns true if field serviceKey is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceKey() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVICEKEY_ISSET_ID);
  }

  public void setServiceKeyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICEKEY_ISSET_ID, value);
  }

  public String getInterfaceName() {
    return this.interfaceName;
  }

  public RoleServiceRelation setInterfaceName(String interfaceName) {
    this.interfaceName = interfaceName;
    return this;
  }

  public void unsetInterfaceName() {
    this.interfaceName = null;
  }

  /** Returns true if field interfaceName is set (has been assigned a value) and false otherwise */
  public boolean isSetInterfaceName() {
    return this.interfaceName != null;
  }

  public void setInterfaceNameIsSet(boolean value) {
    if (!value) {
      this.interfaceName = null;
    }
  }

  public String getRoleName() {
    return this.roleName;
  }

  public RoleServiceRelation setRoleName(String roleName) {
    this.roleName = roleName;
    return this;
  }

  public void unsetRoleName() {
    this.roleName = null;
  }

  /** Returns true if field roleName is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleName() {
    return this.roleName != null;
  }

  public void setRoleNameIsSet(boolean value) {
    if (!value) {
      this.roleName = null;
    }
  }

  public String getUserKey() {
    return this.userKey;
  }

  public RoleServiceRelation setUserKey(String userKey) {
    this.userKey = userKey;
    return this;
  }

  public void unsetUserKey() {
    this.userKey = null;
  }

  /** Returns true if field userKey is set (has been assigned a value) and false otherwise */
  public boolean isSetUserKey() {
    return this.userKey != null;
  }

  public void setUserKeyIsSet(boolean value) {
    if (!value) {
      this.userKey = null;
    }
  }

  /**
   * 
   * @see ServiceRelatedType
   */
  public ServiceRelatedType getRelatedType() {
    return this.relatedType;
  }

  /**
   * 
   * @see ServiceRelatedType
   */
  public RoleServiceRelation setRelatedType(ServiceRelatedType relatedType) {
    this.relatedType = relatedType;
    return this;
  }

  public void unsetRelatedType() {
    this.relatedType = null;
  }

  /** Returns true if field relatedType is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedType() {
    return this.relatedType != null;
  }

  public void setRelatedTypeIsSet(boolean value) {
    if (!value) {
      this.relatedType = null;
    }
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public RoleServiceRelation setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public RoleServiceRelation setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_KEY:
      if (value == null) {
        unsetServiceKey();
      } else {
        setServiceKey((Integer)value);
      }
      break;

    case INTERFACE_NAME:
      if (value == null) {
        unsetInterfaceName();
      } else {
        setInterfaceName((String)value);
      }
      break;

    case ROLE_NAME:
      if (value == null) {
        unsetRoleName();
      } else {
        setRoleName((String)value);
      }
      break;

    case USER_KEY:
      if (value == null) {
        unsetUserKey();
      } else {
        setUserKey((String)value);
      }
      break;

    case RELATED_TYPE:
      if (value == null) {
        unsetRelatedType();
      } else {
        setRelatedType((ServiceRelatedType)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_KEY:
      return Integer.valueOf(getServiceKey());

    case INTERFACE_NAME:
      return getInterfaceName();

    case ROLE_NAME:
      return getRoleName();

    case USER_KEY:
      return getUserKey();

    case RELATED_TYPE:
      return getRelatedType();

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_KEY:
      return isSetServiceKey();
    case INTERFACE_NAME:
      return isSetInterfaceName();
    case ROLE_NAME:
      return isSetRoleName();
    case USER_KEY:
      return isSetUserKey();
    case RELATED_TYPE:
      return isSetRelatedType();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RoleServiceRelation)
      return this.equals((RoleServiceRelation)that);
    return false;
  }

  public boolean equals(RoleServiceRelation that) {
    if (that == null)
      return false;

    boolean this_present_serviceKey = true;
    boolean that_present_serviceKey = true;
    if (this_present_serviceKey || that_present_serviceKey) {
      if (!(this_present_serviceKey && that_present_serviceKey))
        return false;
      if (this.serviceKey != that.serviceKey)
        return false;
    }

    boolean this_present_interfaceName = true && this.isSetInterfaceName();
    boolean that_present_interfaceName = true && that.isSetInterfaceName();
    if (this_present_interfaceName || that_present_interfaceName) {
      if (!(this_present_interfaceName && that_present_interfaceName))
        return false;
      if (!this.interfaceName.equals(that.interfaceName))
        return false;
    }

    boolean this_present_roleName = true && this.isSetRoleName();
    boolean that_present_roleName = true && that.isSetRoleName();
    if (this_present_roleName || that_present_roleName) {
      if (!(this_present_roleName && that_present_roleName))
        return false;
      if (!this.roleName.equals(that.roleName))
        return false;
    }

    boolean this_present_userKey = true && this.isSetUserKey();
    boolean that_present_userKey = true && that.isSetUserKey();
    if (this_present_userKey || that_present_userKey) {
      if (!(this_present_userKey && that_present_userKey))
        return false;
      if (!this.userKey.equals(that.userKey))
        return false;
    }

    boolean this_present_relatedType = true && this.isSetRelatedType();
    boolean that_present_relatedType = true && that.isSetRelatedType();
    if (this_present_relatedType || that_present_relatedType) {
      if (!(this_present_relatedType && that_present_relatedType))
        return false;
      if (!this.relatedType.equals(that.relatedType))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RoleServiceRelation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceKey()).compareTo(other.isSetServiceKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceKey, other.serviceKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterfaceName()).compareTo(other.isSetInterfaceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterfaceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interfaceName, other.interfaceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleName()).compareTo(other.isSetRoleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleName, other.roleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserKey()).compareTo(other.isSetUserKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userKey, other.userKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedType()).compareTo(other.isSetRelatedType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedType, other.relatedType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RoleServiceRelation(");
    boolean first = true;

    sb.append("serviceKey:");
    sb.append(this.serviceKey);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interfaceName:");
    if (this.interfaceName == null) {
      sb.append("null");
    } else {
      sb.append(this.interfaceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleName:");
    if (this.roleName == null) {
      sb.append("null");
    } else {
      sb.append(this.roleName);
    }
    first = false;
    if (isSetUserKey()) {
      if (!first) sb.append(", ");
      sb.append("userKey:");
      if (this.userKey == null) {
        sb.append("null");
      } else {
        sb.append(this.userKey);
      }
      first = false;
    }
    if (isSetRelatedType()) {
      if (!first) sb.append(", ");
      sb.append("relatedType:");
      if (this.relatedType == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedType);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'serviceKey' because it's a primitive and you chose the non-beans generator.
    if (interfaceName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'interfaceName' was not present! Struct: " + toString());
    }
    if (roleName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'roleName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoleServiceRelationStandardSchemeFactory implements SchemeFactory {
    public RoleServiceRelationStandardScheme getScheme() {
      return new RoleServiceRelationStandardScheme();
    }
  }

  private static class RoleServiceRelationStandardScheme extends StandardScheme<RoleServiceRelation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoleServiceRelation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceKey = iprot.readI32();
              struct.setServiceKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERFACE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interfaceName = iprot.readString();
              struct.setInterfaceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleName = iprot.readString();
              struct.setRoleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userKey = iprot.readString();
              struct.setUserKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RELATED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relatedType = ServiceRelatedType.findByValue(iprot.readI32());
              struct.setRelatedTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetServiceKey()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceKey' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoleServiceRelation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SERVICE_KEY_FIELD_DESC);
      oprot.writeI32(struct.serviceKey);
      oprot.writeFieldEnd();
      if (struct.interfaceName != null) {
        oprot.writeFieldBegin(INTERFACE_NAME_FIELD_DESC);
        oprot.writeString(struct.interfaceName);
        oprot.writeFieldEnd();
      }
      if (struct.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(struct.roleName);
        oprot.writeFieldEnd();
      }
      if (struct.userKey != null) {
        if (struct.isSetUserKey()) {
          oprot.writeFieldBegin(USER_KEY_FIELD_DESC);
          oprot.writeString(struct.userKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.relatedType != null) {
        if (struct.isSetRelatedType()) {
          oprot.writeFieldBegin(RELATED_TYPE_FIELD_DESC);
          oprot.writeI32(struct.relatedType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoleServiceRelationTupleSchemeFactory implements SchemeFactory {
    public RoleServiceRelationTupleScheme getScheme() {
      return new RoleServiceRelationTupleScheme();
    }
  }

  private static class RoleServiceRelationTupleScheme extends TupleScheme<RoleServiceRelation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoleServiceRelation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.serviceKey);
      oprot.writeString(struct.interfaceName);
      oprot.writeString(struct.roleName);
      BitSet optionals = new BitSet();
      if (struct.isSetUserKey()) {
        optionals.set(0);
      }
      if (struct.isSetRelatedType()) {
        optionals.set(1);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUserKey()) {
        oprot.writeString(struct.userKey);
      }
      if (struct.isSetRelatedType()) {
        oprot.writeI32(struct.relatedType.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoleServiceRelation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.serviceKey = iprot.readI32();
      struct.setServiceKeyIsSet(true);
      struct.interfaceName = iprot.readString();
      struct.setInterfaceNameIsSet(true);
      struct.roleName = iprot.readString();
      struct.setRoleNameIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.userKey = iprot.readString();
        struct.setUserKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.relatedType = ServiceRelatedType.findByValue(iprot.readI32());
        struct.setRelatedTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

