/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.msgq.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MsgQProducer implements org.apache.thrift.TBase<MsgQProducer, MsgQProducer._Fields>, java.io.Serializable, Cloneable, Comparable<MsgQProducer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MsgQProducer");

  private static final org.apache.thrift.protocol.TField PRODUCER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("producerKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topicName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCER_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("producerProperties", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCER_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("producerDesc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HAS_SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("hasSync", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MsgQProducerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MsgQProducerTupleSchemeFactory());
  }

  public String producerKey; // optional
  public String topicName; // optional
  public Map<String,String> producerProperties; // optional
  public String producerDesc; // optional
  public short hasSync; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCER_KEY((short)1, "producerKey"),
    TOPIC_NAME((short)2, "topicName"),
    PRODUCER_PROPERTIES((short)3, "producerProperties"),
    PRODUCER_DESC((short)4, "producerDesc"),
    HAS_SYNC((short)5, "hasSync"),
    CREATE_TIMESTAMP((short)10, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)11, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCER_KEY
          return PRODUCER_KEY;
        case 2: // TOPIC_NAME
          return TOPIC_NAME;
        case 3: // PRODUCER_PROPERTIES
          return PRODUCER_PROPERTIES;
        case 4: // PRODUCER_DESC
          return PRODUCER_DESC;
        case 5: // HAS_SYNC
          return HAS_SYNC;
        case 10: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 11: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASSYNC_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PRODUCER_KEY,_Fields.TOPIC_NAME,_Fields.PRODUCER_PROPERTIES,_Fields.PRODUCER_DESC,_Fields.HAS_SYNC,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCER_KEY, new org.apache.thrift.meta_data.FieldMetaData("producerKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("topicName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCER_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("producerProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PRODUCER_DESC, new org.apache.thrift.meta_data.FieldMetaData("producerDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HAS_SYNC, new org.apache.thrift.meta_data.FieldMetaData("hasSync", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MsgQProducer.class, metaDataMap);
  }

  public MsgQProducer() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MsgQProducer(MsgQProducer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProducerKey()) {
      this.producerKey = other.producerKey;
    }
    if (other.isSetTopicName()) {
      this.topicName = other.topicName;
    }
    if (other.isSetProducerProperties()) {
      Map<String,String> __this__producerProperties = new HashMap<String,String>(other.producerProperties);
      this.producerProperties = __this__producerProperties;
    }
    if (other.isSetProducerDesc()) {
      this.producerDesc = other.producerDesc;
    }
    this.hasSync = other.hasSync;
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public MsgQProducer deepCopy() {
    return new MsgQProducer(this);
  }

  @Override
  public void clear() {
    this.producerKey = null;
    this.topicName = null;
    this.producerProperties = null;
    this.producerDesc = null;
    setHasSyncIsSet(false);
    this.hasSync = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public String getProducerKey() {
    return this.producerKey;
  }

  public MsgQProducer setProducerKey(String producerKey) {
    this.producerKey = producerKey;
    return this;
  }

  public void unsetProducerKey() {
    this.producerKey = null;
  }

  /** Returns true if field producerKey is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerKey() {
    return this.producerKey != null;
  }

  public void setProducerKeyIsSet(boolean value) {
    if (!value) {
      this.producerKey = null;
    }
  }

  public String getTopicName() {
    return this.topicName;
  }

  public MsgQProducer setTopicName(String topicName) {
    this.topicName = topicName;
    return this;
  }

  public void unsetTopicName() {
    this.topicName = null;
  }

  /** Returns true if field topicName is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicName() {
    return this.topicName != null;
  }

  public void setTopicNameIsSet(boolean value) {
    if (!value) {
      this.topicName = null;
    }
  }

  public int getProducerPropertiesSize() {
    return (this.producerProperties == null) ? 0 : this.producerProperties.size();
  }

  public void putToProducerProperties(String key, String val) {
    if (this.producerProperties == null) {
      this.producerProperties = new HashMap<String,String>();
    }
    this.producerProperties.put(key, val);
  }

  public Map<String,String> getProducerProperties() {
    return this.producerProperties;
  }

  public MsgQProducer setProducerProperties(Map<String,String> producerProperties) {
    this.producerProperties = producerProperties;
    return this;
  }

  public void unsetProducerProperties() {
    this.producerProperties = null;
  }

  /** Returns true if field producerProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerProperties() {
    return this.producerProperties != null;
  }

  public void setProducerPropertiesIsSet(boolean value) {
    if (!value) {
      this.producerProperties = null;
    }
  }

  public String getProducerDesc() {
    return this.producerDesc;
  }

  public MsgQProducer setProducerDesc(String producerDesc) {
    this.producerDesc = producerDesc;
    return this;
  }

  public void unsetProducerDesc() {
    this.producerDesc = null;
  }

  /** Returns true if field producerDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerDesc() {
    return this.producerDesc != null;
  }

  public void setProducerDescIsSet(boolean value) {
    if (!value) {
      this.producerDesc = null;
    }
  }

  public short getHasSync() {
    return this.hasSync;
  }

  public MsgQProducer setHasSync(short hasSync) {
    this.hasSync = hasSync;
    setHasSyncIsSet(true);
    return this;
  }

  public void unsetHasSync() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSYNC_ISSET_ID);
  }

  /** Returns true if field hasSync is set (has been assigned a value) and false otherwise */
  public boolean isSetHasSync() {
    return EncodingUtils.testBit(__isset_bitfield, __HASSYNC_ISSET_ID);
  }

  public void setHasSyncIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSYNC_ISSET_ID, value);
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public MsgQProducer setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public MsgQProducer setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCER_KEY:
      if (value == null) {
        unsetProducerKey();
      } else {
        setProducerKey((String)value);
      }
      break;

    case TOPIC_NAME:
      if (value == null) {
        unsetTopicName();
      } else {
        setTopicName((String)value);
      }
      break;

    case PRODUCER_PROPERTIES:
      if (value == null) {
        unsetProducerProperties();
      } else {
        setProducerProperties((Map<String,String>)value);
      }
      break;

    case PRODUCER_DESC:
      if (value == null) {
        unsetProducerDesc();
      } else {
        setProducerDesc((String)value);
      }
      break;

    case HAS_SYNC:
      if (value == null) {
        unsetHasSync();
      } else {
        setHasSync((Short)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCER_KEY:
      return getProducerKey();

    case TOPIC_NAME:
      return getTopicName();

    case PRODUCER_PROPERTIES:
      return getProducerProperties();

    case PRODUCER_DESC:
      return getProducerDesc();

    case HAS_SYNC:
      return Short.valueOf(getHasSync());

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCER_KEY:
      return isSetProducerKey();
    case TOPIC_NAME:
      return isSetTopicName();
    case PRODUCER_PROPERTIES:
      return isSetProducerProperties();
    case PRODUCER_DESC:
      return isSetProducerDesc();
    case HAS_SYNC:
      return isSetHasSync();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MsgQProducer)
      return this.equals((MsgQProducer)that);
    return false;
  }

  public boolean equals(MsgQProducer that) {
    if (that == null)
      return false;

    boolean this_present_producerKey = true && this.isSetProducerKey();
    boolean that_present_producerKey = true && that.isSetProducerKey();
    if (this_present_producerKey || that_present_producerKey) {
      if (!(this_present_producerKey && that_present_producerKey))
        return false;
      if (!this.producerKey.equals(that.producerKey))
        return false;
    }

    boolean this_present_topicName = true && this.isSetTopicName();
    boolean that_present_topicName = true && that.isSetTopicName();
    if (this_present_topicName || that_present_topicName) {
      if (!(this_present_topicName && that_present_topicName))
        return false;
      if (!this.topicName.equals(that.topicName))
        return false;
    }

    boolean this_present_producerProperties = true && this.isSetProducerProperties();
    boolean that_present_producerProperties = true && that.isSetProducerProperties();
    if (this_present_producerProperties || that_present_producerProperties) {
      if (!(this_present_producerProperties && that_present_producerProperties))
        return false;
      if (!this.producerProperties.equals(that.producerProperties))
        return false;
    }

    boolean this_present_producerDesc = true && this.isSetProducerDesc();
    boolean that_present_producerDesc = true && that.isSetProducerDesc();
    if (this_present_producerDesc || that_present_producerDesc) {
      if (!(this_present_producerDesc && that_present_producerDesc))
        return false;
      if (!this.producerDesc.equals(that.producerDesc))
        return false;
    }

    boolean this_present_hasSync = true && this.isSetHasSync();
    boolean that_present_hasSync = true && that.isSetHasSync();
    if (this_present_hasSync || that_present_hasSync) {
      if (!(this_present_hasSync && that_present_hasSync))
        return false;
      if (this.hasSync != that.hasSync)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MsgQProducer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProducerKey()).compareTo(other.isSetProducerKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerKey, other.producerKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicName()).compareTo(other.isSetTopicName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicName, other.topicName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerProperties()).compareTo(other.isSetProducerProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerProperties, other.producerProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerDesc()).compareTo(other.isSetProducerDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerDesc, other.producerDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasSync()).compareTo(other.isSetHasSync());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasSync()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasSync, other.hasSync);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MsgQProducer(");
    boolean first = true;

    if (isSetProducerKey()) {
      sb.append("producerKey:");
      if (this.producerKey == null) {
        sb.append("null");
      } else {
        sb.append(this.producerKey);
      }
      first = false;
    }
    if (isSetTopicName()) {
      if (!first) sb.append(", ");
      sb.append("topicName:");
      if (this.topicName == null) {
        sb.append("null");
      } else {
        sb.append(this.topicName);
      }
      first = false;
    }
    if (isSetProducerProperties()) {
      if (!first) sb.append(", ");
      sb.append("producerProperties:");
      if (this.producerProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.producerProperties);
      }
      first = false;
    }
    if (isSetProducerDesc()) {
      if (!first) sb.append(", ");
      sb.append("producerDesc:");
      if (this.producerDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.producerDesc);
      }
      first = false;
    }
    if (isSetHasSync()) {
      if (!first) sb.append(", ");
      sb.append("hasSync:");
      sb.append(this.hasSync);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MsgQProducerStandardSchemeFactory implements SchemeFactory {
    public MsgQProducerStandardScheme getScheme() {
      return new MsgQProducerStandardScheme();
    }
  }

  private static class MsgQProducerStandardScheme extends StandardScheme<MsgQProducer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MsgQProducer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCER_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.producerKey = iprot.readString();
              struct.setProducerKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topicName = iprot.readString();
              struct.setTopicNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCER_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map70 = iprot.readMapBegin();
                struct.producerProperties = new HashMap<String,String>(2*_map70.size);
                for (int _i71 = 0; _i71 < _map70.size; ++_i71)
                {
                  String _key72;
                  String _val73;
                  _key72 = iprot.readString();
                  _val73 = iprot.readString();
                  struct.producerProperties.put(_key72, _val73);
                }
                iprot.readMapEnd();
              }
              struct.setProducerPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCER_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.producerDesc = iprot.readString();
              struct.setProducerDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HAS_SYNC
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.hasSync = iprot.readI16();
              struct.setHasSyncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MsgQProducer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.producerKey != null) {
        if (struct.isSetProducerKey()) {
          oprot.writeFieldBegin(PRODUCER_KEY_FIELD_DESC);
          oprot.writeString(struct.producerKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topicName != null) {
        if (struct.isSetTopicName()) {
          oprot.writeFieldBegin(TOPIC_NAME_FIELD_DESC);
          oprot.writeString(struct.topicName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.producerProperties != null) {
        if (struct.isSetProducerProperties()) {
          oprot.writeFieldBegin(PRODUCER_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.producerProperties.size()));
            for (Map.Entry<String, String> _iter74 : struct.producerProperties.entrySet())
            {
              oprot.writeString(_iter74.getKey());
              oprot.writeString(_iter74.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.producerDesc != null) {
        if (struct.isSetProducerDesc()) {
          oprot.writeFieldBegin(PRODUCER_DESC_FIELD_DESC);
          oprot.writeString(struct.producerDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHasSync()) {
        oprot.writeFieldBegin(HAS_SYNC_FIELD_DESC);
        oprot.writeI16(struct.hasSync);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MsgQProducerTupleSchemeFactory implements SchemeFactory {
    public MsgQProducerTupleScheme getScheme() {
      return new MsgQProducerTupleScheme();
    }
  }

  private static class MsgQProducerTupleScheme extends TupleScheme<MsgQProducer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MsgQProducer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProducerKey()) {
        optionals.set(0);
      }
      if (struct.isSetTopicName()) {
        optionals.set(1);
      }
      if (struct.isSetProducerProperties()) {
        optionals.set(2);
      }
      if (struct.isSetProducerDesc()) {
        optionals.set(3);
      }
      if (struct.isSetHasSync()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetProducerKey()) {
        oprot.writeString(struct.producerKey);
      }
      if (struct.isSetTopicName()) {
        oprot.writeString(struct.topicName);
      }
      if (struct.isSetProducerProperties()) {
        {
          oprot.writeI32(struct.producerProperties.size());
          for (Map.Entry<String, String> _iter75 : struct.producerProperties.entrySet())
          {
            oprot.writeString(_iter75.getKey());
            oprot.writeString(_iter75.getValue());
          }
        }
      }
      if (struct.isSetProducerDesc()) {
        oprot.writeString(struct.producerDesc);
      }
      if (struct.isSetHasSync()) {
        oprot.writeI16(struct.hasSync);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MsgQProducer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.producerKey = iprot.readString();
        struct.setProducerKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.topicName = iprot.readString();
        struct.setTopicNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.producerProperties = new HashMap<String,String>(2*_map76.size);
          for (int _i77 = 0; _i77 < _map76.size; ++_i77)
          {
            String _key78;
            String _val79;
            _key78 = iprot.readString();
            _val79 = iprot.readString();
            struct.producerProperties.put(_key78, _val79);
          }
        }
        struct.setProducerPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.producerDesc = iprot.readString();
        struct.setProducerDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hasSync = iprot.readI16();
        struct.setHasSyncIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

