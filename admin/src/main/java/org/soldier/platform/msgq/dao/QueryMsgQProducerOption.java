/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.msgq.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryMsgQProducerOption implements org.apache.thrift.TBase<QueryMsgQProducerOption, QueryMsgQProducerOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryMsgQProducerOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryMsgQProducerOption");

  private static final org.apache.thrift.protocol.TField PRODUCER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("producerKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topicName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRODUCER_PROPERTY_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("producerPropertyExpression", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCER_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("producerDesc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HAS_SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("hasSync", org.apache.thrift.protocol.TType.I16, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryMsgQProducerOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryMsgQProducerOptionTupleSchemeFactory());
  }

  public String producerKey; // optional
  public String topicName; // optional
  public String producerPropertyExpression; // optional
  public String producerDesc; // optional
  public short hasSync; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCER_KEY((short)1, "producerKey"),
    TOPIC_NAME((short)2, "topicName"),
    PRODUCER_PROPERTY_EXPRESSION((short)3, "producerPropertyExpression"),
    PRODUCER_DESC((short)4, "producerDesc"),
    HAS_SYNC((short)5, "hasSync");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCER_KEY
          return PRODUCER_KEY;
        case 2: // TOPIC_NAME
          return TOPIC_NAME;
        case 3: // PRODUCER_PROPERTY_EXPRESSION
          return PRODUCER_PROPERTY_EXPRESSION;
        case 4: // PRODUCER_DESC
          return PRODUCER_DESC;
        case 5: // HAS_SYNC
          return HAS_SYNC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASSYNC_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PRODUCER_KEY,_Fields.TOPIC_NAME,_Fields.PRODUCER_PROPERTY_EXPRESSION,_Fields.PRODUCER_DESC,_Fields.HAS_SYNC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCER_KEY, new org.apache.thrift.meta_data.FieldMetaData("producerKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("topicName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCER_PROPERTY_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("producerPropertyExpression", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCER_DESC, new org.apache.thrift.meta_data.FieldMetaData("producerDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HAS_SYNC, new org.apache.thrift.meta_data.FieldMetaData("hasSync", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryMsgQProducerOption.class, metaDataMap);
  }

  public QueryMsgQProducerOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryMsgQProducerOption(QueryMsgQProducerOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProducerKey()) {
      this.producerKey = other.producerKey;
    }
    if (other.isSetTopicName()) {
      this.topicName = other.topicName;
    }
    if (other.isSetProducerPropertyExpression()) {
      this.producerPropertyExpression = other.producerPropertyExpression;
    }
    if (other.isSetProducerDesc()) {
      this.producerDesc = other.producerDesc;
    }
    this.hasSync = other.hasSync;
  }

  public QueryMsgQProducerOption deepCopy() {
    return new QueryMsgQProducerOption(this);
  }

  @Override
  public void clear() {
    this.producerKey = null;
    this.topicName = null;
    this.producerPropertyExpression = null;
    this.producerDesc = null;
    setHasSyncIsSet(false);
    this.hasSync = 0;
  }

  public String getProducerKey() {
    return this.producerKey;
  }

  public QueryMsgQProducerOption setProducerKey(String producerKey) {
    this.producerKey = producerKey;
    return this;
  }

  public void unsetProducerKey() {
    this.producerKey = null;
  }

  /** Returns true if field producerKey is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerKey() {
    return this.producerKey != null;
  }

  public void setProducerKeyIsSet(boolean value) {
    if (!value) {
      this.producerKey = null;
    }
  }

  public String getTopicName() {
    return this.topicName;
  }

  public QueryMsgQProducerOption setTopicName(String topicName) {
    this.topicName = topicName;
    return this;
  }

  public void unsetTopicName() {
    this.topicName = null;
  }

  /** Returns true if field topicName is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicName() {
    return this.topicName != null;
  }

  public void setTopicNameIsSet(boolean value) {
    if (!value) {
      this.topicName = null;
    }
  }

  public String getProducerPropertyExpression() {
    return this.producerPropertyExpression;
  }

  public QueryMsgQProducerOption setProducerPropertyExpression(String producerPropertyExpression) {
    this.producerPropertyExpression = producerPropertyExpression;
    return this;
  }

  public void unsetProducerPropertyExpression() {
    this.producerPropertyExpression = null;
  }

  /** Returns true if field producerPropertyExpression is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerPropertyExpression() {
    return this.producerPropertyExpression != null;
  }

  public void setProducerPropertyExpressionIsSet(boolean value) {
    if (!value) {
      this.producerPropertyExpression = null;
    }
  }

  public String getProducerDesc() {
    return this.producerDesc;
  }

  public QueryMsgQProducerOption setProducerDesc(String producerDesc) {
    this.producerDesc = producerDesc;
    return this;
  }

  public void unsetProducerDesc() {
    this.producerDesc = null;
  }

  /** Returns true if field producerDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerDesc() {
    return this.producerDesc != null;
  }

  public void setProducerDescIsSet(boolean value) {
    if (!value) {
      this.producerDesc = null;
    }
  }

  public short getHasSync() {
    return this.hasSync;
  }

  public QueryMsgQProducerOption setHasSync(short hasSync) {
    this.hasSync = hasSync;
    setHasSyncIsSet(true);
    return this;
  }

  public void unsetHasSync() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASSYNC_ISSET_ID);
  }

  /** Returns true if field hasSync is set (has been assigned a value) and false otherwise */
  public boolean isSetHasSync() {
    return EncodingUtils.testBit(__isset_bitfield, __HASSYNC_ISSET_ID);
  }

  public void setHasSyncIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASSYNC_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCER_KEY:
      if (value == null) {
        unsetProducerKey();
      } else {
        setProducerKey((String)value);
      }
      break;

    case TOPIC_NAME:
      if (value == null) {
        unsetTopicName();
      } else {
        setTopicName((String)value);
      }
      break;

    case PRODUCER_PROPERTY_EXPRESSION:
      if (value == null) {
        unsetProducerPropertyExpression();
      } else {
        setProducerPropertyExpression((String)value);
      }
      break;

    case PRODUCER_DESC:
      if (value == null) {
        unsetProducerDesc();
      } else {
        setProducerDesc((String)value);
      }
      break;

    case HAS_SYNC:
      if (value == null) {
        unsetHasSync();
      } else {
        setHasSync((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCER_KEY:
      return getProducerKey();

    case TOPIC_NAME:
      return getTopicName();

    case PRODUCER_PROPERTY_EXPRESSION:
      return getProducerPropertyExpression();

    case PRODUCER_DESC:
      return getProducerDesc();

    case HAS_SYNC:
      return Short.valueOf(getHasSync());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCER_KEY:
      return isSetProducerKey();
    case TOPIC_NAME:
      return isSetTopicName();
    case PRODUCER_PROPERTY_EXPRESSION:
      return isSetProducerPropertyExpression();
    case PRODUCER_DESC:
      return isSetProducerDesc();
    case HAS_SYNC:
      return isSetHasSync();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryMsgQProducerOption)
      return this.equals((QueryMsgQProducerOption)that);
    return false;
  }

  public boolean equals(QueryMsgQProducerOption that) {
    if (that == null)
      return false;

    boolean this_present_producerKey = true && this.isSetProducerKey();
    boolean that_present_producerKey = true && that.isSetProducerKey();
    if (this_present_producerKey || that_present_producerKey) {
      if (!(this_present_producerKey && that_present_producerKey))
        return false;
      if (!this.producerKey.equals(that.producerKey))
        return false;
    }

    boolean this_present_topicName = true && this.isSetTopicName();
    boolean that_present_topicName = true && that.isSetTopicName();
    if (this_present_topicName || that_present_topicName) {
      if (!(this_present_topicName && that_present_topicName))
        return false;
      if (!this.topicName.equals(that.topicName))
        return false;
    }

    boolean this_present_producerPropertyExpression = true && this.isSetProducerPropertyExpression();
    boolean that_present_producerPropertyExpression = true && that.isSetProducerPropertyExpression();
    if (this_present_producerPropertyExpression || that_present_producerPropertyExpression) {
      if (!(this_present_producerPropertyExpression && that_present_producerPropertyExpression))
        return false;
      if (!this.producerPropertyExpression.equals(that.producerPropertyExpression))
        return false;
    }

    boolean this_present_producerDesc = true && this.isSetProducerDesc();
    boolean that_present_producerDesc = true && that.isSetProducerDesc();
    if (this_present_producerDesc || that_present_producerDesc) {
      if (!(this_present_producerDesc && that_present_producerDesc))
        return false;
      if (!this.producerDesc.equals(that.producerDesc))
        return false;
    }

    boolean this_present_hasSync = true && this.isSetHasSync();
    boolean that_present_hasSync = true && that.isSetHasSync();
    if (this_present_hasSync || that_present_hasSync) {
      if (!(this_present_hasSync && that_present_hasSync))
        return false;
      if (this.hasSync != that.hasSync)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryMsgQProducerOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProducerKey()).compareTo(other.isSetProducerKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerKey, other.producerKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicName()).compareTo(other.isSetTopicName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicName, other.topicName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerPropertyExpression()).compareTo(other.isSetProducerPropertyExpression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerPropertyExpression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerPropertyExpression, other.producerPropertyExpression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerDesc()).compareTo(other.isSetProducerDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerDesc, other.producerDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasSync()).compareTo(other.isSetHasSync());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasSync()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasSync, other.hasSync);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryMsgQProducerOption(");
    boolean first = true;

    if (isSetProducerKey()) {
      sb.append("producerKey:");
      if (this.producerKey == null) {
        sb.append("null");
      } else {
        sb.append(this.producerKey);
      }
      first = false;
    }
    if (isSetTopicName()) {
      if (!first) sb.append(", ");
      sb.append("topicName:");
      if (this.topicName == null) {
        sb.append("null");
      } else {
        sb.append(this.topicName);
      }
      first = false;
    }
    if (isSetProducerPropertyExpression()) {
      if (!first) sb.append(", ");
      sb.append("producerPropertyExpression:");
      if (this.producerPropertyExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.producerPropertyExpression);
      }
      first = false;
    }
    if (isSetProducerDesc()) {
      if (!first) sb.append(", ");
      sb.append("producerDesc:");
      if (this.producerDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.producerDesc);
      }
      first = false;
    }
    if (isSetHasSync()) {
      if (!first) sb.append(", ");
      sb.append("hasSync:");
      sb.append(this.hasSync);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryMsgQProducerOptionStandardSchemeFactory implements SchemeFactory {
    public QueryMsgQProducerOptionStandardScheme getScheme() {
      return new QueryMsgQProducerOptionStandardScheme();
    }
  }

  private static class QueryMsgQProducerOptionStandardScheme extends StandardScheme<QueryMsgQProducerOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryMsgQProducerOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCER_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.producerKey = iprot.readString();
              struct.setProducerKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topicName = iprot.readString();
              struct.setTopicNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRODUCER_PROPERTY_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.producerPropertyExpression = iprot.readString();
              struct.setProducerPropertyExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCER_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.producerDesc = iprot.readString();
              struct.setProducerDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HAS_SYNC
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.hasSync = iprot.readI16();
              struct.setHasSyncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryMsgQProducerOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.producerKey != null) {
        if (struct.isSetProducerKey()) {
          oprot.writeFieldBegin(PRODUCER_KEY_FIELD_DESC);
          oprot.writeString(struct.producerKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topicName != null) {
        if (struct.isSetTopicName()) {
          oprot.writeFieldBegin(TOPIC_NAME_FIELD_DESC);
          oprot.writeString(struct.topicName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.producerPropertyExpression != null) {
        if (struct.isSetProducerPropertyExpression()) {
          oprot.writeFieldBegin(PRODUCER_PROPERTY_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.producerPropertyExpression);
          oprot.writeFieldEnd();
        }
      }
      if (struct.producerDesc != null) {
        if (struct.isSetProducerDesc()) {
          oprot.writeFieldBegin(PRODUCER_DESC_FIELD_DESC);
          oprot.writeString(struct.producerDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHasSync()) {
        oprot.writeFieldBegin(HAS_SYNC_FIELD_DESC);
        oprot.writeI16(struct.hasSync);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryMsgQProducerOptionTupleSchemeFactory implements SchemeFactory {
    public QueryMsgQProducerOptionTupleScheme getScheme() {
      return new QueryMsgQProducerOptionTupleScheme();
    }
  }

  private static class QueryMsgQProducerOptionTupleScheme extends TupleScheme<QueryMsgQProducerOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryMsgQProducerOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProducerKey()) {
        optionals.set(0);
      }
      if (struct.isSetTopicName()) {
        optionals.set(1);
      }
      if (struct.isSetProducerPropertyExpression()) {
        optionals.set(2);
      }
      if (struct.isSetProducerDesc()) {
        optionals.set(3);
      }
      if (struct.isSetHasSync()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetProducerKey()) {
        oprot.writeString(struct.producerKey);
      }
      if (struct.isSetTopicName()) {
        oprot.writeString(struct.topicName);
      }
      if (struct.isSetProducerPropertyExpression()) {
        oprot.writeString(struct.producerPropertyExpression);
      }
      if (struct.isSetProducerDesc()) {
        oprot.writeString(struct.producerDesc);
      }
      if (struct.isSetHasSync()) {
        oprot.writeI16(struct.hasSync);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryMsgQProducerOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.producerKey = iprot.readString();
        struct.setProducerKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.topicName = iprot.readString();
        struct.setTopicNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.producerPropertyExpression = iprot.readString();
        struct.setProducerPropertyExpressionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.producerDesc = iprot.readString();
        struct.setProducerDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hasSync = iprot.readI16();
        struct.setHasSyncIsSet(true);
      }
    }
  }

}

