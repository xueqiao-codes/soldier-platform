/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.msgq.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MsgQTopicList implements org.apache.thrift.TBase<MsgQTopicList, MsgQTopicList._Fields>, java.io.Serializable, Cloneable, Comparable<MsgQTopicList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MsgQTopicList");

  private static final org.apache.thrift.protocol.TField TOTAL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("topicList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MsgQTopicListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MsgQTopicListTupleSchemeFactory());
  }

  public int totalNum; // required
  public List<MsgQTopic> topicList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOTAL_NUM((short)1, "totalNum"),
    TOPIC_LIST((short)2, "topicList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOTAL_NUM
          return TOTAL_NUM;
        case 2: // TOPIC_LIST
          return TOPIC_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOTAL_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPIC_LIST, new org.apache.thrift.meta_data.FieldMetaData("topicList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MsgQTopic.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MsgQTopicList.class, metaDataMap);
  }

  public MsgQTopicList() {
  }

  public MsgQTopicList(
    int totalNum,
    List<MsgQTopic> topicList)
  {
    this();
    this.totalNum = totalNum;
    setTotalNumIsSet(true);
    this.topicList = topicList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MsgQTopicList(MsgQTopicList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.totalNum = other.totalNum;
    if (other.isSetTopicList()) {
      List<MsgQTopic> __this__topicList = new ArrayList<MsgQTopic>(other.topicList.size());
      for (MsgQTopic other_element : other.topicList) {
        __this__topicList.add(new MsgQTopic(other_element));
      }
      this.topicList = __this__topicList;
    }
  }

  public MsgQTopicList deepCopy() {
    return new MsgQTopicList(this);
  }

  @Override
  public void clear() {
    setTotalNumIsSet(false);
    this.totalNum = 0;
    this.topicList = null;
  }

  public int getTotalNum() {
    return this.totalNum;
  }

  public MsgQTopicList setTotalNum(int totalNum) {
    this.totalNum = totalNum;
    setTotalNumIsSet(true);
    return this;
  }

  public void unsetTotalNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALNUM_ISSET_ID);
  }

  /** Returns true if field totalNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALNUM_ISSET_ID);
  }

  public void setTotalNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALNUM_ISSET_ID, value);
  }

  public int getTopicListSize() {
    return (this.topicList == null) ? 0 : this.topicList.size();
  }

  public java.util.Iterator<MsgQTopic> getTopicListIterator() {
    return (this.topicList == null) ? null : this.topicList.iterator();
  }

  public void addToTopicList(MsgQTopic elem) {
    if (this.topicList == null) {
      this.topicList = new ArrayList<MsgQTopic>();
    }
    this.topicList.add(elem);
  }

  public List<MsgQTopic> getTopicList() {
    return this.topicList;
  }

  public MsgQTopicList setTopicList(List<MsgQTopic> topicList) {
    this.topicList = topicList;
    return this;
  }

  public void unsetTopicList() {
    this.topicList = null;
  }

  /** Returns true if field topicList is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicList() {
    return this.topicList != null;
  }

  public void setTopicListIsSet(boolean value) {
    if (!value) {
      this.topicList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOTAL_NUM:
      if (value == null) {
        unsetTotalNum();
      } else {
        setTotalNum((Integer)value);
      }
      break;

    case TOPIC_LIST:
      if (value == null) {
        unsetTopicList();
      } else {
        setTopicList((List<MsgQTopic>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOTAL_NUM:
      return Integer.valueOf(getTotalNum());

    case TOPIC_LIST:
      return getTopicList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOTAL_NUM:
      return isSetTotalNum();
    case TOPIC_LIST:
      return isSetTopicList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MsgQTopicList)
      return this.equals((MsgQTopicList)that);
    return false;
  }

  public boolean equals(MsgQTopicList that) {
    if (that == null)
      return false;

    boolean this_present_totalNum = true;
    boolean that_present_totalNum = true;
    if (this_present_totalNum || that_present_totalNum) {
      if (!(this_present_totalNum && that_present_totalNum))
        return false;
      if (this.totalNum != that.totalNum)
        return false;
    }

    boolean this_present_topicList = true && this.isSetTopicList();
    boolean that_present_topicList = true && that.isSetTopicList();
    if (this_present_topicList || that_present_topicList) {
      if (!(this_present_topicList && that_present_topicList))
        return false;
      if (!this.topicList.equals(that.topicList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MsgQTopicList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTotalNum()).compareTo(other.isSetTotalNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNum, other.totalNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicList()).compareTo(other.isSetTopicList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicList, other.topicList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MsgQTopicList(");
    boolean first = true;

    sb.append("totalNum:");
    sb.append(this.totalNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topicList:");
    if (this.topicList == null) {
      sb.append("null");
    } else {
      sb.append(this.topicList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'totalNum' because it's a primitive and you chose the non-beans generator.
    if (topicList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'topicList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MsgQTopicListStandardSchemeFactory implements SchemeFactory {
    public MsgQTopicListStandardScheme getScheme() {
      return new MsgQTopicListStandardScheme();
    }
  }

  private static class MsgQTopicListStandardScheme extends StandardScheme<MsgQTopicList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MsgQTopicList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOTAL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalNum = iprot.readI32();
              struct.setTotalNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.topicList = new ArrayList<MsgQTopic>(_list104.size);
                for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                {
                  MsgQTopic _elem106;
                  _elem106 = new MsgQTopic();
                  _elem106.read(iprot);
                  struct.topicList.add(_elem106);
                }
                iprot.readListEnd();
              }
              struct.setTopicListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalNum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MsgQTopicList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOTAL_NUM_FIELD_DESC);
      oprot.writeI32(struct.totalNum);
      oprot.writeFieldEnd();
      if (struct.topicList != null) {
        oprot.writeFieldBegin(TOPIC_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.topicList.size()));
          for (MsgQTopic _iter107 : struct.topicList)
          {
            _iter107.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MsgQTopicListTupleSchemeFactory implements SchemeFactory {
    public MsgQTopicListTupleScheme getScheme() {
      return new MsgQTopicListTupleScheme();
    }
  }

  private static class MsgQTopicListTupleScheme extends TupleScheme<MsgQTopicList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MsgQTopicList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.totalNum);
      {
        oprot.writeI32(struct.topicList.size());
        for (MsgQTopic _iter108 : struct.topicList)
        {
          _iter108.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MsgQTopicList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.totalNum = iprot.readI32();
      struct.setTotalNumIsSet(true);
      {
        org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.topicList = new ArrayList<MsgQTopic>(_list109.size);
        for (int _i110 = 0; _i110 < _list109.size; ++_i110)
        {
          MsgQTopic _elem111;
          _elem111 = new MsgQTopic();
          _elem111.read(iprot);
          struct.topicList.add(_elem111);
        }
      }
      struct.setTopicListIsSet(true);
    }
  }

}

