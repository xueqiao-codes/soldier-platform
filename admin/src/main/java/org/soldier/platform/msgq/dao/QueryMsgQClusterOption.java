/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.msgq.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryMsgQClusterOption implements org.apache.thrift.TBase<QueryMsgQClusterOption, QueryMsgQClusterOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryMsgQClusterOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryMsgQClusterOption");

  private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLUSTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLUSTER_BROKER_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterBroker", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CLUSTER_PROPERTY_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterPropertyExpression", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLUSTER_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterDesc", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryMsgQClusterOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryMsgQClusterOptionTupleSchemeFactory());
  }

  public String clusterName; // optional
  public String clusterType; // optional
  public String clusterBroker; // optional
  public String clusterPropertyExpression; // optional
  public String clusterDesc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER_NAME((short)1, "clusterName"),
    CLUSTER_TYPE((short)2, "clusterType"),
    CLUSTER_BROKER((short)3, "clusterBroker"),
    CLUSTER_PROPERTY_EXPRESSION((short)4, "clusterPropertyExpression"),
    CLUSTER_DESC((short)5, "clusterDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER_NAME
          return CLUSTER_NAME;
        case 2: // CLUSTER_TYPE
          return CLUSTER_TYPE;
        case 3: // CLUSTER_BROKER
          return CLUSTER_BROKER;
        case 4: // CLUSTER_PROPERTY_EXPRESSION
          return CLUSTER_PROPERTY_EXPRESSION;
        case 5: // CLUSTER_DESC
          return CLUSTER_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CLUSTER_NAME,_Fields.CLUSTER_TYPE,_Fields.CLUSTER_BROKER,_Fields.CLUSTER_PROPERTY_EXPRESSION,_Fields.CLUSTER_DESC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clusterType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_BROKER, new org.apache.thrift.meta_data.FieldMetaData("clusterBroker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_PROPERTY_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("clusterPropertyExpression", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_DESC, new org.apache.thrift.meta_data.FieldMetaData("clusterDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryMsgQClusterOption.class, metaDataMap);
  }

  public QueryMsgQClusterOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryMsgQClusterOption(QueryMsgQClusterOption other) {
    if (other.isSetClusterName()) {
      this.clusterName = other.clusterName;
    }
    if (other.isSetClusterType()) {
      this.clusterType = other.clusterType;
    }
    if (other.isSetClusterBroker()) {
      this.clusterBroker = other.clusterBroker;
    }
    if (other.isSetClusterPropertyExpression()) {
      this.clusterPropertyExpression = other.clusterPropertyExpression;
    }
    if (other.isSetClusterDesc()) {
      this.clusterDesc = other.clusterDesc;
    }
  }

  public QueryMsgQClusterOption deepCopy() {
    return new QueryMsgQClusterOption(this);
  }

  @Override
  public void clear() {
    this.clusterName = null;
    this.clusterType = null;
    this.clusterBroker = null;
    this.clusterPropertyExpression = null;
    this.clusterDesc = null;
  }

  public String getClusterName() {
    return this.clusterName;
  }

  public QueryMsgQClusterOption setClusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  public void unsetClusterName() {
    this.clusterName = null;
  }

  /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterName() {
    return this.clusterName != null;
  }

  public void setClusterNameIsSet(boolean value) {
    if (!value) {
      this.clusterName = null;
    }
  }

  public String getClusterType() {
    return this.clusterType;
  }

  public QueryMsgQClusterOption setClusterType(String clusterType) {
    this.clusterType = clusterType;
    return this;
  }

  public void unsetClusterType() {
    this.clusterType = null;
  }

  /** Returns true if field clusterType is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterType() {
    return this.clusterType != null;
  }

  public void setClusterTypeIsSet(boolean value) {
    if (!value) {
      this.clusterType = null;
    }
  }

  public String getClusterBroker() {
    return this.clusterBroker;
  }

  public QueryMsgQClusterOption setClusterBroker(String clusterBroker) {
    this.clusterBroker = clusterBroker;
    return this;
  }

  public void unsetClusterBroker() {
    this.clusterBroker = null;
  }

  /** Returns true if field clusterBroker is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterBroker() {
    return this.clusterBroker != null;
  }

  public void setClusterBrokerIsSet(boolean value) {
    if (!value) {
      this.clusterBroker = null;
    }
  }

  public String getClusterPropertyExpression() {
    return this.clusterPropertyExpression;
  }

  public QueryMsgQClusterOption setClusterPropertyExpression(String clusterPropertyExpression) {
    this.clusterPropertyExpression = clusterPropertyExpression;
    return this;
  }

  public void unsetClusterPropertyExpression() {
    this.clusterPropertyExpression = null;
  }

  /** Returns true if field clusterPropertyExpression is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterPropertyExpression() {
    return this.clusterPropertyExpression != null;
  }

  public void setClusterPropertyExpressionIsSet(boolean value) {
    if (!value) {
      this.clusterPropertyExpression = null;
    }
  }

  public String getClusterDesc() {
    return this.clusterDesc;
  }

  public QueryMsgQClusterOption setClusterDesc(String clusterDesc) {
    this.clusterDesc = clusterDesc;
    return this;
  }

  public void unsetClusterDesc() {
    this.clusterDesc = null;
  }

  /** Returns true if field clusterDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterDesc() {
    return this.clusterDesc != null;
  }

  public void setClusterDescIsSet(boolean value) {
    if (!value) {
      this.clusterDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLUSTER_NAME:
      if (value == null) {
        unsetClusterName();
      } else {
        setClusterName((String)value);
      }
      break;

    case CLUSTER_TYPE:
      if (value == null) {
        unsetClusterType();
      } else {
        setClusterType((String)value);
      }
      break;

    case CLUSTER_BROKER:
      if (value == null) {
        unsetClusterBroker();
      } else {
        setClusterBroker((String)value);
      }
      break;

    case CLUSTER_PROPERTY_EXPRESSION:
      if (value == null) {
        unsetClusterPropertyExpression();
      } else {
        setClusterPropertyExpression((String)value);
      }
      break;

    case CLUSTER_DESC:
      if (value == null) {
        unsetClusterDesc();
      } else {
        setClusterDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER_NAME:
      return getClusterName();

    case CLUSTER_TYPE:
      return getClusterType();

    case CLUSTER_BROKER:
      return getClusterBroker();

    case CLUSTER_PROPERTY_EXPRESSION:
      return getClusterPropertyExpression();

    case CLUSTER_DESC:
      return getClusterDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER_NAME:
      return isSetClusterName();
    case CLUSTER_TYPE:
      return isSetClusterType();
    case CLUSTER_BROKER:
      return isSetClusterBroker();
    case CLUSTER_PROPERTY_EXPRESSION:
      return isSetClusterPropertyExpression();
    case CLUSTER_DESC:
      return isSetClusterDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryMsgQClusterOption)
      return this.equals((QueryMsgQClusterOption)that);
    return false;
  }

  public boolean equals(QueryMsgQClusterOption that) {
    if (that == null)
      return false;

    boolean this_present_clusterName = true && this.isSetClusterName();
    boolean that_present_clusterName = true && that.isSetClusterName();
    if (this_present_clusterName || that_present_clusterName) {
      if (!(this_present_clusterName && that_present_clusterName))
        return false;
      if (!this.clusterName.equals(that.clusterName))
        return false;
    }

    boolean this_present_clusterType = true && this.isSetClusterType();
    boolean that_present_clusterType = true && that.isSetClusterType();
    if (this_present_clusterType || that_present_clusterType) {
      if (!(this_present_clusterType && that_present_clusterType))
        return false;
      if (!this.clusterType.equals(that.clusterType))
        return false;
    }

    boolean this_present_clusterBroker = true && this.isSetClusterBroker();
    boolean that_present_clusterBroker = true && that.isSetClusterBroker();
    if (this_present_clusterBroker || that_present_clusterBroker) {
      if (!(this_present_clusterBroker && that_present_clusterBroker))
        return false;
      if (!this.clusterBroker.equals(that.clusterBroker))
        return false;
    }

    boolean this_present_clusterPropertyExpression = true && this.isSetClusterPropertyExpression();
    boolean that_present_clusterPropertyExpression = true && that.isSetClusterPropertyExpression();
    if (this_present_clusterPropertyExpression || that_present_clusterPropertyExpression) {
      if (!(this_present_clusterPropertyExpression && that_present_clusterPropertyExpression))
        return false;
      if (!this.clusterPropertyExpression.equals(that.clusterPropertyExpression))
        return false;
    }

    boolean this_present_clusterDesc = true && this.isSetClusterDesc();
    boolean that_present_clusterDesc = true && that.isSetClusterDesc();
    if (this_present_clusterDesc || that_present_clusterDesc) {
      if (!(this_present_clusterDesc && that_present_clusterDesc))
        return false;
      if (!this.clusterDesc.equals(that.clusterDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryMsgQClusterOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterType()).compareTo(other.isSetClusterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterType, other.clusterType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterBroker()).compareTo(other.isSetClusterBroker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterBroker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterBroker, other.clusterBroker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterPropertyExpression()).compareTo(other.isSetClusterPropertyExpression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterPropertyExpression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterPropertyExpression, other.clusterPropertyExpression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterDesc()).compareTo(other.isSetClusterDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterDesc, other.clusterDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryMsgQClusterOption(");
    boolean first = true;

    if (isSetClusterName()) {
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
    }
    if (isSetClusterType()) {
      if (!first) sb.append(", ");
      sb.append("clusterType:");
      if (this.clusterType == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterType);
      }
      first = false;
    }
    if (isSetClusterBroker()) {
      if (!first) sb.append(", ");
      sb.append("clusterBroker:");
      if (this.clusterBroker == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterBroker);
      }
      first = false;
    }
    if (isSetClusterPropertyExpression()) {
      if (!first) sb.append(", ");
      sb.append("clusterPropertyExpression:");
      if (this.clusterPropertyExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterPropertyExpression);
      }
      first = false;
    }
    if (isSetClusterDesc()) {
      if (!first) sb.append(", ");
      sb.append("clusterDesc:");
      if (this.clusterDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterDesc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryMsgQClusterOptionStandardSchemeFactory implements SchemeFactory {
    public QueryMsgQClusterOptionStandardScheme getScheme() {
      return new QueryMsgQClusterOptionStandardScheme();
    }
  }

  private static class QueryMsgQClusterOptionStandardScheme extends StandardScheme<QueryMsgQClusterOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryMsgQClusterOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterName = iprot.readString();
              struct.setClusterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLUSTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterType = iprot.readString();
              struct.setClusterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLUSTER_BROKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterBroker = iprot.readString();
              struct.setClusterBrokerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLUSTER_PROPERTY_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterPropertyExpression = iprot.readString();
              struct.setClusterPropertyExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLUSTER_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterDesc = iprot.readString();
              struct.setClusterDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryMsgQClusterOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clusterName != null) {
        if (struct.isSetClusterName()) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clusterType != null) {
        if (struct.isSetClusterType()) {
          oprot.writeFieldBegin(CLUSTER_TYPE_FIELD_DESC);
          oprot.writeString(struct.clusterType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clusterBroker != null) {
        if (struct.isSetClusterBroker()) {
          oprot.writeFieldBegin(CLUSTER_BROKER_FIELD_DESC);
          oprot.writeString(struct.clusterBroker);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clusterPropertyExpression != null) {
        if (struct.isSetClusterPropertyExpression()) {
          oprot.writeFieldBegin(CLUSTER_PROPERTY_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.clusterPropertyExpression);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clusterDesc != null) {
        if (struct.isSetClusterDesc()) {
          oprot.writeFieldBegin(CLUSTER_DESC_FIELD_DESC);
          oprot.writeString(struct.clusterDesc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryMsgQClusterOptionTupleSchemeFactory implements SchemeFactory {
    public QueryMsgQClusterOptionTupleScheme getScheme() {
      return new QueryMsgQClusterOptionTupleScheme();
    }
  }

  private static class QueryMsgQClusterOptionTupleScheme extends TupleScheme<QueryMsgQClusterOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryMsgQClusterOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClusterName()) {
        optionals.set(0);
      }
      if (struct.isSetClusterType()) {
        optionals.set(1);
      }
      if (struct.isSetClusterBroker()) {
        optionals.set(2);
      }
      if (struct.isSetClusterPropertyExpression()) {
        optionals.set(3);
      }
      if (struct.isSetClusterDesc()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetClusterName()) {
        oprot.writeString(struct.clusterName);
      }
      if (struct.isSetClusterType()) {
        oprot.writeString(struct.clusterType);
      }
      if (struct.isSetClusterBroker()) {
        oprot.writeString(struct.clusterBroker);
      }
      if (struct.isSetClusterPropertyExpression()) {
        oprot.writeString(struct.clusterPropertyExpression);
      }
      if (struct.isSetClusterDesc()) {
        oprot.writeString(struct.clusterDesc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryMsgQClusterOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.clusterName = iprot.readString();
        struct.setClusterNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clusterType = iprot.readString();
        struct.setClusterTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clusterBroker = iprot.readString();
        struct.setClusterBrokerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clusterPropertyExpression = iprot.readString();
        struct.setClusterPropertyExpressionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clusterDesc = iprot.readString();
        struct.setClusterDescIsSet(true);
      }
    }
  }

}

