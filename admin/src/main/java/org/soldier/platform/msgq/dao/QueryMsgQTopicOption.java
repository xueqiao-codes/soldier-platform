/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.msgq.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryMsgQTopicOption implements org.apache.thrift.TBase<QueryMsgQTopicOption, QueryMsgQTopicOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryMsgQTopicOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryMsgQTopicOption");

  private static final org.apache.thrift.protocol.TField TOPIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topicName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("topicCluster", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOPIC_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("topicDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOPIC_PROPERTY_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("topicPropertyExpression", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryMsgQTopicOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryMsgQTopicOptionTupleSchemeFactory());
  }

  public String topicName; // optional
  public String topicCluster; // optional
  public String topicDesc; // optional
  public String topicPropertyExpression; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOPIC_NAME((short)1, "topicName"),
    TOPIC_CLUSTER((short)2, "topicCluster"),
    TOPIC_DESC((short)3, "topicDesc"),
    TOPIC_PROPERTY_EXPRESSION((short)4, "topicPropertyExpression");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOPIC_NAME
          return TOPIC_NAME;
        case 2: // TOPIC_CLUSTER
          return TOPIC_CLUSTER;
        case 3: // TOPIC_DESC
          return TOPIC_DESC;
        case 4: // TOPIC_PROPERTY_EXPRESSION
          return TOPIC_PROPERTY_EXPRESSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TOPIC_NAME,_Fields.TOPIC_CLUSTER,_Fields.TOPIC_DESC,_Fields.TOPIC_PROPERTY_EXPRESSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOPIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("topicName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("topicCluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_DESC, new org.apache.thrift.meta_data.FieldMetaData("topicDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_PROPERTY_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("topicPropertyExpression", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryMsgQTopicOption.class, metaDataMap);
  }

  public QueryMsgQTopicOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryMsgQTopicOption(QueryMsgQTopicOption other) {
    if (other.isSetTopicName()) {
      this.topicName = other.topicName;
    }
    if (other.isSetTopicCluster()) {
      this.topicCluster = other.topicCluster;
    }
    if (other.isSetTopicDesc()) {
      this.topicDesc = other.topicDesc;
    }
    if (other.isSetTopicPropertyExpression()) {
      this.topicPropertyExpression = other.topicPropertyExpression;
    }
  }

  public QueryMsgQTopicOption deepCopy() {
    return new QueryMsgQTopicOption(this);
  }

  @Override
  public void clear() {
    this.topicName = null;
    this.topicCluster = null;
    this.topicDesc = null;
    this.topicPropertyExpression = null;
  }

  public String getTopicName() {
    return this.topicName;
  }

  public QueryMsgQTopicOption setTopicName(String topicName) {
    this.topicName = topicName;
    return this;
  }

  public void unsetTopicName() {
    this.topicName = null;
  }

  /** Returns true if field topicName is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicName() {
    return this.topicName != null;
  }

  public void setTopicNameIsSet(boolean value) {
    if (!value) {
      this.topicName = null;
    }
  }

  public String getTopicCluster() {
    return this.topicCluster;
  }

  public QueryMsgQTopicOption setTopicCluster(String topicCluster) {
    this.topicCluster = topicCluster;
    return this;
  }

  public void unsetTopicCluster() {
    this.topicCluster = null;
  }

  /** Returns true if field topicCluster is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicCluster() {
    return this.topicCluster != null;
  }

  public void setTopicClusterIsSet(boolean value) {
    if (!value) {
      this.topicCluster = null;
    }
  }

  public String getTopicDesc() {
    return this.topicDesc;
  }

  public QueryMsgQTopicOption setTopicDesc(String topicDesc) {
    this.topicDesc = topicDesc;
    return this;
  }

  public void unsetTopicDesc() {
    this.topicDesc = null;
  }

  /** Returns true if field topicDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicDesc() {
    return this.topicDesc != null;
  }

  public void setTopicDescIsSet(boolean value) {
    if (!value) {
      this.topicDesc = null;
    }
  }

  public String getTopicPropertyExpression() {
    return this.topicPropertyExpression;
  }

  public QueryMsgQTopicOption setTopicPropertyExpression(String topicPropertyExpression) {
    this.topicPropertyExpression = topicPropertyExpression;
    return this;
  }

  public void unsetTopicPropertyExpression() {
    this.topicPropertyExpression = null;
  }

  /** Returns true if field topicPropertyExpression is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicPropertyExpression() {
    return this.topicPropertyExpression != null;
  }

  public void setTopicPropertyExpressionIsSet(boolean value) {
    if (!value) {
      this.topicPropertyExpression = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOPIC_NAME:
      if (value == null) {
        unsetTopicName();
      } else {
        setTopicName((String)value);
      }
      break;

    case TOPIC_CLUSTER:
      if (value == null) {
        unsetTopicCluster();
      } else {
        setTopicCluster((String)value);
      }
      break;

    case TOPIC_DESC:
      if (value == null) {
        unsetTopicDesc();
      } else {
        setTopicDesc((String)value);
      }
      break;

    case TOPIC_PROPERTY_EXPRESSION:
      if (value == null) {
        unsetTopicPropertyExpression();
      } else {
        setTopicPropertyExpression((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOPIC_NAME:
      return getTopicName();

    case TOPIC_CLUSTER:
      return getTopicCluster();

    case TOPIC_DESC:
      return getTopicDesc();

    case TOPIC_PROPERTY_EXPRESSION:
      return getTopicPropertyExpression();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOPIC_NAME:
      return isSetTopicName();
    case TOPIC_CLUSTER:
      return isSetTopicCluster();
    case TOPIC_DESC:
      return isSetTopicDesc();
    case TOPIC_PROPERTY_EXPRESSION:
      return isSetTopicPropertyExpression();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryMsgQTopicOption)
      return this.equals((QueryMsgQTopicOption)that);
    return false;
  }

  public boolean equals(QueryMsgQTopicOption that) {
    if (that == null)
      return false;

    boolean this_present_topicName = true && this.isSetTopicName();
    boolean that_present_topicName = true && that.isSetTopicName();
    if (this_present_topicName || that_present_topicName) {
      if (!(this_present_topicName && that_present_topicName))
        return false;
      if (!this.topicName.equals(that.topicName))
        return false;
    }

    boolean this_present_topicCluster = true && this.isSetTopicCluster();
    boolean that_present_topicCluster = true && that.isSetTopicCluster();
    if (this_present_topicCluster || that_present_topicCluster) {
      if (!(this_present_topicCluster && that_present_topicCluster))
        return false;
      if (!this.topicCluster.equals(that.topicCluster))
        return false;
    }

    boolean this_present_topicDesc = true && this.isSetTopicDesc();
    boolean that_present_topicDesc = true && that.isSetTopicDesc();
    if (this_present_topicDesc || that_present_topicDesc) {
      if (!(this_present_topicDesc && that_present_topicDesc))
        return false;
      if (!this.topicDesc.equals(that.topicDesc))
        return false;
    }

    boolean this_present_topicPropertyExpression = true && this.isSetTopicPropertyExpression();
    boolean that_present_topicPropertyExpression = true && that.isSetTopicPropertyExpression();
    if (this_present_topicPropertyExpression || that_present_topicPropertyExpression) {
      if (!(this_present_topicPropertyExpression && that_present_topicPropertyExpression))
        return false;
      if (!this.topicPropertyExpression.equals(that.topicPropertyExpression))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryMsgQTopicOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTopicName()).compareTo(other.isSetTopicName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicName, other.topicName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicCluster()).compareTo(other.isSetTopicCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicCluster, other.topicCluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicDesc()).compareTo(other.isSetTopicDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicDesc, other.topicDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicPropertyExpression()).compareTo(other.isSetTopicPropertyExpression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicPropertyExpression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicPropertyExpression, other.topicPropertyExpression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryMsgQTopicOption(");
    boolean first = true;

    if (isSetTopicName()) {
      sb.append("topicName:");
      if (this.topicName == null) {
        sb.append("null");
      } else {
        sb.append(this.topicName);
      }
      first = false;
    }
    if (isSetTopicCluster()) {
      if (!first) sb.append(", ");
      sb.append("topicCluster:");
      if (this.topicCluster == null) {
        sb.append("null");
      } else {
        sb.append(this.topicCluster);
      }
      first = false;
    }
    if (isSetTopicDesc()) {
      if (!first) sb.append(", ");
      sb.append("topicDesc:");
      if (this.topicDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.topicDesc);
      }
      first = false;
    }
    if (isSetTopicPropertyExpression()) {
      if (!first) sb.append(", ");
      sb.append("topicPropertyExpression:");
      if (this.topicPropertyExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.topicPropertyExpression);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryMsgQTopicOptionStandardSchemeFactory implements SchemeFactory {
    public QueryMsgQTopicOptionStandardScheme getScheme() {
      return new QueryMsgQTopicOptionStandardScheme();
    }
  }

  private static class QueryMsgQTopicOptionStandardScheme extends StandardScheme<QueryMsgQTopicOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryMsgQTopicOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOPIC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topicName = iprot.readString();
              struct.setTopicNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC_CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topicCluster = iprot.readString();
              struct.setTopicClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOPIC_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topicDesc = iprot.readString();
              struct.setTopicDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPIC_PROPERTY_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topicPropertyExpression = iprot.readString();
              struct.setTopicPropertyExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryMsgQTopicOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.topicName != null) {
        if (struct.isSetTopicName()) {
          oprot.writeFieldBegin(TOPIC_NAME_FIELD_DESC);
          oprot.writeString(struct.topicName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topicCluster != null) {
        if (struct.isSetTopicCluster()) {
          oprot.writeFieldBegin(TOPIC_CLUSTER_FIELD_DESC);
          oprot.writeString(struct.topicCluster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topicDesc != null) {
        if (struct.isSetTopicDesc()) {
          oprot.writeFieldBegin(TOPIC_DESC_FIELD_DESC);
          oprot.writeString(struct.topicDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topicPropertyExpression != null) {
        if (struct.isSetTopicPropertyExpression()) {
          oprot.writeFieldBegin(TOPIC_PROPERTY_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.topicPropertyExpression);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryMsgQTopicOptionTupleSchemeFactory implements SchemeFactory {
    public QueryMsgQTopicOptionTupleScheme getScheme() {
      return new QueryMsgQTopicOptionTupleScheme();
    }
  }

  private static class QueryMsgQTopicOptionTupleScheme extends TupleScheme<QueryMsgQTopicOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryMsgQTopicOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTopicName()) {
        optionals.set(0);
      }
      if (struct.isSetTopicCluster()) {
        optionals.set(1);
      }
      if (struct.isSetTopicDesc()) {
        optionals.set(2);
      }
      if (struct.isSetTopicPropertyExpression()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTopicName()) {
        oprot.writeString(struct.topicName);
      }
      if (struct.isSetTopicCluster()) {
        oprot.writeString(struct.topicCluster);
      }
      if (struct.isSetTopicDesc()) {
        oprot.writeString(struct.topicDesc);
      }
      if (struct.isSetTopicPropertyExpression()) {
        oprot.writeString(struct.topicPropertyExpression);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryMsgQTopicOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.topicName = iprot.readString();
        struct.setTopicNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.topicCluster = iprot.readString();
        struct.setTopicClusterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.topicDesc = iprot.readString();
        struct.setTopicDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topicPropertyExpression = iprot.readString();
        struct.setTopicPropertyExpressionIsSet(true);
      }
    }
  }

}

