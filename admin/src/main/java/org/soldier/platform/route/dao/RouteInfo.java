/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.route.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RouteInfo implements org.apache.thrift.TBase<RouteInfo, RouteInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RouteInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RouteInfo");

  private static final org.apache.thrift.protocol.TField SERVICE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceKey", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("ipList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ROUTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("routeType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SERVICE_ADMIN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceAdminList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField IDL_RELATIVE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("idlRelativePath", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RELATED_SCREEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedScreenId", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RouteInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RouteInfoTupleSchemeFactory());
  }

  public int serviceKey; // required
  public String serviceName; // optional
  public List<Long> ipList; // optional
  public String desc; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional
  /**
   * 
   * @see RouteType
   */
  public RouteType routeType; // optional
  public List<String> serviceAdminList; // optional
  public String idlRelativePath; // optional
  public String relatedScreenId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_KEY((short)1, "serviceKey"),
    SERVICE_NAME((short)2, "serviceName"),
    IP_LIST((short)3, "ipList"),
    DESC((short)4, "desc"),
    CREATE_TIMESTAMP((short)5, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)6, "lastmodifyTimestamp"),
    /**
     * 
     * @see RouteType
     */
    ROUTE_TYPE((short)7, "routeType"),
    SERVICE_ADMIN_LIST((short)8, "serviceAdminList"),
    IDL_RELATIVE_PATH((short)9, "idlRelativePath"),
    RELATED_SCREEN_ID((short)10, "relatedScreenId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_KEY
          return SERVICE_KEY;
        case 2: // SERVICE_NAME
          return SERVICE_NAME;
        case 3: // IP_LIST
          return IP_LIST;
        case 4: // DESC
          return DESC;
        case 5: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 6: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        case 7: // ROUTE_TYPE
          return ROUTE_TYPE;
        case 8: // SERVICE_ADMIN_LIST
          return SERVICE_ADMIN_LIST;
        case 9: // IDL_RELATIVE_PATH
          return IDL_RELATIVE_PATH;
        case 10: // RELATED_SCREEN_ID
          return RELATED_SCREEN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVICEKEY_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SERVICE_NAME,_Fields.IP_LIST,_Fields.DESC,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP,_Fields.ROUTE_TYPE,_Fields.SERVICE_ADMIN_LIST,_Fields.IDL_RELATIVE_PATH,_Fields.RELATED_SCREEN_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_KEY, new org.apache.thrift.meta_data.FieldMetaData("serviceKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_LIST, new org.apache.thrift.meta_data.FieldMetaData("ipList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROUTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("routeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RouteType.class)));
    tmpMap.put(_Fields.SERVICE_ADMIN_LIST, new org.apache.thrift.meta_data.FieldMetaData("serviceAdminList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IDL_RELATIVE_PATH, new org.apache.thrift.meta_data.FieldMetaData("idlRelativePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATED_SCREEN_ID, new org.apache.thrift.meta_data.FieldMetaData("relatedScreenId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RouteInfo.class, metaDataMap);
  }

  public RouteInfo() {
  }

  public RouteInfo(
    int serviceKey)
  {
    this();
    this.serviceKey = serviceKey;
    setServiceKeyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RouteInfo(RouteInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.serviceKey = other.serviceKey;
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetIpList()) {
      List<Long> __this__ipList = new ArrayList<Long>(other.ipList);
      this.ipList = __this__ipList;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
    if (other.isSetRouteType()) {
      this.routeType = other.routeType;
    }
    if (other.isSetServiceAdminList()) {
      List<String> __this__serviceAdminList = new ArrayList<String>(other.serviceAdminList);
      this.serviceAdminList = __this__serviceAdminList;
    }
    if (other.isSetIdlRelativePath()) {
      this.idlRelativePath = other.idlRelativePath;
    }
    if (other.isSetRelatedScreenId()) {
      this.relatedScreenId = other.relatedScreenId;
    }
  }

  public RouteInfo deepCopy() {
    return new RouteInfo(this);
  }

  @Override
  public void clear() {
    setServiceKeyIsSet(false);
    this.serviceKey = 0;
    this.serviceName = null;
    this.ipList = null;
    this.desc = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
    this.routeType = null;
    this.serviceAdminList = null;
    this.idlRelativePath = null;
    this.relatedScreenId = null;
  }

  public int getServiceKey() {
    return this.serviceKey;
  }

  public RouteInfo setServiceKey(int serviceKey) {
    this.serviceKey = serviceKey;
    setServiceKeyIsSet(true);
    return this;
  }

  public void unsetServiceKey() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICEKEY_ISSET_ID);
  }

  /** Returns true if field serviceKey is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceKey() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVICEKEY_ISSET_ID);
  }

  public void setServiceKeyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICEKEY_ISSET_ID, value);
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public RouteInfo setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public int getIpListSize() {
    return (this.ipList == null) ? 0 : this.ipList.size();
  }

  public java.util.Iterator<Long> getIpListIterator() {
    return (this.ipList == null) ? null : this.ipList.iterator();
  }

  public void addToIpList(long elem) {
    if (this.ipList == null) {
      this.ipList = new ArrayList<Long>();
    }
    this.ipList.add(elem);
  }

  public List<Long> getIpList() {
    return this.ipList;
  }

  public RouteInfo setIpList(List<Long> ipList) {
    this.ipList = ipList;
    return this;
  }

  public void unsetIpList() {
    this.ipList = null;
  }

  /** Returns true if field ipList is set (has been assigned a value) and false otherwise */
  public boolean isSetIpList() {
    return this.ipList != null;
  }

  public void setIpListIsSet(boolean value) {
    if (!value) {
      this.ipList = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public RouteInfo setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public RouteInfo setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public RouteInfo setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  /**
   * 
   * @see RouteType
   */
  public RouteType getRouteType() {
    return this.routeType;
  }

  /**
   * 
   * @see RouteType
   */
  public RouteInfo setRouteType(RouteType routeType) {
    this.routeType = routeType;
    return this;
  }

  public void unsetRouteType() {
    this.routeType = null;
  }

  /** Returns true if field routeType is set (has been assigned a value) and false otherwise */
  public boolean isSetRouteType() {
    return this.routeType != null;
  }

  public void setRouteTypeIsSet(boolean value) {
    if (!value) {
      this.routeType = null;
    }
  }

  public int getServiceAdminListSize() {
    return (this.serviceAdminList == null) ? 0 : this.serviceAdminList.size();
  }

  public java.util.Iterator<String> getServiceAdminListIterator() {
    return (this.serviceAdminList == null) ? null : this.serviceAdminList.iterator();
  }

  public void addToServiceAdminList(String elem) {
    if (this.serviceAdminList == null) {
      this.serviceAdminList = new ArrayList<String>();
    }
    this.serviceAdminList.add(elem);
  }

  public List<String> getServiceAdminList() {
    return this.serviceAdminList;
  }

  public RouteInfo setServiceAdminList(List<String> serviceAdminList) {
    this.serviceAdminList = serviceAdminList;
    return this;
  }

  public void unsetServiceAdminList() {
    this.serviceAdminList = null;
  }

  /** Returns true if field serviceAdminList is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceAdminList() {
    return this.serviceAdminList != null;
  }

  public void setServiceAdminListIsSet(boolean value) {
    if (!value) {
      this.serviceAdminList = null;
    }
  }

  public String getIdlRelativePath() {
    return this.idlRelativePath;
  }

  public RouteInfo setIdlRelativePath(String idlRelativePath) {
    this.idlRelativePath = idlRelativePath;
    return this;
  }

  public void unsetIdlRelativePath() {
    this.idlRelativePath = null;
  }

  /** Returns true if field idlRelativePath is set (has been assigned a value) and false otherwise */
  public boolean isSetIdlRelativePath() {
    return this.idlRelativePath != null;
  }

  public void setIdlRelativePathIsSet(boolean value) {
    if (!value) {
      this.idlRelativePath = null;
    }
  }

  public String getRelatedScreenId() {
    return this.relatedScreenId;
  }

  public RouteInfo setRelatedScreenId(String relatedScreenId) {
    this.relatedScreenId = relatedScreenId;
    return this;
  }

  public void unsetRelatedScreenId() {
    this.relatedScreenId = null;
  }

  /** Returns true if field relatedScreenId is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedScreenId() {
    return this.relatedScreenId != null;
  }

  public void setRelatedScreenIdIsSet(boolean value) {
    if (!value) {
      this.relatedScreenId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_KEY:
      if (value == null) {
        unsetServiceKey();
      } else {
        setServiceKey((Integer)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case IP_LIST:
      if (value == null) {
        unsetIpList();
      } else {
        setIpList((List<Long>)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    case ROUTE_TYPE:
      if (value == null) {
        unsetRouteType();
      } else {
        setRouteType((RouteType)value);
      }
      break;

    case SERVICE_ADMIN_LIST:
      if (value == null) {
        unsetServiceAdminList();
      } else {
        setServiceAdminList((List<String>)value);
      }
      break;

    case IDL_RELATIVE_PATH:
      if (value == null) {
        unsetIdlRelativePath();
      } else {
        setIdlRelativePath((String)value);
      }
      break;

    case RELATED_SCREEN_ID:
      if (value == null) {
        unsetRelatedScreenId();
      } else {
        setRelatedScreenId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_KEY:
      return Integer.valueOf(getServiceKey());

    case SERVICE_NAME:
      return getServiceName();

    case IP_LIST:
      return getIpList();

    case DESC:
      return getDesc();

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    case ROUTE_TYPE:
      return getRouteType();

    case SERVICE_ADMIN_LIST:
      return getServiceAdminList();

    case IDL_RELATIVE_PATH:
      return getIdlRelativePath();

    case RELATED_SCREEN_ID:
      return getRelatedScreenId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_KEY:
      return isSetServiceKey();
    case SERVICE_NAME:
      return isSetServiceName();
    case IP_LIST:
      return isSetIpList();
    case DESC:
      return isSetDesc();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    case ROUTE_TYPE:
      return isSetRouteType();
    case SERVICE_ADMIN_LIST:
      return isSetServiceAdminList();
    case IDL_RELATIVE_PATH:
      return isSetIdlRelativePath();
    case RELATED_SCREEN_ID:
      return isSetRelatedScreenId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RouteInfo)
      return this.equals((RouteInfo)that);
    return false;
  }

  public boolean equals(RouteInfo that) {
    if (that == null)
      return false;

    boolean this_present_serviceKey = true;
    boolean that_present_serviceKey = true;
    if (this_present_serviceKey || that_present_serviceKey) {
      if (!(this_present_serviceKey && that_present_serviceKey))
        return false;
      if (this.serviceKey != that.serviceKey)
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_ipList = true && this.isSetIpList();
    boolean that_present_ipList = true && that.isSetIpList();
    if (this_present_ipList || that_present_ipList) {
      if (!(this_present_ipList && that_present_ipList))
        return false;
      if (!this.ipList.equals(that.ipList))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    boolean this_present_routeType = true && this.isSetRouteType();
    boolean that_present_routeType = true && that.isSetRouteType();
    if (this_present_routeType || that_present_routeType) {
      if (!(this_present_routeType && that_present_routeType))
        return false;
      if (!this.routeType.equals(that.routeType))
        return false;
    }

    boolean this_present_serviceAdminList = true && this.isSetServiceAdminList();
    boolean that_present_serviceAdminList = true && that.isSetServiceAdminList();
    if (this_present_serviceAdminList || that_present_serviceAdminList) {
      if (!(this_present_serviceAdminList && that_present_serviceAdminList))
        return false;
      if (!this.serviceAdminList.equals(that.serviceAdminList))
        return false;
    }

    boolean this_present_idlRelativePath = true && this.isSetIdlRelativePath();
    boolean that_present_idlRelativePath = true && that.isSetIdlRelativePath();
    if (this_present_idlRelativePath || that_present_idlRelativePath) {
      if (!(this_present_idlRelativePath && that_present_idlRelativePath))
        return false;
      if (!this.idlRelativePath.equals(that.idlRelativePath))
        return false;
    }

    boolean this_present_relatedScreenId = true && this.isSetRelatedScreenId();
    boolean that_present_relatedScreenId = true && that.isSetRelatedScreenId();
    if (this_present_relatedScreenId || that_present_relatedScreenId) {
      if (!(this_present_relatedScreenId && that_present_relatedScreenId))
        return false;
      if (!this.relatedScreenId.equals(that.relatedScreenId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RouteInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceKey()).compareTo(other.isSetServiceKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceKey, other.serviceKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpList()).compareTo(other.isSetIpList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipList, other.ipList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRouteType()).compareTo(other.isSetRouteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRouteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeType, other.routeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceAdminList()).compareTo(other.isSetServiceAdminList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceAdminList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceAdminList, other.serviceAdminList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdlRelativePath()).compareTo(other.isSetIdlRelativePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdlRelativePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idlRelativePath, other.idlRelativePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedScreenId()).compareTo(other.isSetRelatedScreenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedScreenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedScreenId, other.relatedScreenId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RouteInfo(");
    boolean first = true;

    sb.append("serviceKey:");
    sb.append(this.serviceKey);
    first = false;
    if (isSetServiceName()) {
      if (!first) sb.append(", ");
      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
    }
    if (isSetIpList()) {
      if (!first) sb.append(", ");
      sb.append("ipList:");
      if (this.ipList == null) {
        sb.append("null");
      } else {
        sb.append(this.ipList);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    if (isSetRouteType()) {
      if (!first) sb.append(", ");
      sb.append("routeType:");
      if (this.routeType == null) {
        sb.append("null");
      } else {
        sb.append(this.routeType);
      }
      first = false;
    }
    if (isSetServiceAdminList()) {
      if (!first) sb.append(", ");
      sb.append("serviceAdminList:");
      if (this.serviceAdminList == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceAdminList);
      }
      first = false;
    }
    if (isSetIdlRelativePath()) {
      if (!first) sb.append(", ");
      sb.append("idlRelativePath:");
      if (this.idlRelativePath == null) {
        sb.append("null");
      } else {
        sb.append(this.idlRelativePath);
      }
      first = false;
    }
    if (isSetRelatedScreenId()) {
      if (!first) sb.append(", ");
      sb.append("relatedScreenId:");
      if (this.relatedScreenId == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedScreenId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'serviceKey' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RouteInfoStandardSchemeFactory implements SchemeFactory {
    public RouteInfoStandardScheme getScheme() {
      return new RouteInfoStandardScheme();
    }
  }

  private static class RouteInfoStandardScheme extends StandardScheme<RouteInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RouteInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceKey = iprot.readI32();
              struct.setServiceKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IP_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.ipList = new ArrayList<Long>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  long _elem18;
                  _elem18 = iprot.readI64();
                  struct.ipList.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setIpListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROUTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.routeType = RouteType.findByValue(iprot.readI32());
              struct.setRouteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SERVICE_ADMIN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.serviceAdminList = new ArrayList<String>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  String _elem21;
                  _elem21 = iprot.readString();
                  struct.serviceAdminList.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setServiceAdminListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IDL_RELATIVE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.idlRelativePath = iprot.readString();
              struct.setIdlRelativePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RELATED_SCREEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relatedScreenId = iprot.readString();
              struct.setRelatedScreenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetServiceKey()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceKey' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RouteInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SERVICE_KEY_FIELD_DESC);
      oprot.writeI32(struct.serviceKey);
      oprot.writeFieldEnd();
      if (struct.serviceName != null) {
        if (struct.isSetServiceName()) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ipList != null) {
        if (struct.isSetIpList()) {
          oprot.writeFieldBegin(IP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ipList.size()));
            for (long _iter22 : struct.ipList)
            {
              oprot.writeI64(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.routeType != null) {
        if (struct.isSetRouteType()) {
          oprot.writeFieldBegin(ROUTE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.routeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.serviceAdminList != null) {
        if (struct.isSetServiceAdminList()) {
          oprot.writeFieldBegin(SERVICE_ADMIN_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.serviceAdminList.size()));
            for (String _iter23 : struct.serviceAdminList)
            {
              oprot.writeString(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.idlRelativePath != null) {
        if (struct.isSetIdlRelativePath()) {
          oprot.writeFieldBegin(IDL_RELATIVE_PATH_FIELD_DESC);
          oprot.writeString(struct.idlRelativePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.relatedScreenId != null) {
        if (struct.isSetRelatedScreenId()) {
          oprot.writeFieldBegin(RELATED_SCREEN_ID_FIELD_DESC);
          oprot.writeString(struct.relatedScreenId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RouteInfoTupleSchemeFactory implements SchemeFactory {
    public RouteInfoTupleScheme getScheme() {
      return new RouteInfoTupleScheme();
    }
  }

  private static class RouteInfoTupleScheme extends TupleScheme<RouteInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RouteInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.serviceKey);
      BitSet optionals = new BitSet();
      if (struct.isSetServiceName()) {
        optionals.set(0);
      }
      if (struct.isSetIpList()) {
        optionals.set(1);
      }
      if (struct.isSetDesc()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(3);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetRouteType()) {
        optionals.set(5);
      }
      if (struct.isSetServiceAdminList()) {
        optionals.set(6);
      }
      if (struct.isSetIdlRelativePath()) {
        optionals.set(7);
      }
      if (struct.isSetRelatedScreenId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetIpList()) {
        {
          oprot.writeI32(struct.ipList.size());
          for (long _iter24 : struct.ipList)
          {
            oprot.writeI64(_iter24);
          }
        }
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
      if (struct.isSetRouteType()) {
        oprot.writeI32(struct.routeType.getValue());
      }
      if (struct.isSetServiceAdminList()) {
        {
          oprot.writeI32(struct.serviceAdminList.size());
          for (String _iter25 : struct.serviceAdminList)
          {
            oprot.writeString(_iter25);
          }
        }
      }
      if (struct.isSetIdlRelativePath()) {
        oprot.writeString(struct.idlRelativePath);
      }
      if (struct.isSetRelatedScreenId()) {
        oprot.writeString(struct.relatedScreenId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RouteInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.serviceKey = iprot.readI32();
      struct.setServiceKeyIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.ipList = new ArrayList<Long>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            long _elem28;
            _elem28 = iprot.readI64();
            struct.ipList.add(_elem28);
          }
        }
        struct.setIpListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.routeType = RouteType.findByValue(iprot.readI32());
        struct.setRouteTypeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.serviceAdminList = new ArrayList<String>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            String _elem31;
            _elem31 = iprot.readString();
            struct.serviceAdminList.add(_elem31);
          }
        }
        struct.setServiceAdminListIsSet(true);
      }
      if (incoming.get(7)) {
        struct.idlRelativePath = iprot.readString();
        struct.setIdlRelativePathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.relatedScreenId = iprot.readString();
        struct.setRelatedScreenIdIsSet(true);
      }
    }
  }

}

