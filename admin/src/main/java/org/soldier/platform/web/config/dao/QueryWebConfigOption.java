/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.web.config.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryWebConfigOption implements org.apache.thrift.TBase<QueryWebConfigOption, QueryWebConfigOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryWebConfigOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryWebConfigOption");

  private static final org.apache.thrift.protocol.TField WEB_PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("webProjectName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BACKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("backend", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryWebConfigOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryWebConfigOptionTupleSchemeFactory());
  }

  public String webProjectName; // optional
  public String backend; // optional
  public String desc; // optional
  /**
   * 
   * @see DeployType
   */
  public DeployType type; // optional
  public int port; // optional
  public String domain; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WEB_PROJECT_NAME((short)1, "webProjectName"),
    BACKEND((short)2, "backend"),
    DESC((short)3, "desc"),
    /**
     * 
     * @see DeployType
     */
    TYPE((short)4, "type"),
    PORT((short)5, "port"),
    DOMAIN((short)6, "domain");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WEB_PROJECT_NAME
          return WEB_PROJECT_NAME;
        case 2: // BACKEND
          return BACKEND;
        case 3: // DESC
          return DESC;
        case 4: // TYPE
          return TYPE;
        case 5: // PORT
          return PORT;
        case 6: // DOMAIN
          return DOMAIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.WEB_PROJECT_NAME,_Fields.BACKEND,_Fields.DESC,_Fields.TYPE,_Fields.PORT,_Fields.DOMAIN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WEB_PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("webProjectName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACKEND, new org.apache.thrift.meta_data.FieldMetaData("backend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeployType.class)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryWebConfigOption.class, metaDataMap);
  }

  public QueryWebConfigOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryWebConfigOption(QueryWebConfigOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWebProjectName()) {
      this.webProjectName = other.webProjectName;
    }
    if (other.isSetBackend()) {
      this.backend = other.backend;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.port = other.port;
    if (other.isSetDomain()) {
      this.domain = other.domain;
    }
  }

  public QueryWebConfigOption deepCopy() {
    return new QueryWebConfigOption(this);
  }

  @Override
  public void clear() {
    this.webProjectName = null;
    this.backend = null;
    this.desc = null;
    this.type = null;
    setPortIsSet(false);
    this.port = 0;
    this.domain = null;
  }

  public String getWebProjectName() {
    return this.webProjectName;
  }

  public QueryWebConfigOption setWebProjectName(String webProjectName) {
    this.webProjectName = webProjectName;
    return this;
  }

  public void unsetWebProjectName() {
    this.webProjectName = null;
  }

  /** Returns true if field webProjectName is set (has been assigned a value) and false otherwise */
  public boolean isSetWebProjectName() {
    return this.webProjectName != null;
  }

  public void setWebProjectNameIsSet(boolean value) {
    if (!value) {
      this.webProjectName = null;
    }
  }

  public String getBackend() {
    return this.backend;
  }

  public QueryWebConfigOption setBackend(String backend) {
    this.backend = backend;
    return this;
  }

  public void unsetBackend() {
    this.backend = null;
  }

  /** Returns true if field backend is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend() {
    return this.backend != null;
  }

  public void setBackendIsSet(boolean value) {
    if (!value) {
      this.backend = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public QueryWebConfigOption setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  /**
   * 
   * @see DeployType
   */
  public DeployType getType() {
    return this.type;
  }

  /**
   * 
   * @see DeployType
   */
  public QueryWebConfigOption setType(DeployType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public QueryWebConfigOption setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public String getDomain() {
    return this.domain;
  }

  public QueryWebConfigOption setDomain(String domain) {
    this.domain = domain;
    return this;
  }

  public void unsetDomain() {
    this.domain = null;
  }

  /** Returns true if field domain is set (has been assigned a value) and false otherwise */
  public boolean isSetDomain() {
    return this.domain != null;
  }

  public void setDomainIsSet(boolean value) {
    if (!value) {
      this.domain = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WEB_PROJECT_NAME:
      if (value == null) {
        unsetWebProjectName();
      } else {
        setWebProjectName((String)value);
      }
      break;

    case BACKEND:
      if (value == null) {
        unsetBackend();
      } else {
        setBackend((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((DeployType)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case DOMAIN:
      if (value == null) {
        unsetDomain();
      } else {
        setDomain((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WEB_PROJECT_NAME:
      return getWebProjectName();

    case BACKEND:
      return getBackend();

    case DESC:
      return getDesc();

    case TYPE:
      return getType();

    case PORT:
      return Integer.valueOf(getPort());

    case DOMAIN:
      return getDomain();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WEB_PROJECT_NAME:
      return isSetWebProjectName();
    case BACKEND:
      return isSetBackend();
    case DESC:
      return isSetDesc();
    case TYPE:
      return isSetType();
    case PORT:
      return isSetPort();
    case DOMAIN:
      return isSetDomain();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryWebConfigOption)
      return this.equals((QueryWebConfigOption)that);
    return false;
  }

  public boolean equals(QueryWebConfigOption that) {
    if (that == null)
      return false;

    boolean this_present_webProjectName = true && this.isSetWebProjectName();
    boolean that_present_webProjectName = true && that.isSetWebProjectName();
    if (this_present_webProjectName || that_present_webProjectName) {
      if (!(this_present_webProjectName && that_present_webProjectName))
        return false;
      if (!this.webProjectName.equals(that.webProjectName))
        return false;
    }

    boolean this_present_backend = true && this.isSetBackend();
    boolean that_present_backend = true && that.isSetBackend();
    if (this_present_backend || that_present_backend) {
      if (!(this_present_backend && that_present_backend))
        return false;
      if (!this.backend.equals(that.backend))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_domain = true && this.isSetDomain();
    boolean that_present_domain = true && that.isSetDomain();
    if (this_present_domain || that_present_domain) {
      if (!(this_present_domain && that_present_domain))
        return false;
      if (!this.domain.equals(that.domain))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryWebConfigOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWebProjectName()).compareTo(other.isSetWebProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webProjectName, other.webProjectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackend()).compareTo(other.isSetBackend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend, other.backend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomain()).compareTo(other.isSetDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, other.domain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryWebConfigOption(");
    boolean first = true;

    if (isSetWebProjectName()) {
      sb.append("webProjectName:");
      if (this.webProjectName == null) {
        sb.append("null");
      } else {
        sb.append(this.webProjectName);
      }
      first = false;
    }
    if (isSetBackend()) {
      if (!first) sb.append(", ");
      sb.append("backend:");
      if (this.backend == null) {
        sb.append("null");
      } else {
        sb.append(this.backend);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    if (isSetDomain()) {
      if (!first) sb.append(", ");
      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryWebConfigOptionStandardSchemeFactory implements SchemeFactory {
    public QueryWebConfigOptionStandardScheme getScheme() {
      return new QueryWebConfigOptionStandardScheme();
    }
  }

  private static class QueryWebConfigOptionStandardScheme extends StandardScheme<QueryWebConfigOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryWebConfigOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WEB_PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.webProjectName = iprot.readString();
              struct.setWebProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BACKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backend = iprot.readString();
              struct.setBackendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = DeployType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domain = iprot.readString();
              struct.setDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryWebConfigOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.webProjectName != null) {
        if (struct.isSetWebProjectName()) {
          oprot.writeFieldBegin(WEB_PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.webProjectName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.backend != null) {
        if (struct.isSetBackend()) {
          oprot.writeFieldBegin(BACKEND_FIELD_DESC);
          oprot.writeString(struct.backend);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      if (struct.domain != null) {
        if (struct.isSetDomain()) {
          oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
          oprot.writeString(struct.domain);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryWebConfigOptionTupleSchemeFactory implements SchemeFactory {
    public QueryWebConfigOptionTupleScheme getScheme() {
      return new QueryWebConfigOptionTupleScheme();
    }
  }

  private static class QueryWebConfigOptionTupleScheme extends TupleScheme<QueryWebConfigOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryWebConfigOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWebProjectName()) {
        optionals.set(0);
      }
      if (struct.isSetBackend()) {
        optionals.set(1);
      }
      if (struct.isSetDesc()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetPort()) {
        optionals.set(4);
      }
      if (struct.isSetDomain()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetWebProjectName()) {
        oprot.writeString(struct.webProjectName);
      }
      if (struct.isSetBackend()) {
        oprot.writeString(struct.backend);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetDomain()) {
        oprot.writeString(struct.domain);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryWebConfigOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.webProjectName = iprot.readString();
        struct.setWebProjectNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backend = iprot.readString();
        struct.setBackendIsSet(true);
      }
      if (incoming.get(2)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = DeployType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(5)) {
        struct.domain = iprot.readString();
        struct.setDomainIsSet(true);
      }
    }
  }

}

