/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.web.config.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WebConfig implements org.apache.thrift.TBase<WebConfig, WebConfig._Fields>, java.io.Serializable, Cloneable, Comparable<WebConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebConfig");

  private static final org.apache.thrift.protocol.TField WEB_PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("webProjectName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEPLOY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deployType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("ipList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DOMAIN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("domainList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField INDEX_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("indexPath", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SERVER_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("serverOptions", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOCATION_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("locationOptions", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BACKEND_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("backendList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField HTTPS_CERT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("httpsCertName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DISABLE_HTTP_FIELD_DESC = new org.apache.thrift.protocol.TField("disableHttp", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WebConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WebConfigTupleSchemeFactory());
  }

  public String webProjectName; // optional
  /**
   * 
   * @see DeployType
   */
  public DeployType deployType; // optional
  public List<Long> ipList; // optional
  public int port; // optional
  public List<String> domainList; // optional
  public String indexPath; // optional
  public String desc; // optional
  public String serverOptions; // optional
  public String locationOptions; // optional
  public List<String> backendList; // optional
  public String httpsCertName; // optional
  public boolean disableHttp; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WEB_PROJECT_NAME((short)1, "webProjectName"),
    /**
     * 
     * @see DeployType
     */
    DEPLOY_TYPE((short)2, "deployType"),
    IP_LIST((short)3, "ipList"),
    PORT((short)4, "port"),
    DOMAIN_LIST((short)5, "domainList"),
    INDEX_PATH((short)6, "indexPath"),
    DESC((short)7, "desc"),
    SERVER_OPTIONS((short)8, "serverOptions"),
    LOCATION_OPTIONS((short)9, "locationOptions"),
    BACKEND_LIST((short)10, "backendList"),
    HTTPS_CERT_NAME((short)11, "httpsCertName"),
    DISABLE_HTTP((short)12, "disableHttp"),
    CREATE_TIMESTAMP((short)15, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)16, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WEB_PROJECT_NAME
          return WEB_PROJECT_NAME;
        case 2: // DEPLOY_TYPE
          return DEPLOY_TYPE;
        case 3: // IP_LIST
          return IP_LIST;
        case 4: // PORT
          return PORT;
        case 5: // DOMAIN_LIST
          return DOMAIN_LIST;
        case 6: // INDEX_PATH
          return INDEX_PATH;
        case 7: // DESC
          return DESC;
        case 8: // SERVER_OPTIONS
          return SERVER_OPTIONS;
        case 9: // LOCATION_OPTIONS
          return LOCATION_OPTIONS;
        case 10: // BACKEND_LIST
          return BACKEND_LIST;
        case 11: // HTTPS_CERT_NAME
          return HTTPS_CERT_NAME;
        case 12: // DISABLE_HTTP
          return DISABLE_HTTP;
        case 15: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 16: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __DISABLEHTTP_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.WEB_PROJECT_NAME,_Fields.DEPLOY_TYPE,_Fields.IP_LIST,_Fields.PORT,_Fields.DOMAIN_LIST,_Fields.INDEX_PATH,_Fields.DESC,_Fields.SERVER_OPTIONS,_Fields.LOCATION_OPTIONS,_Fields.BACKEND_LIST,_Fields.HTTPS_CERT_NAME,_Fields.DISABLE_HTTP,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WEB_PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("webProjectName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPLOY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deployType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeployType.class)));
    tmpMap.put(_Fields.IP_LIST, new org.apache.thrift.meta_data.FieldMetaData("ipList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOMAIN_LIST, new org.apache.thrift.meta_data.FieldMetaData("domainList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INDEX_PATH, new org.apache.thrift.meta_data.FieldMetaData("indexPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("serverOptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("locationOptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACKEND_LIST, new org.apache.thrift.meta_data.FieldMetaData("backendList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HTTPS_CERT_NAME, new org.apache.thrift.meta_data.FieldMetaData("httpsCertName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISABLE_HTTP, new org.apache.thrift.meta_data.FieldMetaData("disableHttp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WebConfig.class, metaDataMap);
  }

  public WebConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WebConfig(WebConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWebProjectName()) {
      this.webProjectName = other.webProjectName;
    }
    if (other.isSetDeployType()) {
      this.deployType = other.deployType;
    }
    if (other.isSetIpList()) {
      List<Long> __this__ipList = new ArrayList<Long>(other.ipList);
      this.ipList = __this__ipList;
    }
    this.port = other.port;
    if (other.isSetDomainList()) {
      List<String> __this__domainList = new ArrayList<String>(other.domainList);
      this.domainList = __this__domainList;
    }
    if (other.isSetIndexPath()) {
      this.indexPath = other.indexPath;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetServerOptions()) {
      this.serverOptions = other.serverOptions;
    }
    if (other.isSetLocationOptions()) {
      this.locationOptions = other.locationOptions;
    }
    if (other.isSetBackendList()) {
      List<String> __this__backendList = new ArrayList<String>(other.backendList);
      this.backendList = __this__backendList;
    }
    if (other.isSetHttpsCertName()) {
      this.httpsCertName = other.httpsCertName;
    }
    this.disableHttp = other.disableHttp;
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public WebConfig deepCopy() {
    return new WebConfig(this);
  }

  @Override
  public void clear() {
    this.webProjectName = null;
    this.deployType = null;
    this.ipList = null;
    setPortIsSet(false);
    this.port = 0;
    this.domainList = null;
    this.indexPath = null;
    this.desc = null;
    this.serverOptions = null;
    this.locationOptions = null;
    this.backendList = null;
    this.httpsCertName = null;
    setDisableHttpIsSet(false);
    this.disableHttp = false;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public String getWebProjectName() {
    return this.webProjectName;
  }

  public WebConfig setWebProjectName(String webProjectName) {
    this.webProjectName = webProjectName;
    return this;
  }

  public void unsetWebProjectName() {
    this.webProjectName = null;
  }

  /** Returns true if field webProjectName is set (has been assigned a value) and false otherwise */
  public boolean isSetWebProjectName() {
    return this.webProjectName != null;
  }

  public void setWebProjectNameIsSet(boolean value) {
    if (!value) {
      this.webProjectName = null;
    }
  }

  /**
   * 
   * @see DeployType
   */
  public DeployType getDeployType() {
    return this.deployType;
  }

  /**
   * 
   * @see DeployType
   */
  public WebConfig setDeployType(DeployType deployType) {
    this.deployType = deployType;
    return this;
  }

  public void unsetDeployType() {
    this.deployType = null;
  }

  /** Returns true if field deployType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeployType() {
    return this.deployType != null;
  }

  public void setDeployTypeIsSet(boolean value) {
    if (!value) {
      this.deployType = null;
    }
  }

  public int getIpListSize() {
    return (this.ipList == null) ? 0 : this.ipList.size();
  }

  public java.util.Iterator<Long> getIpListIterator() {
    return (this.ipList == null) ? null : this.ipList.iterator();
  }

  public void addToIpList(long elem) {
    if (this.ipList == null) {
      this.ipList = new ArrayList<Long>();
    }
    this.ipList.add(elem);
  }

  public List<Long> getIpList() {
    return this.ipList;
  }

  public WebConfig setIpList(List<Long> ipList) {
    this.ipList = ipList;
    return this;
  }

  public void unsetIpList() {
    this.ipList = null;
  }

  /** Returns true if field ipList is set (has been assigned a value) and false otherwise */
  public boolean isSetIpList() {
    return this.ipList != null;
  }

  public void setIpListIsSet(boolean value) {
    if (!value) {
      this.ipList = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public WebConfig setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public int getDomainListSize() {
    return (this.domainList == null) ? 0 : this.domainList.size();
  }

  public java.util.Iterator<String> getDomainListIterator() {
    return (this.domainList == null) ? null : this.domainList.iterator();
  }

  public void addToDomainList(String elem) {
    if (this.domainList == null) {
      this.domainList = new ArrayList<String>();
    }
    this.domainList.add(elem);
  }

  public List<String> getDomainList() {
    return this.domainList;
  }

  public WebConfig setDomainList(List<String> domainList) {
    this.domainList = domainList;
    return this;
  }

  public void unsetDomainList() {
    this.domainList = null;
  }

  /** Returns true if field domainList is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainList() {
    return this.domainList != null;
  }

  public void setDomainListIsSet(boolean value) {
    if (!value) {
      this.domainList = null;
    }
  }

  public String getIndexPath() {
    return this.indexPath;
  }

  public WebConfig setIndexPath(String indexPath) {
    this.indexPath = indexPath;
    return this;
  }

  public void unsetIndexPath() {
    this.indexPath = null;
  }

  /** Returns true if field indexPath is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexPath() {
    return this.indexPath != null;
  }

  public void setIndexPathIsSet(boolean value) {
    if (!value) {
      this.indexPath = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public WebConfig setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getServerOptions() {
    return this.serverOptions;
  }

  public WebConfig setServerOptions(String serverOptions) {
    this.serverOptions = serverOptions;
    return this;
  }

  public void unsetServerOptions() {
    this.serverOptions = null;
  }

  /** Returns true if field serverOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetServerOptions() {
    return this.serverOptions != null;
  }

  public void setServerOptionsIsSet(boolean value) {
    if (!value) {
      this.serverOptions = null;
    }
  }

  public String getLocationOptions() {
    return this.locationOptions;
  }

  public WebConfig setLocationOptions(String locationOptions) {
    this.locationOptions = locationOptions;
    return this;
  }

  public void unsetLocationOptions() {
    this.locationOptions = null;
  }

  /** Returns true if field locationOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationOptions() {
    return this.locationOptions != null;
  }

  public void setLocationOptionsIsSet(boolean value) {
    if (!value) {
      this.locationOptions = null;
    }
  }

  public int getBackendListSize() {
    return (this.backendList == null) ? 0 : this.backendList.size();
  }

  public java.util.Iterator<String> getBackendListIterator() {
    return (this.backendList == null) ? null : this.backendList.iterator();
  }

  public void addToBackendList(String elem) {
    if (this.backendList == null) {
      this.backendList = new ArrayList<String>();
    }
    this.backendList.add(elem);
  }

  public List<String> getBackendList() {
    return this.backendList;
  }

  public WebConfig setBackendList(List<String> backendList) {
    this.backendList = backendList;
    return this;
  }

  public void unsetBackendList() {
    this.backendList = null;
  }

  /** Returns true if field backendList is set (has been assigned a value) and false otherwise */
  public boolean isSetBackendList() {
    return this.backendList != null;
  }

  public void setBackendListIsSet(boolean value) {
    if (!value) {
      this.backendList = null;
    }
  }

  public String getHttpsCertName() {
    return this.httpsCertName;
  }

  public WebConfig setHttpsCertName(String httpsCertName) {
    this.httpsCertName = httpsCertName;
    return this;
  }

  public void unsetHttpsCertName() {
    this.httpsCertName = null;
  }

  /** Returns true if field httpsCertName is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpsCertName() {
    return this.httpsCertName != null;
  }

  public void setHttpsCertNameIsSet(boolean value) {
    if (!value) {
      this.httpsCertName = null;
    }
  }

  public boolean isDisableHttp() {
    return this.disableHttp;
  }

  public WebConfig setDisableHttp(boolean disableHttp) {
    this.disableHttp = disableHttp;
    setDisableHttpIsSet(true);
    return this;
  }

  public void unsetDisableHttp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLEHTTP_ISSET_ID);
  }

  /** Returns true if field disableHttp is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableHttp() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLEHTTP_ISSET_ID);
  }

  public void setDisableHttpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLEHTTP_ISSET_ID, value);
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public WebConfig setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public WebConfig setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WEB_PROJECT_NAME:
      if (value == null) {
        unsetWebProjectName();
      } else {
        setWebProjectName((String)value);
      }
      break;

    case DEPLOY_TYPE:
      if (value == null) {
        unsetDeployType();
      } else {
        setDeployType((DeployType)value);
      }
      break;

    case IP_LIST:
      if (value == null) {
        unsetIpList();
      } else {
        setIpList((List<Long>)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case DOMAIN_LIST:
      if (value == null) {
        unsetDomainList();
      } else {
        setDomainList((List<String>)value);
      }
      break;

    case INDEX_PATH:
      if (value == null) {
        unsetIndexPath();
      } else {
        setIndexPath((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case SERVER_OPTIONS:
      if (value == null) {
        unsetServerOptions();
      } else {
        setServerOptions((String)value);
      }
      break;

    case LOCATION_OPTIONS:
      if (value == null) {
        unsetLocationOptions();
      } else {
        setLocationOptions((String)value);
      }
      break;

    case BACKEND_LIST:
      if (value == null) {
        unsetBackendList();
      } else {
        setBackendList((List<String>)value);
      }
      break;

    case HTTPS_CERT_NAME:
      if (value == null) {
        unsetHttpsCertName();
      } else {
        setHttpsCertName((String)value);
      }
      break;

    case DISABLE_HTTP:
      if (value == null) {
        unsetDisableHttp();
      } else {
        setDisableHttp((Boolean)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WEB_PROJECT_NAME:
      return getWebProjectName();

    case DEPLOY_TYPE:
      return getDeployType();

    case IP_LIST:
      return getIpList();

    case PORT:
      return Integer.valueOf(getPort());

    case DOMAIN_LIST:
      return getDomainList();

    case INDEX_PATH:
      return getIndexPath();

    case DESC:
      return getDesc();

    case SERVER_OPTIONS:
      return getServerOptions();

    case LOCATION_OPTIONS:
      return getLocationOptions();

    case BACKEND_LIST:
      return getBackendList();

    case HTTPS_CERT_NAME:
      return getHttpsCertName();

    case DISABLE_HTTP:
      return Boolean.valueOf(isDisableHttp());

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WEB_PROJECT_NAME:
      return isSetWebProjectName();
    case DEPLOY_TYPE:
      return isSetDeployType();
    case IP_LIST:
      return isSetIpList();
    case PORT:
      return isSetPort();
    case DOMAIN_LIST:
      return isSetDomainList();
    case INDEX_PATH:
      return isSetIndexPath();
    case DESC:
      return isSetDesc();
    case SERVER_OPTIONS:
      return isSetServerOptions();
    case LOCATION_OPTIONS:
      return isSetLocationOptions();
    case BACKEND_LIST:
      return isSetBackendList();
    case HTTPS_CERT_NAME:
      return isSetHttpsCertName();
    case DISABLE_HTTP:
      return isSetDisableHttp();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WebConfig)
      return this.equals((WebConfig)that);
    return false;
  }

  public boolean equals(WebConfig that) {
    if (that == null)
      return false;

    boolean this_present_webProjectName = true && this.isSetWebProjectName();
    boolean that_present_webProjectName = true && that.isSetWebProjectName();
    if (this_present_webProjectName || that_present_webProjectName) {
      if (!(this_present_webProjectName && that_present_webProjectName))
        return false;
      if (!this.webProjectName.equals(that.webProjectName))
        return false;
    }

    boolean this_present_deployType = true && this.isSetDeployType();
    boolean that_present_deployType = true && that.isSetDeployType();
    if (this_present_deployType || that_present_deployType) {
      if (!(this_present_deployType && that_present_deployType))
        return false;
      if (!this.deployType.equals(that.deployType))
        return false;
    }

    boolean this_present_ipList = true && this.isSetIpList();
    boolean that_present_ipList = true && that.isSetIpList();
    if (this_present_ipList || that_present_ipList) {
      if (!(this_present_ipList && that_present_ipList))
        return false;
      if (!this.ipList.equals(that.ipList))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_domainList = true && this.isSetDomainList();
    boolean that_present_domainList = true && that.isSetDomainList();
    if (this_present_domainList || that_present_domainList) {
      if (!(this_present_domainList && that_present_domainList))
        return false;
      if (!this.domainList.equals(that.domainList))
        return false;
    }

    boolean this_present_indexPath = true && this.isSetIndexPath();
    boolean that_present_indexPath = true && that.isSetIndexPath();
    if (this_present_indexPath || that_present_indexPath) {
      if (!(this_present_indexPath && that_present_indexPath))
        return false;
      if (!this.indexPath.equals(that.indexPath))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_serverOptions = true && this.isSetServerOptions();
    boolean that_present_serverOptions = true && that.isSetServerOptions();
    if (this_present_serverOptions || that_present_serverOptions) {
      if (!(this_present_serverOptions && that_present_serverOptions))
        return false;
      if (!this.serverOptions.equals(that.serverOptions))
        return false;
    }

    boolean this_present_locationOptions = true && this.isSetLocationOptions();
    boolean that_present_locationOptions = true && that.isSetLocationOptions();
    if (this_present_locationOptions || that_present_locationOptions) {
      if (!(this_present_locationOptions && that_present_locationOptions))
        return false;
      if (!this.locationOptions.equals(that.locationOptions))
        return false;
    }

    boolean this_present_backendList = true && this.isSetBackendList();
    boolean that_present_backendList = true && that.isSetBackendList();
    if (this_present_backendList || that_present_backendList) {
      if (!(this_present_backendList && that_present_backendList))
        return false;
      if (!this.backendList.equals(that.backendList))
        return false;
    }

    boolean this_present_httpsCertName = true && this.isSetHttpsCertName();
    boolean that_present_httpsCertName = true && that.isSetHttpsCertName();
    if (this_present_httpsCertName || that_present_httpsCertName) {
      if (!(this_present_httpsCertName && that_present_httpsCertName))
        return false;
      if (!this.httpsCertName.equals(that.httpsCertName))
        return false;
    }

    boolean this_present_disableHttp = true && this.isSetDisableHttp();
    boolean that_present_disableHttp = true && that.isSetDisableHttp();
    if (this_present_disableHttp || that_present_disableHttp) {
      if (!(this_present_disableHttp && that_present_disableHttp))
        return false;
      if (this.disableHttp != that.disableHttp)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WebConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWebProjectName()).compareTo(other.isSetWebProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webProjectName, other.webProjectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeployType()).compareTo(other.isSetDeployType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeployType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deployType, other.deployType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpList()).compareTo(other.isSetIpList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipList, other.ipList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomainList()).compareTo(other.isSetDomainList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainList, other.domainList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexPath()).compareTo(other.isSetIndexPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexPath, other.indexPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerOptions()).compareTo(other.isSetServerOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverOptions, other.serverOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationOptions()).compareTo(other.isSetLocationOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationOptions, other.locationOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackendList()).compareTo(other.isSetBackendList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackendList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backendList, other.backendList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttpsCertName()).compareTo(other.isSetHttpsCertName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpsCertName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpsCertName, other.httpsCertName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisableHttp()).compareTo(other.isSetDisableHttp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableHttp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disableHttp, other.disableHttp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WebConfig(");
    boolean first = true;

    if (isSetWebProjectName()) {
      sb.append("webProjectName:");
      if (this.webProjectName == null) {
        sb.append("null");
      } else {
        sb.append(this.webProjectName);
      }
      first = false;
    }
    if (isSetDeployType()) {
      if (!first) sb.append(", ");
      sb.append("deployType:");
      if (this.deployType == null) {
        sb.append("null");
      } else {
        sb.append(this.deployType);
      }
      first = false;
    }
    if (isSetIpList()) {
      if (!first) sb.append(", ");
      sb.append("ipList:");
      if (this.ipList == null) {
        sb.append("null");
      } else {
        sb.append(this.ipList);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
    }
    if (isSetDomainList()) {
      if (!first) sb.append(", ");
      sb.append("domainList:");
      if (this.domainList == null) {
        sb.append("null");
      } else {
        sb.append(this.domainList);
      }
      first = false;
    }
    if (isSetIndexPath()) {
      if (!first) sb.append(", ");
      sb.append("indexPath:");
      if (this.indexPath == null) {
        sb.append("null");
      } else {
        sb.append(this.indexPath);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetServerOptions()) {
      if (!first) sb.append(", ");
      sb.append("serverOptions:");
      if (this.serverOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.serverOptions);
      }
      first = false;
    }
    if (isSetLocationOptions()) {
      if (!first) sb.append(", ");
      sb.append("locationOptions:");
      if (this.locationOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.locationOptions);
      }
      first = false;
    }
    if (isSetBackendList()) {
      if (!first) sb.append(", ");
      sb.append("backendList:");
      if (this.backendList == null) {
        sb.append("null");
      } else {
        sb.append(this.backendList);
      }
      first = false;
    }
    if (isSetHttpsCertName()) {
      if (!first) sb.append(", ");
      sb.append("httpsCertName:");
      if (this.httpsCertName == null) {
        sb.append("null");
      } else {
        sb.append(this.httpsCertName);
      }
      first = false;
    }
    if (isSetDisableHttp()) {
      if (!first) sb.append(", ");
      sb.append("disableHttp:");
      sb.append(this.disableHttp);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WebConfigStandardSchemeFactory implements SchemeFactory {
    public WebConfigStandardScheme getScheme() {
      return new WebConfigStandardScheme();
    }
  }

  private static class WebConfigStandardScheme extends StandardScheme<WebConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WebConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WEB_PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.webProjectName = iprot.readString();
              struct.setWebProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPLOY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deployType = DeployType.findByValue(iprot.readI32());
              struct.setDeployTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IP_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.ipList = new ArrayList<Long>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  long _elem26;
                  _elem26 = iprot.readI64();
                  struct.ipList.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setIpListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOMAIN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.domainList = new ArrayList<String>(_list27.size);
                for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                {
                  String _elem29;
                  _elem29 = iprot.readString();
                  struct.domainList.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setDomainListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INDEX_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.indexPath = iprot.readString();
              struct.setIndexPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SERVER_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverOptions = iprot.readString();
              struct.setServerOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOCATION_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationOptions = iprot.readString();
              struct.setLocationOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BACKEND_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.backendList = new ArrayList<String>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  String _elem32;
                  _elem32 = iprot.readString();
                  struct.backendList.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setBackendListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HTTPS_CERT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.httpsCertName = iprot.readString();
              struct.setHttpsCertNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DISABLE_HTTP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disableHttp = iprot.readBool();
              struct.setDisableHttpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WebConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.webProjectName != null) {
        if (struct.isSetWebProjectName()) {
          oprot.writeFieldBegin(WEB_PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.webProjectName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deployType != null) {
        if (struct.isSetDeployType()) {
          oprot.writeFieldBegin(DEPLOY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.deployType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.ipList != null) {
        if (struct.isSetIpList()) {
          oprot.writeFieldBegin(IP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ipList.size()));
            for (long _iter33 : struct.ipList)
            {
              oprot.writeI64(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPort()) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
      }
      if (struct.domainList != null) {
        if (struct.isSetDomainList()) {
          oprot.writeFieldBegin(DOMAIN_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.domainList.size()));
            for (String _iter34 : struct.domainList)
            {
              oprot.writeString(_iter34);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.indexPath != null) {
        if (struct.isSetIndexPath()) {
          oprot.writeFieldBegin(INDEX_PATH_FIELD_DESC);
          oprot.writeString(struct.indexPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.serverOptions != null) {
        if (struct.isSetServerOptions()) {
          oprot.writeFieldBegin(SERVER_OPTIONS_FIELD_DESC);
          oprot.writeString(struct.serverOptions);
          oprot.writeFieldEnd();
        }
      }
      if (struct.locationOptions != null) {
        if (struct.isSetLocationOptions()) {
          oprot.writeFieldBegin(LOCATION_OPTIONS_FIELD_DESC);
          oprot.writeString(struct.locationOptions);
          oprot.writeFieldEnd();
        }
      }
      if (struct.backendList != null) {
        if (struct.isSetBackendList()) {
          oprot.writeFieldBegin(BACKEND_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.backendList.size()));
            for (String _iter35 : struct.backendList)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.httpsCertName != null) {
        if (struct.isSetHttpsCertName()) {
          oprot.writeFieldBegin(HTTPS_CERT_NAME_FIELD_DESC);
          oprot.writeString(struct.httpsCertName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisableHttp()) {
        oprot.writeFieldBegin(DISABLE_HTTP_FIELD_DESC);
        oprot.writeBool(struct.disableHttp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WebConfigTupleSchemeFactory implements SchemeFactory {
    public WebConfigTupleScheme getScheme() {
      return new WebConfigTupleScheme();
    }
  }

  private static class WebConfigTupleScheme extends TupleScheme<WebConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WebConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWebProjectName()) {
        optionals.set(0);
      }
      if (struct.isSetDeployType()) {
        optionals.set(1);
      }
      if (struct.isSetIpList()) {
        optionals.set(2);
      }
      if (struct.isSetPort()) {
        optionals.set(3);
      }
      if (struct.isSetDomainList()) {
        optionals.set(4);
      }
      if (struct.isSetIndexPath()) {
        optionals.set(5);
      }
      if (struct.isSetDesc()) {
        optionals.set(6);
      }
      if (struct.isSetServerOptions()) {
        optionals.set(7);
      }
      if (struct.isSetLocationOptions()) {
        optionals.set(8);
      }
      if (struct.isSetBackendList()) {
        optionals.set(9);
      }
      if (struct.isSetHttpsCertName()) {
        optionals.set(10);
      }
      if (struct.isSetDisableHttp()) {
        optionals.set(11);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(12);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetWebProjectName()) {
        oprot.writeString(struct.webProjectName);
      }
      if (struct.isSetDeployType()) {
        oprot.writeI32(struct.deployType.getValue());
      }
      if (struct.isSetIpList()) {
        {
          oprot.writeI32(struct.ipList.size());
          for (long _iter36 : struct.ipList)
          {
            oprot.writeI64(_iter36);
          }
        }
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetDomainList()) {
        {
          oprot.writeI32(struct.domainList.size());
          for (String _iter37 : struct.domainList)
          {
            oprot.writeString(_iter37);
          }
        }
      }
      if (struct.isSetIndexPath()) {
        oprot.writeString(struct.indexPath);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetServerOptions()) {
        oprot.writeString(struct.serverOptions);
      }
      if (struct.isSetLocationOptions()) {
        oprot.writeString(struct.locationOptions);
      }
      if (struct.isSetBackendList()) {
        {
          oprot.writeI32(struct.backendList.size());
          for (String _iter38 : struct.backendList)
          {
            oprot.writeString(_iter38);
          }
        }
      }
      if (struct.isSetHttpsCertName()) {
        oprot.writeString(struct.httpsCertName);
      }
      if (struct.isSetDisableHttp()) {
        oprot.writeBool(struct.disableHttp);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WebConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.webProjectName = iprot.readString();
        struct.setWebProjectNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deployType = DeployType.findByValue(iprot.readI32());
        struct.setDeployTypeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.ipList = new ArrayList<Long>(_list39.size);
          for (int _i40 = 0; _i40 < _list39.size; ++_i40)
          {
            long _elem41;
            _elem41 = iprot.readI64();
            struct.ipList.add(_elem41);
          }
        }
        struct.setIpListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.domainList = new ArrayList<String>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            String _elem44;
            _elem44 = iprot.readString();
            struct.domainList.add(_elem44);
          }
        }
        struct.setDomainListIsSet(true);
      }
      if (incoming.get(5)) {
        struct.indexPath = iprot.readString();
        struct.setIndexPathIsSet(true);
      }
      if (incoming.get(6)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(7)) {
        struct.serverOptions = iprot.readString();
        struct.setServerOptionsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.locationOptions = iprot.readString();
        struct.setLocationOptionsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.backendList = new ArrayList<String>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            String _elem47;
            _elem47 = iprot.readString();
            struct.backendList.add(_elem47);
          }
        }
        struct.setBackendListIsSet(true);
      }
      if (incoming.get(10)) {
        struct.httpsCertName = iprot.readString();
        struct.setHttpsCertNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.disableHttp = iprot.readBool();
        struct.setDisableHttpIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(13)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

