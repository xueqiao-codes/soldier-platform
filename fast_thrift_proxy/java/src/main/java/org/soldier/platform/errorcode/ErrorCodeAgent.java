/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.errorcode;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ErrorCodeAgent {

  public interface Iface {

    public List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> getErrorCodeItem(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String domain, int errorCode) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getErrorCodeItem(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String domain, int errorCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> getErrorCodeItem(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String domain, int errorCode) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_getErrorCodeItem(platformArgs, domain, errorCode);
      return recv_getErrorCodeItem();
    }

    public void send_getErrorCodeItem(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String domain, int errorCode) throws org.apache.thrift.TException
    {
      getErrorCodeItem_args args = new getErrorCodeItem_args();
      args.setPlatformArgs(platformArgs);
      args.setDomain(domain);
      args.setErrorCode(errorCode);
      sendBase("getErrorCodeItem", args);
    }

    public List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> recv_getErrorCodeItem() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      getErrorCodeItem_result result = new getErrorCodeItem_result();
      receiveBase(result, "getErrorCodeItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getErrorCodeItem failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getErrorCodeItem(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String domain, int errorCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getErrorCodeItem_call method_call = new getErrorCodeItem_call(platformArgs, domain, errorCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getErrorCodeItem_call extends org.apache.thrift.async.TAsyncMethodCall <getErrorCodeItem_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private String domain;
      private int errorCode;
      public getErrorCodeItem_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String domain, int errorCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.domain = domain;
        this.errorCode = errorCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getErrorCodeItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getErrorCodeItem_args args = new getErrorCodeItem_args();
        args.setPlatformArgs(platformArgs);
        args.setDomain(domain);
        args.setErrorCode(errorCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getErrorCodeItem();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getErrorCodeItem", new getErrorCodeItem());
      return processMap;
    }

    public static class getErrorCodeItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getErrorCodeItem_args> {
      public getErrorCodeItem() {
        super("getErrorCodeItem");
      }

      public getErrorCodeItem_args getEmptyArgsInstance() {
        return new getErrorCodeItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getErrorCodeItem_result getResult(I iface, getErrorCodeItem_args args) throws org.apache.thrift.TException {
        getErrorCodeItem_result result = new getErrorCodeItem_result();
        try {
          result.success = iface.getErrorCodeItem(args.platformArgs, args.domain, args.errorCode);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getErrorCodeItem", new getErrorCodeItem());
      return processMap;
    }

    public static class getErrorCodeItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getErrorCodeItem_args, List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem>> {
      public getErrorCodeItem() {
        super("getErrorCodeItem");
      }

      public getErrorCodeItem_args getEmptyArgsInstance() {
        return new getErrorCodeItem_args();
      }

      public AsyncMethodCallback<List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem>>() { 
          public void onComplete(List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> o) {
            getErrorCodeItem_result result = new getErrorCodeItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getErrorCodeItem_result result = new getErrorCodeItem_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getErrorCodeItem_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem>> resultHandler) throws TException {
        iface.getErrorCodeItem(args.platformArgs, args.domain, args.errorCode,resultHandler);
      }
    }

  }

  public static class getErrorCodeItem_args implements org.apache.thrift.TBase<getErrorCodeItem_args, getErrorCodeItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<getErrorCodeItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getErrorCodeItem_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getErrorCodeItem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getErrorCodeItem_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public String domain; // required
    public int errorCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      DOMAIN((short)2, "domain"),
      ERROR_CODE((short)3, "errorCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // DOMAIN
            return DOMAIN;
          case 3: // ERROR_CODE
            return ERROR_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ERRORCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getErrorCodeItem_args.class, metaDataMap);
    }

    public getErrorCodeItem_args() {
    }

    public getErrorCodeItem_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      String domain,
      int errorCode)
    {
      this();
      this.platformArgs = platformArgs;
      this.domain = domain;
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getErrorCodeItem_args(getErrorCodeItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetDomain()) {
        this.domain = other.domain;
      }
      this.errorCode = other.errorCode;
    }

    public getErrorCodeItem_args deepCopy() {
      return new getErrorCodeItem_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.domain = null;
      setErrorCodeIsSet(false);
      this.errorCode = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public getErrorCodeItem_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public String getDomain() {
      return this.domain;
    }

    public getErrorCodeItem_args setDomain(String domain) {
      this.domain = domain;
      return this;
    }

    public void unsetDomain() {
      this.domain = null;
    }

    /** Returns true if field domain is set (has been assigned a value) and false otherwise */
    public boolean isSetDomain() {
      return this.domain != null;
    }

    public void setDomainIsSet(boolean value) {
      if (!value) {
        this.domain = null;
      }
    }

    public int getErrorCode() {
      return this.errorCode;
    }

    public getErrorCodeItem_args setErrorCode(int errorCode) {
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
      return this;
    }

    public void unsetErrorCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    public void setErrorCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case DOMAIN:
        if (value == null) {
          unsetDomain();
        } else {
          setDomain((String)value);
        }
        break;

      case ERROR_CODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          setErrorCode((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case DOMAIN:
        return getDomain();

      case ERROR_CODE:
        return Integer.valueOf(getErrorCode());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case DOMAIN:
        return isSetDomain();
      case ERROR_CODE:
        return isSetErrorCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getErrorCodeItem_args)
        return this.equals((getErrorCodeItem_args)that);
      return false;
    }

    public boolean equals(getErrorCodeItem_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_domain = true && this.isSetDomain();
      boolean that_present_domain = true && that.isSetDomain();
      if (this_present_domain || that_present_domain) {
        if (!(this_present_domain && that_present_domain))
          return false;
        if (!this.domain.equals(that.domain))
          return false;
      }

      boolean this_present_errorCode = true;
      boolean that_present_errorCode = true;
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (this.errorCode != that.errorCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getErrorCodeItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDomain()).compareTo(other.isSetDomain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, other.domain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getErrorCodeItem_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("domain:");
      if (this.domain == null) {
        sb.append("null");
      } else {
        sb.append(this.domain);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      sb.append(this.errorCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getErrorCodeItem_argsStandardSchemeFactory implements SchemeFactory {
      public getErrorCodeItem_argsStandardScheme getScheme() {
        return new getErrorCodeItem_argsStandardScheme();
      }
    }

    private static class getErrorCodeItem_argsStandardScheme extends StandardScheme<getErrorCodeItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getErrorCodeItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOMAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domain = iprot.readString();
                struct.setDomainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERROR_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorCode = iprot.readI32();
                struct.setErrorCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getErrorCodeItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.domain != null) {
          oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
          oprot.writeString(struct.domain);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.errorCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getErrorCodeItem_argsTupleSchemeFactory implements SchemeFactory {
      public getErrorCodeItem_argsTupleScheme getScheme() {
        return new getErrorCodeItem_argsTupleScheme();
      }
    }

    private static class getErrorCodeItem_argsTupleScheme extends TupleScheme<getErrorCodeItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getErrorCodeItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetDomain()) {
          optionals.set(1);
        }
        if (struct.isSetErrorCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetDomain()) {
          oprot.writeString(struct.domain);
        }
        if (struct.isSetErrorCode()) {
          oprot.writeI32(struct.errorCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getErrorCodeItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.domain = iprot.readString();
          struct.setDomainIsSet(true);
        }
        if (incoming.get(2)) {
          struct.errorCode = iprot.readI32();
          struct.setErrorCodeIsSet(true);
        }
      }
    }

  }

  public static class getErrorCodeItem_result implements org.apache.thrift.TBase<getErrorCodeItem_result, getErrorCodeItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<getErrorCodeItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getErrorCodeItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getErrorCodeItem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getErrorCodeItem_resultTupleSchemeFactory());
    }

    public List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getErrorCodeItem_result.class, metaDataMap);
    }

    public getErrorCodeItem_result() {
    }

    public getErrorCodeItem_result(
      List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getErrorCodeItem_result(getErrorCodeItem_result other) {
      if (other.isSetSuccess()) {
        List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> __this__success = new ArrayList<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem>(other.success.size());
        for (org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem other_element : other.success) {
          __this__success.add(new org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public getErrorCodeItem_result deepCopy() {
      return new getErrorCodeItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem>();
      }
      this.success.add(elem);
    }

    public List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> getSuccess() {
      return this.success;
    }

    public getErrorCodeItem_result setSuccess(List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public getErrorCodeItem_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getErrorCodeItem_result)
        return this.equals((getErrorCodeItem_result)that);
      return false;
    }

    public boolean equals(getErrorCodeItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getErrorCodeItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getErrorCodeItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getErrorCodeItem_resultStandardSchemeFactory implements SchemeFactory {
      public getErrorCodeItem_resultStandardScheme getScheme() {
        return new getErrorCodeItem_resultStandardScheme();
      }
    }

    private static class getErrorCodeItem_resultStandardScheme extends StandardScheme<getErrorCodeItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getErrorCodeItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem _elem10;
                    _elem10 = new org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getErrorCodeItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getErrorCodeItem_resultTupleSchemeFactory implements SchemeFactory {
      public getErrorCodeItem_resultTupleScheme getScheme() {
        return new getErrorCodeItem_resultTupleScheme();
      }
    }

    private static class getErrorCodeItem_resultTupleScheme extends TupleScheme<getErrorCodeItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getErrorCodeItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getErrorCodeItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem _elem15;
              _elem15 = new org.soldier.platform.errorcode.manager.thriftapi.ErrorCodeItem();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
