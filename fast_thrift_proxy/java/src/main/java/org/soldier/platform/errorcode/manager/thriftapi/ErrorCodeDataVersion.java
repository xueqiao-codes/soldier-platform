/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.errorcode.manager.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 版本信息
 */
public class ErrorCodeDataVersion implements org.apache.thrift.TBase<ErrorCodeDataVersion, ErrorCodeDataVersion._Fields>, java.io.Serializable, Cloneable, Comparable<ErrorCodeDataVersion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ErrorCodeDataVersion");

  private static final org.apache.thrift.protocol.TField VERSION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionCode", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("fileMD5", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ErrorCodeDataVersionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ErrorCodeDataVersionTupleSchemeFactory());
  }

  public long versionCode; // optional
  public String filePath; // optional
  public String fileMD5; // optional
  public long createTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION_CODE((short)1, "versionCode"),
    FILE_PATH((short)2, "filePath"),
    FILE_MD5((short)3, "fileMD5"),
    CREATE_TIMESTAMP((short)4, "createTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION_CODE
          return VERSION_CODE;
        case 2: // FILE_PATH
          return FILE_PATH;
        case 3: // FILE_MD5
          return FILE_MD5;
        case 4: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSIONCODE_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.VERSION_CODE,_Fields.FILE_PATH,_Fields.FILE_MD5,_Fields.CREATE_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION_CODE, new org.apache.thrift.meta_data.FieldMetaData("versionCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_MD5, new org.apache.thrift.meta_data.FieldMetaData("fileMD5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ErrorCodeDataVersion.class, metaDataMap);
  }

  public ErrorCodeDataVersion() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ErrorCodeDataVersion(ErrorCodeDataVersion other) {
    __isset_bitfield = other.__isset_bitfield;
    this.versionCode = other.versionCode;
    if (other.isSetFilePath()) {
      this.filePath = other.filePath;
    }
    if (other.isSetFileMD5()) {
      this.fileMD5 = other.fileMD5;
    }
    this.createTimestamp = other.createTimestamp;
  }

  public ErrorCodeDataVersion deepCopy() {
    return new ErrorCodeDataVersion(this);
  }

  @Override
  public void clear() {
    setVersionCodeIsSet(false);
    this.versionCode = 0;
    this.filePath = null;
    this.fileMD5 = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
  }

  public long getVersionCode() {
    return this.versionCode;
  }

  public ErrorCodeDataVersion setVersionCode(long versionCode) {
    this.versionCode = versionCode;
    setVersionCodeIsSet(true);
    return this;
  }

  public void unsetVersionCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSIONCODE_ISSET_ID);
  }

  /** Returns true if field versionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionCode() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSIONCODE_ISSET_ID);
  }

  public void setVersionCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSIONCODE_ISSET_ID, value);
  }

  public String getFilePath() {
    return this.filePath;
  }

  public ErrorCodeDataVersion setFilePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  public void unsetFilePath() {
    this.filePath = null;
  }

  /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.filePath != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.filePath = null;
    }
  }

  public String getFileMD5() {
    return this.fileMD5;
  }

  public ErrorCodeDataVersion setFileMD5(String fileMD5) {
    this.fileMD5 = fileMD5;
    return this;
  }

  public void unsetFileMD5() {
    this.fileMD5 = null;
  }

  /** Returns true if field fileMD5 is set (has been assigned a value) and false otherwise */
  public boolean isSetFileMD5() {
    return this.fileMD5 != null;
  }

  public void setFileMD5IsSet(boolean value) {
    if (!value) {
      this.fileMD5 = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public ErrorCodeDataVersion setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION_CODE:
      if (value == null) {
        unsetVersionCode();
      } else {
        setVersionCode((Long)value);
      }
      break;

    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((String)value);
      }
      break;

    case FILE_MD5:
      if (value == null) {
        unsetFileMD5();
      } else {
        setFileMD5((String)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION_CODE:
      return Long.valueOf(getVersionCode());

    case FILE_PATH:
      return getFilePath();

    case FILE_MD5:
      return getFileMD5();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION_CODE:
      return isSetVersionCode();
    case FILE_PATH:
      return isSetFilePath();
    case FILE_MD5:
      return isSetFileMD5();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ErrorCodeDataVersion)
      return this.equals((ErrorCodeDataVersion)that);
    return false;
  }

  public boolean equals(ErrorCodeDataVersion that) {
    if (that == null)
      return false;

    boolean this_present_versionCode = true && this.isSetVersionCode();
    boolean that_present_versionCode = true && that.isSetVersionCode();
    if (this_present_versionCode || that_present_versionCode) {
      if (!(this_present_versionCode && that_present_versionCode))
        return false;
      if (this.versionCode != that.versionCode)
        return false;
    }

    boolean this_present_filePath = true && this.isSetFilePath();
    boolean that_present_filePath = true && that.isSetFilePath();
    if (this_present_filePath || that_present_filePath) {
      if (!(this_present_filePath && that_present_filePath))
        return false;
      if (!this.filePath.equals(that.filePath))
        return false;
    }

    boolean this_present_fileMD5 = true && this.isSetFileMD5();
    boolean that_present_fileMD5 = true && that.isSetFileMD5();
    if (this_present_fileMD5 || that_present_fileMD5) {
      if (!(this_present_fileMD5 && that_present_fileMD5))
        return false;
      if (!this.fileMD5.equals(that.fileMD5))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ErrorCodeDataVersion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersionCode()).compareTo(other.isSetVersionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionCode, other.versionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileMD5()).compareTo(other.isSetFileMD5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileMD5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileMD5, other.fileMD5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ErrorCodeDataVersion(");
    boolean first = true;

    if (isSetVersionCode()) {
      sb.append("versionCode:");
      sb.append(this.versionCode);
      first = false;
    }
    if (isSetFilePath()) {
      if (!first) sb.append(", ");
      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
    }
    if (isSetFileMD5()) {
      if (!first) sb.append(", ");
      sb.append("fileMD5:");
      if (this.fileMD5 == null) {
        sb.append("null");
      } else {
        sb.append(this.fileMD5);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ErrorCodeDataVersionStandardSchemeFactory implements SchemeFactory {
    public ErrorCodeDataVersionStandardScheme getScheme() {
      return new ErrorCodeDataVersionStandardScheme();
    }
  }

  private static class ErrorCodeDataVersionStandardScheme extends StandardScheme<ErrorCodeDataVersion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ErrorCodeDataVersion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionCode = iprot.readI64();
              struct.setVersionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filePath = iprot.readString();
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileMD5 = iprot.readString();
              struct.setFileMD5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ErrorCodeDataVersion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetVersionCode()) {
        oprot.writeFieldBegin(VERSION_CODE_FIELD_DESC);
        oprot.writeI64(struct.versionCode);
        oprot.writeFieldEnd();
      }
      if (struct.filePath != null) {
        if (struct.isSetFilePath()) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileMD5 != null) {
        if (struct.isSetFileMD5()) {
          oprot.writeFieldBegin(FILE_MD5_FIELD_DESC);
          oprot.writeString(struct.fileMD5);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ErrorCodeDataVersionTupleSchemeFactory implements SchemeFactory {
    public ErrorCodeDataVersionTupleScheme getScheme() {
      return new ErrorCodeDataVersionTupleScheme();
    }
  }

  private static class ErrorCodeDataVersionTupleScheme extends TupleScheme<ErrorCodeDataVersion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ErrorCodeDataVersion struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersionCode()) {
        optionals.set(0);
      }
      if (struct.isSetFilePath()) {
        optionals.set(1);
      }
      if (struct.isSetFileMD5()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVersionCode()) {
        oprot.writeI64(struct.versionCode);
      }
      if (struct.isSetFilePath()) {
        oprot.writeString(struct.filePath);
      }
      if (struct.isSetFileMD5()) {
        oprot.writeString(struct.fileMD5);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ErrorCodeDataVersion struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.versionCode = iprot.readI64();
        struct.setVersionCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.filePath = iprot.readString();
        struct.setFilePathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileMD5 = iprot.readString();
        struct.setFileMD5IsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
    }
  }

}

