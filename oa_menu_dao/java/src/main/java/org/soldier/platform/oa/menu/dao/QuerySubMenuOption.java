/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.oa.menu.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QuerySubMenuOption implements org.apache.thrift.TBase<QuerySubMenuOption, QuerySubMenuOption._Fields>, java.io.Serializable, Cloneable, Comparable<QuerySubMenuOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuerySubMenuOption");

  private static final org.apache.thrift.protocol.TField SYSTEM_MENU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("systemMenuId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MENU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("menuId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MENU_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("menuName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuerySubMenuOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuerySubMenuOptionTupleSchemeFactory());
  }

  public int systemMenuId; // required
  public int menuId; // optional
  public String menuName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYSTEM_MENU_ID((short)1, "systemMenuId"),
    MENU_ID((short)2, "menuId"),
    MENU_NAME((short)3, "menuName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYSTEM_MENU_ID
          return SYSTEM_MENU_ID;
        case 2: // MENU_ID
          return MENU_ID;
        case 3: // MENU_NAME
          return MENU_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SYSTEMMENUID_ISSET_ID = 0;
  private static final int __MENUID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MENU_ID,_Fields.MENU_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYSTEM_MENU_ID, new org.apache.thrift.meta_data.FieldMetaData("systemMenuId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MENU_ID, new org.apache.thrift.meta_data.FieldMetaData("menuId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MENU_NAME, new org.apache.thrift.meta_data.FieldMetaData("menuName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuerySubMenuOption.class, metaDataMap);
  }

  public QuerySubMenuOption() {
  }

  public QuerySubMenuOption(
    int systemMenuId)
  {
    this();
    this.systemMenuId = systemMenuId;
    setSystemMenuIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuerySubMenuOption(QuerySubMenuOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.systemMenuId = other.systemMenuId;
    this.menuId = other.menuId;
    if (other.isSetMenuName()) {
      this.menuName = other.menuName;
    }
  }

  public QuerySubMenuOption deepCopy() {
    return new QuerySubMenuOption(this);
  }

  @Override
  public void clear() {
    setSystemMenuIdIsSet(false);
    this.systemMenuId = 0;
    setMenuIdIsSet(false);
    this.menuId = 0;
    this.menuName = null;
  }

  public int getSystemMenuId() {
    return this.systemMenuId;
  }

  public QuerySubMenuOption setSystemMenuId(int systemMenuId) {
    this.systemMenuId = systemMenuId;
    setSystemMenuIdIsSet(true);
    return this;
  }

  public void unsetSystemMenuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYSTEMMENUID_ISSET_ID);
  }

  /** Returns true if field systemMenuId is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemMenuId() {
    return EncodingUtils.testBit(__isset_bitfield, __SYSTEMMENUID_ISSET_ID);
  }

  public void setSystemMenuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYSTEMMENUID_ISSET_ID, value);
  }

  public int getMenuId() {
    return this.menuId;
  }

  public QuerySubMenuOption setMenuId(int menuId) {
    this.menuId = menuId;
    setMenuIdIsSet(true);
    return this;
  }

  public void unsetMenuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MENUID_ISSET_ID);
  }

  /** Returns true if field menuId is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuId() {
    return EncodingUtils.testBit(__isset_bitfield, __MENUID_ISSET_ID);
  }

  public void setMenuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MENUID_ISSET_ID, value);
  }

  public String getMenuName() {
    return this.menuName;
  }

  public QuerySubMenuOption setMenuName(String menuName) {
    this.menuName = menuName;
    return this;
  }

  public void unsetMenuName() {
    this.menuName = null;
  }

  /** Returns true if field menuName is set (has been assigned a value) and false otherwise */
  public boolean isSetMenuName() {
    return this.menuName != null;
  }

  public void setMenuNameIsSet(boolean value) {
    if (!value) {
      this.menuName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SYSTEM_MENU_ID:
      if (value == null) {
        unsetSystemMenuId();
      } else {
        setSystemMenuId((Integer)value);
      }
      break;

    case MENU_ID:
      if (value == null) {
        unsetMenuId();
      } else {
        setMenuId((Integer)value);
      }
      break;

    case MENU_NAME:
      if (value == null) {
        unsetMenuName();
      } else {
        setMenuName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SYSTEM_MENU_ID:
      return Integer.valueOf(getSystemMenuId());

    case MENU_ID:
      return Integer.valueOf(getMenuId());

    case MENU_NAME:
      return getMenuName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SYSTEM_MENU_ID:
      return isSetSystemMenuId();
    case MENU_ID:
      return isSetMenuId();
    case MENU_NAME:
      return isSetMenuName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuerySubMenuOption)
      return this.equals((QuerySubMenuOption)that);
    return false;
  }

  public boolean equals(QuerySubMenuOption that) {
    if (that == null)
      return false;

    boolean this_present_systemMenuId = true;
    boolean that_present_systemMenuId = true;
    if (this_present_systemMenuId || that_present_systemMenuId) {
      if (!(this_present_systemMenuId && that_present_systemMenuId))
        return false;
      if (this.systemMenuId != that.systemMenuId)
        return false;
    }

    boolean this_present_menuId = true && this.isSetMenuId();
    boolean that_present_menuId = true && that.isSetMenuId();
    if (this_present_menuId || that_present_menuId) {
      if (!(this_present_menuId && that_present_menuId))
        return false;
      if (this.menuId != that.menuId)
        return false;
    }

    boolean this_present_menuName = true && this.isSetMenuName();
    boolean that_present_menuName = true && that.isSetMenuName();
    if (this_present_menuName || that_present_menuName) {
      if (!(this_present_menuName && that_present_menuName))
        return false;
      if (!this.menuName.equals(that.menuName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QuerySubMenuOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSystemMenuId()).compareTo(other.isSetSystemMenuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemMenuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemMenuId, other.systemMenuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuId()).compareTo(other.isSetMenuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuId, other.menuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMenuName()).compareTo(other.isSetMenuName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenuName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menuName, other.menuName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuerySubMenuOption(");
    boolean first = true;

    sb.append("systemMenuId:");
    sb.append(this.systemMenuId);
    first = false;
    if (isSetMenuId()) {
      if (!first) sb.append(", ");
      sb.append("menuId:");
      sb.append(this.menuId);
      first = false;
    }
    if (isSetMenuName()) {
      if (!first) sb.append(", ");
      sb.append("menuName:");
      if (this.menuName == null) {
        sb.append("null");
      } else {
        sb.append(this.menuName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'systemMenuId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuerySubMenuOptionStandardSchemeFactory implements SchemeFactory {
    public QuerySubMenuOptionStandardScheme getScheme() {
      return new QuerySubMenuOptionStandardScheme();
    }
  }

  private static class QuerySubMenuOptionStandardScheme extends StandardScheme<QuerySubMenuOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuerySubMenuOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SYSTEM_MENU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.systemMenuId = iprot.readI32();
              struct.setSystemMenuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MENU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.menuId = iprot.readI32();
              struct.setMenuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MENU_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.menuName = iprot.readString();
              struct.setMenuNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSystemMenuId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'systemMenuId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuerySubMenuOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYSTEM_MENU_ID_FIELD_DESC);
      oprot.writeI32(struct.systemMenuId);
      oprot.writeFieldEnd();
      if (struct.isSetMenuId()) {
        oprot.writeFieldBegin(MENU_ID_FIELD_DESC);
        oprot.writeI32(struct.menuId);
        oprot.writeFieldEnd();
      }
      if (struct.menuName != null) {
        if (struct.isSetMenuName()) {
          oprot.writeFieldBegin(MENU_NAME_FIELD_DESC);
          oprot.writeString(struct.menuName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuerySubMenuOptionTupleSchemeFactory implements SchemeFactory {
    public QuerySubMenuOptionTupleScheme getScheme() {
      return new QuerySubMenuOptionTupleScheme();
    }
  }

  private static class QuerySubMenuOptionTupleScheme extends TupleScheme<QuerySubMenuOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuerySubMenuOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.systemMenuId);
      BitSet optionals = new BitSet();
      if (struct.isSetMenuId()) {
        optionals.set(0);
      }
      if (struct.isSetMenuName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMenuId()) {
        oprot.writeI32(struct.menuId);
      }
      if (struct.isSetMenuName()) {
        oprot.writeString(struct.menuName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuerySubMenuOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.systemMenuId = iprot.readI32();
      struct.setSystemMenuIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.menuId = iprot.readI32();
        struct.setMenuIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.menuName = iprot.readString();
        struct.setMenuNameIsSet(true);
      }
    }
  }

}

