/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.proxy.test.ao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EchoTypes implements org.apache.thrift.TBase<EchoTypes, EchoTypes._Fields>, java.io.Serializable, Cloneable, Comparable<EchoTypes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EchoTypes");

  private static final org.apache.thrift.protocol.TField BOOL_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_field", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("string_field", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INT64_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("int64_field", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField INT32_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("int32_field", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DOUBLE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("double_field", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField LIST_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("list_field", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField MAP_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("map_field", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField SET_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("set_field", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField STRUCT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("struct_field", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EchoTypesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EchoTypesTupleSchemeFactory());
  }

  public boolean bool_field; // optional
  public String string_field; // optional
  public long int64_field; // optional
  public int int32_field; // optional
  public double double_field; // optional
  public List<String> list_field; // optional
  public Map<String,String> map_field; // optional
  public Set<String> set_field; // optional
  public EchoListResult struct_field; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_FIELD((short)1, "bool_field"),
    STRING_FIELD((short)2, "string_field"),
    INT64_FIELD((short)3, "int64_field"),
    INT32_FIELD((short)4, "int32_field"),
    DOUBLE_FIELD((short)5, "double_field"),
    LIST_FIELD((short)6, "list_field"),
    MAP_FIELD((short)7, "map_field"),
    SET_FIELD((short)8, "set_field"),
    STRUCT_FIELD((short)9, "struct_field");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_FIELD
          return BOOL_FIELD;
        case 2: // STRING_FIELD
          return STRING_FIELD;
        case 3: // INT64_FIELD
          return INT64_FIELD;
        case 4: // INT32_FIELD
          return INT32_FIELD;
        case 5: // DOUBLE_FIELD
          return DOUBLE_FIELD;
        case 6: // LIST_FIELD
          return LIST_FIELD;
        case 7: // MAP_FIELD
          return MAP_FIELD;
        case 8: // SET_FIELD
          return SET_FIELD;
        case 9: // STRUCT_FIELD
          return STRUCT_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOL_FIELD_ISSET_ID = 0;
  private static final int __INT64_FIELD_ISSET_ID = 1;
  private static final int __INT32_FIELD_ISSET_ID = 2;
  private static final int __DOUBLE_FIELD_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BOOL_FIELD,_Fields.STRING_FIELD,_Fields.INT64_FIELD,_Fields.INT32_FIELD,_Fields.DOUBLE_FIELD,_Fields.LIST_FIELD,_Fields.MAP_FIELD,_Fields.SET_FIELD,_Fields.STRUCT_FIELD};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_FIELD, new org.apache.thrift.meta_data.FieldMetaData("bool_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STRING_FIELD, new org.apache.thrift.meta_data.FieldMetaData("string_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INT64_FIELD, new org.apache.thrift.meta_data.FieldMetaData("int64_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INT32_FIELD, new org.apache.thrift.meta_data.FieldMetaData("int32_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOUBLE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("double_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LIST_FIELD, new org.apache.thrift.meta_data.FieldMetaData("list_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAP_FIELD, new org.apache.thrift.meta_data.FieldMetaData("map_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SET_FIELD, new org.apache.thrift.meta_data.FieldMetaData("set_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STRUCT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("struct_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EchoListResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EchoTypes.class, metaDataMap);
  }

  public EchoTypes() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EchoTypes(EchoTypes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bool_field = other.bool_field;
    if (other.isSetString_field()) {
      this.string_field = other.string_field;
    }
    this.int64_field = other.int64_field;
    this.int32_field = other.int32_field;
    this.double_field = other.double_field;
    if (other.isSetList_field()) {
      List<String> __this__list_field = new ArrayList<String>(other.list_field);
      this.list_field = __this__list_field;
    }
    if (other.isSetMap_field()) {
      Map<String,String> __this__map_field = new HashMap<String,String>(other.map_field);
      this.map_field = __this__map_field;
    }
    if (other.isSetSet_field()) {
      Set<String> __this__set_field = new HashSet<String>(other.set_field);
      this.set_field = __this__set_field;
    }
    if (other.isSetStruct_field()) {
      this.struct_field = new EchoListResult(other.struct_field);
    }
  }

  public EchoTypes deepCopy() {
    return new EchoTypes(this);
  }

  @Override
  public void clear() {
    setBool_fieldIsSet(false);
    this.bool_field = false;
    this.string_field = null;
    setInt64_fieldIsSet(false);
    this.int64_field = 0;
    setInt32_fieldIsSet(false);
    this.int32_field = 0;
    setDouble_fieldIsSet(false);
    this.double_field = 0.0;
    this.list_field = null;
    this.map_field = null;
    this.set_field = null;
    this.struct_field = null;
  }

  public boolean isBool_field() {
    return this.bool_field;
  }

  public EchoTypes setBool_field(boolean bool_field) {
    this.bool_field = bool_field;
    setBool_fieldIsSet(true);
    return this;
  }

  public void unsetBool_field() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOL_FIELD_ISSET_ID);
  }

  /** Returns true if field bool_field is set (has been assigned a value) and false otherwise */
  public boolean isSetBool_field() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOL_FIELD_ISSET_ID);
  }

  public void setBool_fieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOL_FIELD_ISSET_ID, value);
  }

  public String getString_field() {
    return this.string_field;
  }

  public EchoTypes setString_field(String string_field) {
    this.string_field = string_field;
    return this;
  }

  public void unsetString_field() {
    this.string_field = null;
  }

  /** Returns true if field string_field is set (has been assigned a value) and false otherwise */
  public boolean isSetString_field() {
    return this.string_field != null;
  }

  public void setString_fieldIsSet(boolean value) {
    if (!value) {
      this.string_field = null;
    }
  }

  public long getInt64_field() {
    return this.int64_field;
  }

  public EchoTypes setInt64_field(long int64_field) {
    this.int64_field = int64_field;
    setInt64_fieldIsSet(true);
    return this;
  }

  public void unsetInt64_field() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT64_FIELD_ISSET_ID);
  }

  /** Returns true if field int64_field is set (has been assigned a value) and false otherwise */
  public boolean isSetInt64_field() {
    return EncodingUtils.testBit(__isset_bitfield, __INT64_FIELD_ISSET_ID);
  }

  public void setInt64_fieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT64_FIELD_ISSET_ID, value);
  }

  public int getInt32_field() {
    return this.int32_field;
  }

  public EchoTypes setInt32_field(int int32_field) {
    this.int32_field = int32_field;
    setInt32_fieldIsSet(true);
    return this;
  }

  public void unsetInt32_field() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT32_FIELD_ISSET_ID);
  }

  /** Returns true if field int32_field is set (has been assigned a value) and false otherwise */
  public boolean isSetInt32_field() {
    return EncodingUtils.testBit(__isset_bitfield, __INT32_FIELD_ISSET_ID);
  }

  public void setInt32_fieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT32_FIELD_ISSET_ID, value);
  }

  public double getDouble_field() {
    return this.double_field;
  }

  public EchoTypes setDouble_field(double double_field) {
    this.double_field = double_field;
    setDouble_fieldIsSet(true);
    return this;
  }

  public void unsetDouble_field() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_FIELD_ISSET_ID);
  }

  /** Returns true if field double_field is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_field() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE_FIELD_ISSET_ID);
  }

  public void setDouble_fieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE_FIELD_ISSET_ID, value);
  }

  public int getList_fieldSize() {
    return (this.list_field == null) ? 0 : this.list_field.size();
  }

  public java.util.Iterator<String> getList_fieldIterator() {
    return (this.list_field == null) ? null : this.list_field.iterator();
  }

  public void addToList_field(String elem) {
    if (this.list_field == null) {
      this.list_field = new ArrayList<String>();
    }
    this.list_field.add(elem);
  }

  public List<String> getList_field() {
    return this.list_field;
  }

  public EchoTypes setList_field(List<String> list_field) {
    this.list_field = list_field;
    return this;
  }

  public void unsetList_field() {
    this.list_field = null;
  }

  /** Returns true if field list_field is set (has been assigned a value) and false otherwise */
  public boolean isSetList_field() {
    return this.list_field != null;
  }

  public void setList_fieldIsSet(boolean value) {
    if (!value) {
      this.list_field = null;
    }
  }

  public int getMap_fieldSize() {
    return (this.map_field == null) ? 0 : this.map_field.size();
  }

  public void putToMap_field(String key, String val) {
    if (this.map_field == null) {
      this.map_field = new HashMap<String,String>();
    }
    this.map_field.put(key, val);
  }

  public Map<String,String> getMap_field() {
    return this.map_field;
  }

  public EchoTypes setMap_field(Map<String,String> map_field) {
    this.map_field = map_field;
    return this;
  }

  public void unsetMap_field() {
    this.map_field = null;
  }

  /** Returns true if field map_field is set (has been assigned a value) and false otherwise */
  public boolean isSetMap_field() {
    return this.map_field != null;
  }

  public void setMap_fieldIsSet(boolean value) {
    if (!value) {
      this.map_field = null;
    }
  }

  public int getSet_fieldSize() {
    return (this.set_field == null) ? 0 : this.set_field.size();
  }

  public java.util.Iterator<String> getSet_fieldIterator() {
    return (this.set_field == null) ? null : this.set_field.iterator();
  }

  public void addToSet_field(String elem) {
    if (this.set_field == null) {
      this.set_field = new HashSet<String>();
    }
    this.set_field.add(elem);
  }

  public Set<String> getSet_field() {
    return this.set_field;
  }

  public EchoTypes setSet_field(Set<String> set_field) {
    this.set_field = set_field;
    return this;
  }

  public void unsetSet_field() {
    this.set_field = null;
  }

  /** Returns true if field set_field is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_field() {
    return this.set_field != null;
  }

  public void setSet_fieldIsSet(boolean value) {
    if (!value) {
      this.set_field = null;
    }
  }

  public EchoListResult getStruct_field() {
    return this.struct_field;
  }

  public EchoTypes setStruct_field(EchoListResult struct_field) {
    this.struct_field = struct_field;
    return this;
  }

  public void unsetStruct_field() {
    this.struct_field = null;
  }

  /** Returns true if field struct_field is set (has been assigned a value) and false otherwise */
  public boolean isSetStruct_field() {
    return this.struct_field != null;
  }

  public void setStruct_fieldIsSet(boolean value) {
    if (!value) {
      this.struct_field = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_FIELD:
      if (value == null) {
        unsetBool_field();
      } else {
        setBool_field((Boolean)value);
      }
      break;

    case STRING_FIELD:
      if (value == null) {
        unsetString_field();
      } else {
        setString_field((String)value);
      }
      break;

    case INT64_FIELD:
      if (value == null) {
        unsetInt64_field();
      } else {
        setInt64_field((Long)value);
      }
      break;

    case INT32_FIELD:
      if (value == null) {
        unsetInt32_field();
      } else {
        setInt32_field((Integer)value);
      }
      break;

    case DOUBLE_FIELD:
      if (value == null) {
        unsetDouble_field();
      } else {
        setDouble_field((Double)value);
      }
      break;

    case LIST_FIELD:
      if (value == null) {
        unsetList_field();
      } else {
        setList_field((List<String>)value);
      }
      break;

    case MAP_FIELD:
      if (value == null) {
        unsetMap_field();
      } else {
        setMap_field((Map<String,String>)value);
      }
      break;

    case SET_FIELD:
      if (value == null) {
        unsetSet_field();
      } else {
        setSet_field((Set<String>)value);
      }
      break;

    case STRUCT_FIELD:
      if (value == null) {
        unsetStruct_field();
      } else {
        setStruct_field((EchoListResult)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_FIELD:
      return Boolean.valueOf(isBool_field());

    case STRING_FIELD:
      return getString_field();

    case INT64_FIELD:
      return Long.valueOf(getInt64_field());

    case INT32_FIELD:
      return Integer.valueOf(getInt32_field());

    case DOUBLE_FIELD:
      return Double.valueOf(getDouble_field());

    case LIST_FIELD:
      return getList_field();

    case MAP_FIELD:
      return getMap_field();

    case SET_FIELD:
      return getSet_field();

    case STRUCT_FIELD:
      return getStruct_field();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_FIELD:
      return isSetBool_field();
    case STRING_FIELD:
      return isSetString_field();
    case INT64_FIELD:
      return isSetInt64_field();
    case INT32_FIELD:
      return isSetInt32_field();
    case DOUBLE_FIELD:
      return isSetDouble_field();
    case LIST_FIELD:
      return isSetList_field();
    case MAP_FIELD:
      return isSetMap_field();
    case SET_FIELD:
      return isSetSet_field();
    case STRUCT_FIELD:
      return isSetStruct_field();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EchoTypes)
      return this.equals((EchoTypes)that);
    return false;
  }

  public boolean equals(EchoTypes that) {
    if (that == null)
      return false;

    boolean this_present_bool_field = true && this.isSetBool_field();
    boolean that_present_bool_field = true && that.isSetBool_field();
    if (this_present_bool_field || that_present_bool_field) {
      if (!(this_present_bool_field && that_present_bool_field))
        return false;
      if (this.bool_field != that.bool_field)
        return false;
    }

    boolean this_present_string_field = true && this.isSetString_field();
    boolean that_present_string_field = true && that.isSetString_field();
    if (this_present_string_field || that_present_string_field) {
      if (!(this_present_string_field && that_present_string_field))
        return false;
      if (!this.string_field.equals(that.string_field))
        return false;
    }

    boolean this_present_int64_field = true && this.isSetInt64_field();
    boolean that_present_int64_field = true && that.isSetInt64_field();
    if (this_present_int64_field || that_present_int64_field) {
      if (!(this_present_int64_field && that_present_int64_field))
        return false;
      if (this.int64_field != that.int64_field)
        return false;
    }

    boolean this_present_int32_field = true && this.isSetInt32_field();
    boolean that_present_int32_field = true && that.isSetInt32_field();
    if (this_present_int32_field || that_present_int32_field) {
      if (!(this_present_int32_field && that_present_int32_field))
        return false;
      if (this.int32_field != that.int32_field)
        return false;
    }

    boolean this_present_double_field = true && this.isSetDouble_field();
    boolean that_present_double_field = true && that.isSetDouble_field();
    if (this_present_double_field || that_present_double_field) {
      if (!(this_present_double_field && that_present_double_field))
        return false;
      if (this.double_field != that.double_field)
        return false;
    }

    boolean this_present_list_field = true && this.isSetList_field();
    boolean that_present_list_field = true && that.isSetList_field();
    if (this_present_list_field || that_present_list_field) {
      if (!(this_present_list_field && that_present_list_field))
        return false;
      if (!this.list_field.equals(that.list_field))
        return false;
    }

    boolean this_present_map_field = true && this.isSetMap_field();
    boolean that_present_map_field = true && that.isSetMap_field();
    if (this_present_map_field || that_present_map_field) {
      if (!(this_present_map_field && that_present_map_field))
        return false;
      if (!this.map_field.equals(that.map_field))
        return false;
    }

    boolean this_present_set_field = true && this.isSetSet_field();
    boolean that_present_set_field = true && that.isSetSet_field();
    if (this_present_set_field || that_present_set_field) {
      if (!(this_present_set_field && that_present_set_field))
        return false;
      if (!this.set_field.equals(that.set_field))
        return false;
    }

    boolean this_present_struct_field = true && this.isSetStruct_field();
    boolean that_present_struct_field = true && that.isSetStruct_field();
    if (this_present_struct_field || that_present_struct_field) {
      if (!(this_present_struct_field && that_present_struct_field))
        return false;
      if (!this.struct_field.equals(that.struct_field))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EchoTypes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBool_field()).compareTo(other.isSetBool_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBool_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_field, other.bool_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_field()).compareTo(other.isSetString_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_field, other.string_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt64_field()).compareTo(other.isSetInt64_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt64_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int64_field, other.int64_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt32_field()).compareTo(other.isSetInt32_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt32_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int32_field, other.int32_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_field()).compareTo(other.isSetDouble_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_field, other.double_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetList_field()).compareTo(other.isSetList_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_field, other.list_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMap_field()).compareTo(other.isSetMap_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMap_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_field, other.map_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSet_field()).compareTo(other.isSetSet_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_field, other.set_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStruct_field()).compareTo(other.isSetStruct_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStruct_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.struct_field, other.struct_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EchoTypes(");
    boolean first = true;

    if (isSetBool_field()) {
      sb.append("bool_field:");
      sb.append(this.bool_field);
      first = false;
    }
    if (isSetString_field()) {
      if (!first) sb.append(", ");
      sb.append("string_field:");
      if (this.string_field == null) {
        sb.append("null");
      } else {
        sb.append(this.string_field);
      }
      first = false;
    }
    if (isSetInt64_field()) {
      if (!first) sb.append(", ");
      sb.append("int64_field:");
      sb.append(this.int64_field);
      first = false;
    }
    if (isSetInt32_field()) {
      if (!first) sb.append(", ");
      sb.append("int32_field:");
      sb.append(this.int32_field);
      first = false;
    }
    if (isSetDouble_field()) {
      if (!first) sb.append(", ");
      sb.append("double_field:");
      sb.append(this.double_field);
      first = false;
    }
    if (isSetList_field()) {
      if (!first) sb.append(", ");
      sb.append("list_field:");
      if (this.list_field == null) {
        sb.append("null");
      } else {
        sb.append(this.list_field);
      }
      first = false;
    }
    if (isSetMap_field()) {
      if (!first) sb.append(", ");
      sb.append("map_field:");
      if (this.map_field == null) {
        sb.append("null");
      } else {
        sb.append(this.map_field);
      }
      first = false;
    }
    if (isSetSet_field()) {
      if (!first) sb.append(", ");
      sb.append("set_field:");
      if (this.set_field == null) {
        sb.append("null");
      } else {
        sb.append(this.set_field);
      }
      first = false;
    }
    if (isSetStruct_field()) {
      if (!first) sb.append(", ");
      sb.append("struct_field:");
      if (this.struct_field == null) {
        sb.append("null");
      } else {
        sb.append(this.struct_field);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (struct_field != null) {
      struct_field.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EchoTypesStandardSchemeFactory implements SchemeFactory {
    public EchoTypesStandardScheme getScheme() {
      return new EchoTypesStandardScheme();
    }
  }

  private static class EchoTypesStandardScheme extends StandardScheme<EchoTypes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EchoTypes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bool_field = iprot.readBool();
              struct.setBool_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRING_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_field = iprot.readString();
              struct.setString_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INT64_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int64_field = iprot.readI64();
              struct.setInt64_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INT32_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.int32_field = iprot.readI32();
              struct.setInt32_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOUBLE_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_field = iprot.readDouble();
              struct.setDouble_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIST_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.list_field = new ArrayList<String>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  String _elem18;
                  _elem18 = iprot.readString();
                  struct.list_field.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setList_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAP_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                struct.map_field = new HashMap<String,String>(2*_map19.size);
                for (int _i20 = 0; _i20 < _map19.size; ++_i20)
                {
                  String _key21;
                  String _val22;
                  _key21 = iprot.readString();
                  _val22 = iprot.readString();
                  struct.map_field.put(_key21, _val22);
                }
                iprot.readMapEnd();
              }
              struct.setMap_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SET_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set23 = iprot.readSetBegin();
                struct.set_field = new HashSet<String>(2*_set23.size);
                for (int _i24 = 0; _i24 < _set23.size; ++_i24)
                {
                  String _elem25;
                  _elem25 = iprot.readString();
                  struct.set_field.add(_elem25);
                }
                iprot.readSetEnd();
              }
              struct.setSet_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STRUCT_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.struct_field = new EchoListResult();
              struct.struct_field.read(iprot);
              struct.setStruct_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EchoTypes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetBool_field()) {
        oprot.writeFieldBegin(BOOL_FIELD_FIELD_DESC);
        oprot.writeBool(struct.bool_field);
        oprot.writeFieldEnd();
      }
      if (struct.string_field != null) {
        if (struct.isSetString_field()) {
          oprot.writeFieldBegin(STRING_FIELD_FIELD_DESC);
          oprot.writeString(struct.string_field);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInt64_field()) {
        oprot.writeFieldBegin(INT64_FIELD_FIELD_DESC);
        oprot.writeI64(struct.int64_field);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInt32_field()) {
        oprot.writeFieldBegin(INT32_FIELD_FIELD_DESC);
        oprot.writeI32(struct.int32_field);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDouble_field()) {
        oprot.writeFieldBegin(DOUBLE_FIELD_FIELD_DESC);
        oprot.writeDouble(struct.double_field);
        oprot.writeFieldEnd();
      }
      if (struct.list_field != null) {
        if (struct.isSetList_field()) {
          oprot.writeFieldBegin(LIST_FIELD_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.list_field.size()));
            for (String _iter26 : struct.list_field)
            {
              oprot.writeString(_iter26);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.map_field != null) {
        if (struct.isSetMap_field()) {
          oprot.writeFieldBegin(MAP_FIELD_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.map_field.size()));
            for (Map.Entry<String, String> _iter27 : struct.map_field.entrySet())
            {
              oprot.writeString(_iter27.getKey());
              oprot.writeString(_iter27.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.set_field != null) {
        if (struct.isSetSet_field()) {
          oprot.writeFieldBegin(SET_FIELD_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.set_field.size()));
            for (String _iter28 : struct.set_field)
            {
              oprot.writeString(_iter28);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.struct_field != null) {
        if (struct.isSetStruct_field()) {
          oprot.writeFieldBegin(STRUCT_FIELD_FIELD_DESC);
          struct.struct_field.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EchoTypesTupleSchemeFactory implements SchemeFactory {
    public EchoTypesTupleScheme getScheme() {
      return new EchoTypesTupleScheme();
    }
  }

  private static class EchoTypesTupleScheme extends TupleScheme<EchoTypes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EchoTypes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBool_field()) {
        optionals.set(0);
      }
      if (struct.isSetString_field()) {
        optionals.set(1);
      }
      if (struct.isSetInt64_field()) {
        optionals.set(2);
      }
      if (struct.isSetInt32_field()) {
        optionals.set(3);
      }
      if (struct.isSetDouble_field()) {
        optionals.set(4);
      }
      if (struct.isSetList_field()) {
        optionals.set(5);
      }
      if (struct.isSetMap_field()) {
        optionals.set(6);
      }
      if (struct.isSetSet_field()) {
        optionals.set(7);
      }
      if (struct.isSetStruct_field()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetBool_field()) {
        oprot.writeBool(struct.bool_field);
      }
      if (struct.isSetString_field()) {
        oprot.writeString(struct.string_field);
      }
      if (struct.isSetInt64_field()) {
        oprot.writeI64(struct.int64_field);
      }
      if (struct.isSetInt32_field()) {
        oprot.writeI32(struct.int32_field);
      }
      if (struct.isSetDouble_field()) {
        oprot.writeDouble(struct.double_field);
      }
      if (struct.isSetList_field()) {
        {
          oprot.writeI32(struct.list_field.size());
          for (String _iter29 : struct.list_field)
          {
            oprot.writeString(_iter29);
          }
        }
      }
      if (struct.isSetMap_field()) {
        {
          oprot.writeI32(struct.map_field.size());
          for (Map.Entry<String, String> _iter30 : struct.map_field.entrySet())
          {
            oprot.writeString(_iter30.getKey());
            oprot.writeString(_iter30.getValue());
          }
        }
      }
      if (struct.isSetSet_field()) {
        {
          oprot.writeI32(struct.set_field.size());
          for (String _iter31 : struct.set_field)
          {
            oprot.writeString(_iter31);
          }
        }
      }
      if (struct.isSetStruct_field()) {
        struct.struct_field.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EchoTypes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.bool_field = iprot.readBool();
        struct.setBool_fieldIsSet(true);
      }
      if (incoming.get(1)) {
        struct.string_field = iprot.readString();
        struct.setString_fieldIsSet(true);
      }
      if (incoming.get(2)) {
        struct.int64_field = iprot.readI64();
        struct.setInt64_fieldIsSet(true);
      }
      if (incoming.get(3)) {
        struct.int32_field = iprot.readI32();
        struct.setInt32_fieldIsSet(true);
      }
      if (incoming.get(4)) {
        struct.double_field = iprot.readDouble();
        struct.setDouble_fieldIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list32 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.list_field = new ArrayList<String>(_list32.size);
          for (int _i33 = 0; _i33 < _list32.size; ++_i33)
          {
            String _elem34;
            _elem34 = iprot.readString();
            struct.list_field.add(_elem34);
          }
        }
        struct.setList_fieldIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map35 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.map_field = new HashMap<String,String>(2*_map35.size);
          for (int _i36 = 0; _i36 < _map35.size; ++_i36)
          {
            String _key37;
            String _val38;
            _key37 = iprot.readString();
            _val38 = iprot.readString();
            struct.map_field.put(_key37, _val38);
          }
        }
        struct.setMap_fieldIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set39 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.set_field = new HashSet<String>(2*_set39.size);
          for (int _i40 = 0; _i40 < _set39.size; ++_i40)
          {
            String _elem41;
            _elem41 = iprot.readString();
            struct.set_field.add(_elem41);
          }
        }
        struct.setSet_fieldIsSet(true);
      }
      if (incoming.get(8)) {
        struct.struct_field = new EchoListResult();
        struct.struct_field.read(iprot);
        struct.setStruct_fieldIsSet(true);
      }
    }
  }

}

