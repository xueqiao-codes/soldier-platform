//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

proxy_test_ao_testEcho_args = function(args) {
  this.platformArgs = null;
  this.content = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
  }
};
proxy_test_ao_testEcho_args.prototype = {};
proxy_test_ao_testEcho_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEcho_args.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEcho_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEcho_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
proxy_test_ao_testEcho_result.prototype = {};
proxy_test_ao_testEcho_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEcho_result.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEcho_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoList_args = function(args) {
  this.platformArgs = null;
  this.contentList = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.contentList !== undefined) {
      this.contentList = args.contentList;
    }
  }
};
proxy_test_ao_testEchoList_args.prototype = {};
proxy_test_ao_testEchoList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.contentList = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = input.readString().value;
          this.contentList.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoList_args.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoList_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.contentList !== null && this.contentList !== undefined) {
    output.writeFieldBegin('contentList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.contentList.length);
    for (var iter117 in this.contentList)
    {
      if (this.contentList.hasOwnProperty(iter117))
      {
        iter117 = this.contentList[iter117];
        output.writeString(iter117);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoList_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
proxy_test_ao_testEchoList_result.prototype = {};
proxy_test_ao_testEchoList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size118 = 0;
        var _rtmp3122;
        this.success = [];
        var _etype121 = 0;
        _rtmp3122 = input.readListBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = input.readString().value;
          this.success.push(elem124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoList_result.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter125 in this.success)
    {
      if (this.success.hasOwnProperty(iter125))
      {
        iter125 = this.success[iter125];
        output.writeString(iter125);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoListStruct_args = function(args) {
  this.platformArgs = null;
  this.contentList = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.contentList !== undefined) {
      this.contentList = args.contentList;
    }
  }
};
proxy_test_ao_testEchoListStruct_args.prototype = {};
proxy_test_ao_testEchoListStruct_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size126 = 0;
        var _rtmp3130;
        this.contentList = [];
        var _etype129 = 0;
        _rtmp3130 = input.readListBegin();
        _etype129 = _rtmp3130.etype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var elem132 = null;
          elem132 = input.readString().value;
          this.contentList.push(elem132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoListStruct_args.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoListStruct_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.contentList !== null && this.contentList !== undefined) {
    output.writeFieldBegin('contentList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.contentList.length);
    for (var iter133 in this.contentList)
    {
      if (this.contentList.hasOwnProperty(iter133))
      {
        iter133 = this.contentList[iter133];
        output.writeString(iter133);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoListStruct_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
proxy_test_ao_testEchoListStruct_result.prototype = {};
proxy_test_ao_testEchoListStruct_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new EchoListResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoListStruct_result.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoListStruct_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_echoTypes_args = function(args) {
  this.platformArgs = null;
  this.types = null;
  this.throw_action = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.types !== undefined) {
      this.types = args.types;
    }
    if (args.throw_action !== undefined) {
      this.throw_action = args.throw_action;
    }
  }
};
proxy_test_ao_echoTypes_args.prototype = {};
proxy_test_ao_echoTypes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.types = new EchoTypes();
        this.types.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.throw_action = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_echoTypes_args.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_echoTypes_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.STRUCT, 2);
    this.types.write(output);
    output.writeFieldEnd();
  }
  if (this.throw_action !== null && this.throw_action !== undefined) {
    output.writeFieldBegin('throw_action', Thrift.Type.BOOL, 3);
    output.writeBool(this.throw_action);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_echoTypes_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
proxy_test_ao_echoTypes_result.prototype = {};
proxy_test_ao_echoTypes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new EchoTypes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_echoTypes_result.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_echoTypes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoSet_args = function(args) {
  this.platformArgs = null;
  this.valueList = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.valueList !== undefined) {
      this.valueList = args.valueList;
    }
  }
};
proxy_test_ao_testEchoSet_args.prototype = {};
proxy_test_ao_testEchoSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size134 = 0;
        var _rtmp3138;
        this.valueList = [];
        var _etype137 = 0;
        _rtmp3138 = input.readSetBegin();
        _etype137 = _rtmp3138.etype;
        _size134 = _rtmp3138.size;
        for (var _i139 = 0; _i139 < _size134; ++_i139)
        {
          var elem140 = null;
          elem140 = input.readI64().value;
          this.valueList.push(elem140);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoSet_args.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoSet_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.valueList !== null && this.valueList !== undefined) {
    output.writeFieldBegin('valueList', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I64, this.valueList.length);
    for (var iter141 in this.valueList)
    {
      if (this.valueList.hasOwnProperty(iter141))
      {
        iter141 = this.valueList[iter141];
        output.writeI64(iter141);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoSet_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
proxy_test_ao_testEchoSet_result.prototype = {};
proxy_test_ao_testEchoSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size142 = 0;
        var _rtmp3146;
        this.success = [];
        var _etype145 = 0;
        _rtmp3146 = input.readSetBegin();
        _etype145 = _rtmp3146.etype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var elem148 = null;
          elem148 = input.readI64().value;
          this.success.push(elem148);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoSet_result.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoSet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.I64, this.success.length);
    for (var iter149 in this.success)
    {
      if (this.success.hasOwnProperty(iter149))
      {
        iter149 = this.success[iter149];
        output.writeI64(iter149);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoMap_args = function(args) {
  this.platformArgs = null;
  this.mapValue = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.mapValue !== undefined) {
      this.mapValue = args.mapValue;
    }
  }
};
proxy_test_ao_testEchoMap_args.prototype = {};
proxy_test_ao_testEchoMap_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size150 = 0;
        var _rtmp3154;
        this.mapValue = {};
        var _ktype151 = 0;
        var _vtype152 = 0;
        _rtmp3154 = input.readMapBegin();
        _ktype151 = _rtmp3154.ktype;
        _vtype152 = _rtmp3154.vtype;
        _size150 = _rtmp3154.size;
        for (var _i155 = 0; _i155 < _size150; ++_i155)
        {
          if (_i155 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key156 = null;
          var val157 = null;
          key156 = input.readI64().value;
          val157 = input.readString().value;
          this.mapValue[key156] = val157;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoMap_args.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoMap_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.mapValue !== null && this.mapValue !== undefined) {
    output.writeFieldBegin('mapValue', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.mapValue));
    for (var kiter158 in this.mapValue)
    {
      if (this.mapValue.hasOwnProperty(kiter158))
      {
        var viter159 = this.mapValue[kiter158];
        output.writeI64(kiter158);
        output.writeString(viter159);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoMap_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
proxy_test_ao_testEchoMap_result.prototype = {};
proxy_test_ao_testEchoMap_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size160 = 0;
        var _rtmp3164;
        this.success = {};
        var _ktype161 = 0;
        var _vtype162 = 0;
        _rtmp3164 = input.readMapBegin();
        _ktype161 = _rtmp3164.ktype;
        _vtype162 = _rtmp3164.vtype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          if (_i165 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key166 = null;
          var val167 = null;
          key166 = input.readI64().value;
          val167 = input.readString().value;
          this.success[key166] = val167;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoMap_result.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoMap_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter168 in this.success)
    {
      if (this.success.hasOwnProperty(kiter168))
      {
        var viter169 = this.success[kiter168];
        output.writeI64(kiter168);
        output.writeString(viter169);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoTypesList_args = function(args) {
  this.platformArgs = null;
  this.types = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.types !== undefined) {
      this.types = args.types;
    }
  }
};
proxy_test_ao_testEchoTypesList_args.prototype = {};
proxy_test_ao_testEchoTypesList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size170 = 0;
        var _rtmp3174;
        this.types = [];
        var _etype173 = 0;
        _rtmp3174 = input.readListBegin();
        _etype173 = _rtmp3174.etype;
        _size170 = _rtmp3174.size;
        for (var _i175 = 0; _i175 < _size170; ++_i175)
        {
          var elem176 = null;
          elem176 = new EchoTypes();
          elem176.read(input);
          this.types.push(elem176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoTypesList_args.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoTypesList_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.types.length);
    for (var iter177 in this.types)
    {
      if (this.types.hasOwnProperty(iter177))
      {
        iter177 = this.types[iter177];
        iter177.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_ao_testEchoTypesList_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
proxy_test_ao_testEchoTypesList_result.prototype = {};
proxy_test_ao_testEchoTypesList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.success = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = new EchoTypes();
          elem184.read(input);
          this.success.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

proxy_test_ao_testEchoTypesList_result.prototype.write = function(output) {
  output.writeStructBegin('proxy_test_ao_testEchoTypesList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter185 in this.success)
    {
      if (this.success.hasOwnProperty(iter185))
      {
        iter185 = this.success[iter185];
        iter185.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

proxy_test_aoClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
proxy_test_aoClient.prototype = {};
proxy_test_aoClient.prototype.testEcho = function(platformArgs, content) {
  this.send_testEcho(platformArgs, content);
  return this.recv_testEcho();
};

proxy_test_aoClient.prototype.send_testEcho = function(platformArgs, content) {
  this.output.writeMessageBegin('testEcho', Thrift.MessageType.CALL, this.seqid);
  var args = new proxy_test_ao_testEcho_args();
  args.platformArgs = platformArgs;
  args.content = content;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

proxy_test_aoClient.prototype.recv_testEcho = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new proxy_test_ao_testEcho_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'testEcho failed: unknown result';
};
proxy_test_aoClient.prototype.testEchoList = function(platformArgs, contentList) {
  this.send_testEchoList(platformArgs, contentList);
  return this.recv_testEchoList();
};

proxy_test_aoClient.prototype.send_testEchoList = function(platformArgs, contentList) {
  this.output.writeMessageBegin('testEchoList', Thrift.MessageType.CALL, this.seqid);
  var args = new proxy_test_ao_testEchoList_args();
  args.platformArgs = platformArgs;
  args.contentList = contentList;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

proxy_test_aoClient.prototype.recv_testEchoList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new proxy_test_ao_testEchoList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'testEchoList failed: unknown result';
};
proxy_test_aoClient.prototype.testEchoListStruct = function(platformArgs, contentList) {
  this.send_testEchoListStruct(platformArgs, contentList);
  return this.recv_testEchoListStruct();
};

proxy_test_aoClient.prototype.send_testEchoListStruct = function(platformArgs, contentList) {
  this.output.writeMessageBegin('testEchoListStruct', Thrift.MessageType.CALL, this.seqid);
  var args = new proxy_test_ao_testEchoListStruct_args();
  args.platformArgs = platformArgs;
  args.contentList = contentList;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

proxy_test_aoClient.prototype.recv_testEchoListStruct = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new proxy_test_ao_testEchoListStruct_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'testEchoListStruct failed: unknown result';
};
proxy_test_aoClient.prototype.echoTypes = function(platformArgs, types, throw_action) {
  this.send_echoTypes(platformArgs, types, throw_action);
  return this.recv_echoTypes();
};

proxy_test_aoClient.prototype.send_echoTypes = function(platformArgs, types, throw_action) {
  this.output.writeMessageBegin('echoTypes', Thrift.MessageType.CALL, this.seqid);
  var args = new proxy_test_ao_echoTypes_args();
  args.platformArgs = platformArgs;
  args.types = types;
  args.throw_action = throw_action;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

proxy_test_aoClient.prototype.recv_echoTypes = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new proxy_test_ao_echoTypes_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'echoTypes failed: unknown result';
};
proxy_test_aoClient.prototype.testEchoSet = function(platformArgs, valueList) {
  this.send_testEchoSet(platformArgs, valueList);
  return this.recv_testEchoSet();
};

proxy_test_aoClient.prototype.send_testEchoSet = function(platformArgs, valueList) {
  this.output.writeMessageBegin('testEchoSet', Thrift.MessageType.CALL, this.seqid);
  var args = new proxy_test_ao_testEchoSet_args();
  args.platformArgs = platformArgs;
  args.valueList = valueList;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

proxy_test_aoClient.prototype.recv_testEchoSet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new proxy_test_ao_testEchoSet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'testEchoSet failed: unknown result';
};
proxy_test_aoClient.prototype.testEchoMap = function(platformArgs, mapValue) {
  this.send_testEchoMap(platformArgs, mapValue);
  return this.recv_testEchoMap();
};

proxy_test_aoClient.prototype.send_testEchoMap = function(platformArgs, mapValue) {
  this.output.writeMessageBegin('testEchoMap', Thrift.MessageType.CALL, this.seqid);
  var args = new proxy_test_ao_testEchoMap_args();
  args.platformArgs = platformArgs;
  args.mapValue = mapValue;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

proxy_test_aoClient.prototype.recv_testEchoMap = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new proxy_test_ao_testEchoMap_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'testEchoMap failed: unknown result';
};
proxy_test_aoClient.prototype.testEchoTypesList = function(platformArgs, types) {
  this.send_testEchoTypesList(platformArgs, types);
  return this.recv_testEchoTypesList();
};

proxy_test_aoClient.prototype.send_testEchoTypesList = function(platformArgs, types) {
  this.output.writeMessageBegin('testEchoTypesList', Thrift.MessageType.CALL, this.seqid);
  var args = new proxy_test_ao_testEchoTypesList_args();
  args.platformArgs = platformArgs;
  args.types = types;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

proxy_test_aoClient.prototype.recv_testEchoTypesList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new proxy_test_ao_testEchoTypesList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'testEchoTypesList failed: unknown result';
};
