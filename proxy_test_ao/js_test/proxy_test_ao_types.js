//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


EchoListResult = function(args) {
  this.contentList = null;
  if (args) {
    if (args.contentList !== undefined) {
      this.contentList = args.contentList;
    }
  }
};
EchoListResult.prototype = {};
EchoListResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.contentList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.contentList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EchoListResult.prototype.write = function(output) {
  output.writeStructBegin('EchoListResult');
  if (this.contentList !== null && this.contentList !== undefined) {
    output.writeFieldBegin('contentList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.contentList.length);
    for (var iter7 in this.contentList)
    {
      if (this.contentList.hasOwnProperty(iter7))
      {
        iter7 = this.contentList[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EchoTypes = function(args) {
  this.bool_field = null;
  this.string_field = null;
  this.int64_field = null;
  this.int32_field = null;
  this.double_field = null;
  this.list_field = null;
  this.map_field = null;
  this.set_field = null;
  this.struct_field = null;
  if (args) {
    if (args.bool_field !== undefined) {
      this.bool_field = args.bool_field;
    }
    if (args.string_field !== undefined) {
      this.string_field = args.string_field;
    }
    if (args.int64_field !== undefined) {
      this.int64_field = args.int64_field;
    }
    if (args.int32_field !== undefined) {
      this.int32_field = args.int32_field;
    }
    if (args.double_field !== undefined) {
      this.double_field = args.double_field;
    }
    if (args.list_field !== undefined) {
      this.list_field = args.list_field;
    }
    if (args.map_field !== undefined) {
      this.map_field = args.map_field;
    }
    if (args.set_field !== undefined) {
      this.set_field = args.set_field;
    }
    if (args.struct_field !== undefined) {
      this.struct_field = args.struct_field;
    }
  }
};
EchoTypes.prototype = {};
EchoTypes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.bool_field = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.string_field = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.int64_field = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.int32_field = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.double_field = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.list_field = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.list_field.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size15 = 0;
        var _rtmp319;
        this.map_field = {};
        var _ktype16 = 0;
        var _vtype17 = 0;
        _rtmp319 = input.readMapBegin();
        _ktype16 = _rtmp319.ktype;
        _vtype17 = _rtmp319.vtype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          if (_i20 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key21 = null;
          var val22 = null;
          key21 = input.readString().value;
          val22 = input.readString().value;
          this.map_field[key21] = val22;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size23 = 0;
        var _rtmp327;
        this.set_field = [];
        var _etype26 = 0;
        _rtmp327 = input.readSetBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readString().value;
          this.set_field.push(elem29);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.struct_field = new EchoListResult();
        this.struct_field.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EchoTypes.prototype.write = function(output) {
  output.writeStructBegin('EchoTypes');
  if (this.bool_field !== null && this.bool_field !== undefined) {
    output.writeFieldBegin('bool_field', Thrift.Type.BOOL, 1);
    output.writeBool(this.bool_field);
    output.writeFieldEnd();
  }
  if (this.string_field !== null && this.string_field !== undefined) {
    output.writeFieldBegin('string_field', Thrift.Type.STRING, 2);
    output.writeString(this.string_field);
    output.writeFieldEnd();
  }
  if (this.int64_field !== null && this.int64_field !== undefined) {
    output.writeFieldBegin('int64_field', Thrift.Type.I64, 3);
    output.writeI64(this.int64_field);
    output.writeFieldEnd();
  }
  if (this.int32_field !== null && this.int32_field !== undefined) {
    output.writeFieldBegin('int32_field', Thrift.Type.I32, 4);
    output.writeI32(this.int32_field);
    output.writeFieldEnd();
  }
  if (this.double_field !== null && this.double_field !== undefined) {
    output.writeFieldBegin('double_field', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.double_field);
    output.writeFieldEnd();
  }
  if (this.list_field !== null && this.list_field !== undefined) {
    output.writeFieldBegin('list_field', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.list_field.length);
    for (var iter30 in this.list_field)
    {
      if (this.list_field.hasOwnProperty(iter30))
      {
        iter30 = this.list_field[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.map_field !== null && this.map_field !== undefined) {
    output.writeFieldBegin('map_field', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.map_field));
    for (var kiter31 in this.map_field)
    {
      if (this.map_field.hasOwnProperty(kiter31))
      {
        var viter32 = this.map_field[kiter31];
        output.writeString(kiter31);
        output.writeString(viter32);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.set_field !== null && this.set_field !== undefined) {
    output.writeFieldBegin('set_field', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.STRING, this.set_field.length);
    for (var iter33 in this.set_field)
    {
      if (this.set_field.hasOwnProperty(iter33))
      {
        iter33 = this.set_field[iter33];
        output.writeString(iter33);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.struct_field !== null && this.struct_field !== undefined) {
    output.writeFieldBegin('struct_field', Thrift.Type.STRUCT, 9);
    this.struct_field.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

