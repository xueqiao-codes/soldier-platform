#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RouteType:
  Mod = 1
  RR = 2
  XL = 3

  _VALUES_TO_NAMES = {
    1: "Mod",
    2: "RR",
    3: "XL",
  }

  _NAMES_TO_VALUES = {
    "Mod": 1,
    "RR": 2,
    "XL": 3,
  }


class RouteInfo:
  """
  Attributes:
   - serviceKey
   - serviceName
   - ipList
   - desc
   - createTimestamp
   - lastmodifyTimestamp
   - routeType
   - serviceAdminList
   - idlRelativePath
   - relatedScreenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'serviceKey', None, None, ), # 1
    (2, TType.STRING, 'serviceName', None, None, ), # 2
    (3, TType.LIST, 'ipList', (TType.I64,None), None, ), # 3
    (4, TType.STRING, 'desc', None, None, ), # 4
    (5, TType.I32, 'createTimestamp', None, None, ), # 5
    (6, TType.I32, 'lastmodifyTimestamp', None, None, ), # 6
    (7, TType.I32, 'routeType', None, None, ), # 7
    (8, TType.LIST, 'serviceAdminList', (TType.STRING,None), None, ), # 8
    (9, TType.STRING, 'idlRelativePath', None, None, ), # 9
    (10, TType.STRING, 'relatedScreenId', None, None, ), # 10
  )

  def __init__(self, serviceKey=None, serviceName=None, ipList=None, desc=None, createTimestamp=None, lastmodifyTimestamp=None, routeType=None, serviceAdminList=None, idlRelativePath=None, relatedScreenId=None,):
    self.serviceKey = serviceKey
    self.serviceName = serviceName
    self.ipList = ipList
    self.desc = desc
    self.createTimestamp = createTimestamp
    self.lastmodifyTimestamp = lastmodifyTimestamp
    self.routeType = routeType
    self.serviceAdminList = serviceAdminList
    self.idlRelativePath = idlRelativePath
    self.relatedScreenId = relatedScreenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.serviceKey = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serviceName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.ipList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.ipList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.desc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.createTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.lastmodifyTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.routeType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.serviceAdminList = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.serviceAdminList.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.idlRelativePath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.relatedScreenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RouteInfo')
    if self.serviceKey is not None:
      oprot.writeFieldBegin('serviceKey', TType.I32, 1)
      oprot.writeI32(self.serviceKey)
      oprot.writeFieldEnd()
    if self.serviceName is not None:
      oprot.writeFieldBegin('serviceName', TType.STRING, 2)
      oprot.writeString(self.serviceName)
      oprot.writeFieldEnd()
    if self.ipList is not None:
      oprot.writeFieldBegin('ipList', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.ipList))
      for iter12 in self.ipList:
        oprot.writeI64(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 4)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I32, 5)
      oprot.writeI32(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestamp is not None:
      oprot.writeFieldBegin('lastmodifyTimestamp', TType.I32, 6)
      oprot.writeI32(self.lastmodifyTimestamp)
      oprot.writeFieldEnd()
    if self.routeType is not None:
      oprot.writeFieldBegin('routeType', TType.I32, 7)
      oprot.writeI32(self.routeType)
      oprot.writeFieldEnd()
    if self.serviceAdminList is not None:
      oprot.writeFieldBegin('serviceAdminList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.serviceAdminList))
      for iter13 in self.serviceAdminList:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.idlRelativePath is not None:
      oprot.writeFieldBegin('idlRelativePath', TType.STRING, 9)
      oprot.writeString(self.idlRelativePath)
      oprot.writeFieldEnd()
    if self.relatedScreenId is not None:
      oprot.writeFieldBegin('relatedScreenId', TType.STRING, 10)
      oprot.writeString(self.relatedScreenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.serviceKey is None:
      raise TProtocol.TProtocolException(message='Required field serviceKey is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryRouteOption:
  """
  Attributes:
   - serviceKey
   - serviceName
   - ip
   - desc
   - serviceAdmin
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'serviceKey', None, None, ), # 1
    (2, TType.STRING, 'serviceName', None, None, ), # 2
    (3, TType.STRING, 'ip', None, None, ), # 3
    (4, TType.STRING, 'desc', None, None, ), # 4
    (5, TType.STRING, 'serviceAdmin', None, None, ), # 5
  )

  def __init__(self, serviceKey=None, serviceName=None, ip=None, desc=None, serviceAdmin=None,):
    self.serviceKey = serviceKey
    self.serviceName = serviceName
    self.ip = ip
    self.desc = desc
    self.serviceAdmin = serviceAdmin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.serviceKey = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serviceName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.desc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.serviceAdmin = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryRouteOption')
    if self.serviceKey is not None:
      oprot.writeFieldBegin('serviceKey', TType.I32, 1)
      oprot.writeI32(self.serviceKey)
      oprot.writeFieldEnd()
    if self.serviceName is not None:
      oprot.writeFieldBegin('serviceName', TType.STRING, 2)
      oprot.writeString(self.serviceName)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 3)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 4)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    if self.serviceAdmin is not None:
      oprot.writeFieldBegin('serviceAdmin', TType.STRING, 5)
      oprot.writeString(self.serviceAdmin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RouteInfoList:
  """
  Attributes:
   - totalCount
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(RouteInfo, RouteInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, resultList=None,):
    self.totalCount = totalCount
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = RouteInfo()
            _elem19.read(iprot)
            self.resultList.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RouteInfoList')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter20 in self.resultList:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SimpleRouteInfo:
  """
  Attributes:
   - serviceKey
   - ipList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'serviceKey', None, None, ), # 1
    (2, TType.LIST, 'ipList', (TType.I64,None), None, ), # 2
  )

  def __init__(self, serviceKey=None, ipList=None,):
    self.serviceKey = serviceKey
    self.ipList = ipList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.serviceKey = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ipList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI64();
            self.ipList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SimpleRouteInfo')
    if self.serviceKey is not None:
      oprot.writeFieldBegin('serviceKey', TType.I32, 1)
      oprot.writeI32(self.serviceKey)
      oprot.writeFieldEnd()
    if self.ipList is not None:
      oprot.writeFieldBegin('ipList', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.ipList))
      for iter27 in self.ipList:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.serviceKey is None:
      raise TProtocol.TProtocolException(message='Required field serviceKey is unset!')
    if self.ipList is None:
      raise TProtocol.TProtocolException(message='Required field ipList is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
