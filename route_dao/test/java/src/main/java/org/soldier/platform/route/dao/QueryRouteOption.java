/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.route.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryRouteOption implements org.apache.thrift.TBase<QueryRouteOption, QueryRouteOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryRouteOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryRouteOption");

  private static final org.apache.thrift.protocol.TField SERVICE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceKey", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SERVICE_ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceAdmin", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryRouteOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryRouteOptionTupleSchemeFactory());
  }

  public int serviceKey; // optional
  public String serviceName; // optional
  public String ip; // optional
  public String desc; // optional
  public String serviceAdmin; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_KEY((short)1, "serviceKey"),
    SERVICE_NAME((short)2, "serviceName"),
    IP((short)3, "ip"),
    DESC((short)4, "desc"),
    SERVICE_ADMIN((short)5, "serviceAdmin");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_KEY
          return SERVICE_KEY;
        case 2: // SERVICE_NAME
          return SERVICE_NAME;
        case 3: // IP
          return IP;
        case 4: // DESC
          return DESC;
        case 5: // SERVICE_ADMIN
          return SERVICE_ADMIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVICEKEY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SERVICE_KEY,_Fields.SERVICE_NAME,_Fields.IP,_Fields.DESC,_Fields.SERVICE_ADMIN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_KEY, new org.apache.thrift.meta_data.FieldMetaData("serviceKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_ADMIN, new org.apache.thrift.meta_data.FieldMetaData("serviceAdmin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryRouteOption.class, metaDataMap);
  }

  public QueryRouteOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryRouteOption(QueryRouteOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.serviceKey = other.serviceKey;
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetServiceAdmin()) {
      this.serviceAdmin = other.serviceAdmin;
    }
  }

  public QueryRouteOption deepCopy() {
    return new QueryRouteOption(this);
  }

  @Override
  public void clear() {
    setServiceKeyIsSet(false);
    this.serviceKey = 0;
    this.serviceName = null;
    this.ip = null;
    this.desc = null;
    this.serviceAdmin = null;
  }

  public int getServiceKey() {
    return this.serviceKey;
  }

  public QueryRouteOption setServiceKey(int serviceKey) {
    this.serviceKey = serviceKey;
    setServiceKeyIsSet(true);
    return this;
  }

  public void unsetServiceKey() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICEKEY_ISSET_ID);
  }

  /** Returns true if field serviceKey is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceKey() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVICEKEY_ISSET_ID);
  }

  public void setServiceKeyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICEKEY_ISSET_ID, value);
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public QueryRouteOption setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public QueryRouteOption setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public QueryRouteOption setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getServiceAdmin() {
    return this.serviceAdmin;
  }

  public QueryRouteOption setServiceAdmin(String serviceAdmin) {
    this.serviceAdmin = serviceAdmin;
    return this;
  }

  public void unsetServiceAdmin() {
    this.serviceAdmin = null;
  }

  /** Returns true if field serviceAdmin is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceAdmin() {
    return this.serviceAdmin != null;
  }

  public void setServiceAdminIsSet(boolean value) {
    if (!value) {
      this.serviceAdmin = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_KEY:
      if (value == null) {
        unsetServiceKey();
      } else {
        setServiceKey((Integer)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case SERVICE_ADMIN:
      if (value == null) {
        unsetServiceAdmin();
      } else {
        setServiceAdmin((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_KEY:
      return Integer.valueOf(getServiceKey());

    case SERVICE_NAME:
      return getServiceName();

    case IP:
      return getIp();

    case DESC:
      return getDesc();

    case SERVICE_ADMIN:
      return getServiceAdmin();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_KEY:
      return isSetServiceKey();
    case SERVICE_NAME:
      return isSetServiceName();
    case IP:
      return isSetIp();
    case DESC:
      return isSetDesc();
    case SERVICE_ADMIN:
      return isSetServiceAdmin();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryRouteOption)
      return this.equals((QueryRouteOption)that);
    return false;
  }

  public boolean equals(QueryRouteOption that) {
    if (that == null)
      return false;

    boolean this_present_serviceKey = true && this.isSetServiceKey();
    boolean that_present_serviceKey = true && that.isSetServiceKey();
    if (this_present_serviceKey || that_present_serviceKey) {
      if (!(this_present_serviceKey && that_present_serviceKey))
        return false;
      if (this.serviceKey != that.serviceKey)
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_serviceAdmin = true && this.isSetServiceAdmin();
    boolean that_present_serviceAdmin = true && that.isSetServiceAdmin();
    if (this_present_serviceAdmin || that_present_serviceAdmin) {
      if (!(this_present_serviceAdmin && that_present_serviceAdmin))
        return false;
      if (!this.serviceAdmin.equals(that.serviceAdmin))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryRouteOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceKey()).compareTo(other.isSetServiceKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceKey, other.serviceKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceAdmin()).compareTo(other.isSetServiceAdmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceAdmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceAdmin, other.serviceAdmin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryRouteOption(");
    boolean first = true;

    if (isSetServiceKey()) {
      sb.append("serviceKey:");
      sb.append(this.serviceKey);
      first = false;
    }
    if (isSetServiceName()) {
      if (!first) sb.append(", ");
      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
    }
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetServiceAdmin()) {
      if (!first) sb.append(", ");
      sb.append("serviceAdmin:");
      if (this.serviceAdmin == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceAdmin);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryRouteOptionStandardSchemeFactory implements SchemeFactory {
    public QueryRouteOptionStandardScheme getScheme() {
      return new QueryRouteOptionStandardScheme();
    }
  }

  private static class QueryRouteOptionStandardScheme extends StandardScheme<QueryRouteOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryRouteOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceKey = iprot.readI32();
              struct.setServiceKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVICE_ADMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceAdmin = iprot.readString();
              struct.setServiceAdminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryRouteOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetServiceKey()) {
        oprot.writeFieldBegin(SERVICE_KEY_FIELD_DESC);
        oprot.writeI32(struct.serviceKey);
        oprot.writeFieldEnd();
      }
      if (struct.serviceName != null) {
        if (struct.isSetServiceName()) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.serviceAdmin != null) {
        if (struct.isSetServiceAdmin()) {
          oprot.writeFieldBegin(SERVICE_ADMIN_FIELD_DESC);
          oprot.writeString(struct.serviceAdmin);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryRouteOptionTupleSchemeFactory implements SchemeFactory {
    public QueryRouteOptionTupleScheme getScheme() {
      return new QueryRouteOptionTupleScheme();
    }
  }

  private static class QueryRouteOptionTupleScheme extends TupleScheme<QueryRouteOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryRouteOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetServiceKey()) {
        optionals.set(0);
      }
      if (struct.isSetServiceName()) {
        optionals.set(1);
      }
      if (struct.isSetIp()) {
        optionals.set(2);
      }
      if (struct.isSetDesc()) {
        optionals.set(3);
      }
      if (struct.isSetServiceAdmin()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetServiceKey()) {
        oprot.writeI32(struct.serviceKey);
      }
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetServiceAdmin()) {
        oprot.writeString(struct.serviceAdmin);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryRouteOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.serviceKey = iprot.readI32();
        struct.setServiceKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.serviceAdmin = iprot.readString();
        struct.setServiceAdminIsSet(true);
      }
    }
  }

}

