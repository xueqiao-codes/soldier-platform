/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.machine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Machine implements org.apache.thrift.TBase<Machine, Machine._Fields>, java.io.Serializable, Cloneable, Comparable<Machine> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Machine");

  private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_INNER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostInnerIP", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("hostDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HOST_ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("hostAdmin", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ROOT_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("rootPassword", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MACHINE_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("machineProperties", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField RELATED_SCREEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedScreenId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField RELATED_SCREEN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedScreenURL", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MachineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MachineTupleSchemeFactory());
  }

  public String hostName; // optional
  public String hostInnerIP; // optional
  public String hostDesc; // optional
  public String hostAdmin; // optional
  public String rootPassword; // optional
  public Map<String,String> machineProperties; // optional
  public String relatedScreenId; // optional
  public int createTimestamp; // optional
  public int lastModifyTimestamp; // optional
  public String relatedScreenURL; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST_NAME((short)1, "hostName"),
    HOST_INNER_IP((short)2, "hostInnerIP"),
    HOST_DESC((short)3, "hostDesc"),
    HOST_ADMIN((short)4, "hostAdmin"),
    ROOT_PASSWORD((short)5, "rootPassword"),
    MACHINE_PROPERTIES((short)6, "machineProperties"),
    RELATED_SCREEN_ID((short)7, "relatedScreenId"),
    CREATE_TIMESTAMP((short)10, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)11, "lastModifyTimestamp"),
    RELATED_SCREEN_URL((short)12, "relatedScreenURL");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST_NAME
          return HOST_NAME;
        case 2: // HOST_INNER_IP
          return HOST_INNER_IP;
        case 3: // HOST_DESC
          return HOST_DESC;
        case 4: // HOST_ADMIN
          return HOST_ADMIN;
        case 5: // ROOT_PASSWORD
          return ROOT_PASSWORD;
        case 6: // MACHINE_PROPERTIES
          return MACHINE_PROPERTIES;
        case 7: // RELATED_SCREEN_ID
          return RELATED_SCREEN_ID;
        case 10: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 11: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        case 12: // RELATED_SCREEN_URL
          return RELATED_SCREEN_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIMESTAMP_ISSET_ID = 0;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HOST_NAME,_Fields.HOST_INNER_IP,_Fields.HOST_DESC,_Fields.HOST_ADMIN,_Fields.ROOT_PASSWORD,_Fields.MACHINE_PROPERTIES,_Fields.RELATED_SCREEN_ID,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP,_Fields.RELATED_SCREEN_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_INNER_IP, new org.apache.thrift.meta_data.FieldMetaData("hostInnerIP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_DESC, new org.apache.thrift.meta_data.FieldMetaData("hostDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_ADMIN, new org.apache.thrift.meta_data.FieldMetaData("hostAdmin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROOT_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("rootPassword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("machineProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RELATED_SCREEN_ID, new org.apache.thrift.meta_data.FieldMetaData("relatedScreenId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELATED_SCREEN_URL, new org.apache.thrift.meta_data.FieldMetaData("relatedScreenURL", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Machine.class, metaDataMap);
  }

  public Machine() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Machine(Machine other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostName()) {
      this.hostName = other.hostName;
    }
    if (other.isSetHostInnerIP()) {
      this.hostInnerIP = other.hostInnerIP;
    }
    if (other.isSetHostDesc()) {
      this.hostDesc = other.hostDesc;
    }
    if (other.isSetHostAdmin()) {
      this.hostAdmin = other.hostAdmin;
    }
    if (other.isSetRootPassword()) {
      this.rootPassword = other.rootPassword;
    }
    if (other.isSetMachineProperties()) {
      Map<String,String> __this__machineProperties = new HashMap<String,String>(other.machineProperties);
      this.machineProperties = __this__machineProperties;
    }
    if (other.isSetRelatedScreenId()) {
      this.relatedScreenId = other.relatedScreenId;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
    if (other.isSetRelatedScreenURL()) {
      this.relatedScreenURL = other.relatedScreenURL;
    }
  }

  public Machine deepCopy() {
    return new Machine(this);
  }

  @Override
  public void clear() {
    this.hostName = null;
    this.hostInnerIP = null;
    this.hostDesc = null;
    this.hostAdmin = null;
    this.rootPassword = null;
    this.machineProperties = null;
    this.relatedScreenId = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
    this.relatedScreenURL = null;
  }

  public String getHostName() {
    return this.hostName;
  }

  public Machine setHostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  public void unsetHostName() {
    this.hostName = null;
  }

  /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
  public boolean isSetHostName() {
    return this.hostName != null;
  }

  public void setHostNameIsSet(boolean value) {
    if (!value) {
      this.hostName = null;
    }
  }

  public String getHostInnerIP() {
    return this.hostInnerIP;
  }

  public Machine setHostInnerIP(String hostInnerIP) {
    this.hostInnerIP = hostInnerIP;
    return this;
  }

  public void unsetHostInnerIP() {
    this.hostInnerIP = null;
  }

  /** Returns true if field hostInnerIP is set (has been assigned a value) and false otherwise */
  public boolean isSetHostInnerIP() {
    return this.hostInnerIP != null;
  }

  public void setHostInnerIPIsSet(boolean value) {
    if (!value) {
      this.hostInnerIP = null;
    }
  }

  public String getHostDesc() {
    return this.hostDesc;
  }

  public Machine setHostDesc(String hostDesc) {
    this.hostDesc = hostDesc;
    return this;
  }

  public void unsetHostDesc() {
    this.hostDesc = null;
  }

  /** Returns true if field hostDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetHostDesc() {
    return this.hostDesc != null;
  }

  public void setHostDescIsSet(boolean value) {
    if (!value) {
      this.hostDesc = null;
    }
  }

  public String getHostAdmin() {
    return this.hostAdmin;
  }

  public Machine setHostAdmin(String hostAdmin) {
    this.hostAdmin = hostAdmin;
    return this;
  }

  public void unsetHostAdmin() {
    this.hostAdmin = null;
  }

  /** Returns true if field hostAdmin is set (has been assigned a value) and false otherwise */
  public boolean isSetHostAdmin() {
    return this.hostAdmin != null;
  }

  public void setHostAdminIsSet(boolean value) {
    if (!value) {
      this.hostAdmin = null;
    }
  }

  public String getRootPassword() {
    return this.rootPassword;
  }

  public Machine setRootPassword(String rootPassword) {
    this.rootPassword = rootPassword;
    return this;
  }

  public void unsetRootPassword() {
    this.rootPassword = null;
  }

  /** Returns true if field rootPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetRootPassword() {
    return this.rootPassword != null;
  }

  public void setRootPasswordIsSet(boolean value) {
    if (!value) {
      this.rootPassword = null;
    }
  }

  public int getMachinePropertiesSize() {
    return (this.machineProperties == null) ? 0 : this.machineProperties.size();
  }

  public void putToMachineProperties(String key, String val) {
    if (this.machineProperties == null) {
      this.machineProperties = new HashMap<String,String>();
    }
    this.machineProperties.put(key, val);
  }

  public Map<String,String> getMachineProperties() {
    return this.machineProperties;
  }

  public Machine setMachineProperties(Map<String,String> machineProperties) {
    this.machineProperties = machineProperties;
    return this;
  }

  public void unsetMachineProperties() {
    this.machineProperties = null;
  }

  /** Returns true if field machineProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineProperties() {
    return this.machineProperties != null;
  }

  public void setMachinePropertiesIsSet(boolean value) {
    if (!value) {
      this.machineProperties = null;
    }
  }

  public String getRelatedScreenId() {
    return this.relatedScreenId;
  }

  public Machine setRelatedScreenId(String relatedScreenId) {
    this.relatedScreenId = relatedScreenId;
    return this;
  }

  public void unsetRelatedScreenId() {
    this.relatedScreenId = null;
  }

  /** Returns true if field relatedScreenId is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedScreenId() {
    return this.relatedScreenId != null;
  }

  public void setRelatedScreenIdIsSet(boolean value) {
    if (!value) {
      this.relatedScreenId = null;
    }
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public Machine setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public Machine setLastModifyTimestamp(int lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public String getRelatedScreenURL() {
    return this.relatedScreenURL;
  }

  public Machine setRelatedScreenURL(String relatedScreenURL) {
    this.relatedScreenURL = relatedScreenURL;
    return this;
  }

  public void unsetRelatedScreenURL() {
    this.relatedScreenURL = null;
  }

  /** Returns true if field relatedScreenURL is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedScreenURL() {
    return this.relatedScreenURL != null;
  }

  public void setRelatedScreenURLIsSet(boolean value) {
    if (!value) {
      this.relatedScreenURL = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST_NAME:
      if (value == null) {
        unsetHostName();
      } else {
        setHostName((String)value);
      }
      break;

    case HOST_INNER_IP:
      if (value == null) {
        unsetHostInnerIP();
      } else {
        setHostInnerIP((String)value);
      }
      break;

    case HOST_DESC:
      if (value == null) {
        unsetHostDesc();
      } else {
        setHostDesc((String)value);
      }
      break;

    case HOST_ADMIN:
      if (value == null) {
        unsetHostAdmin();
      } else {
        setHostAdmin((String)value);
      }
      break;

    case ROOT_PASSWORD:
      if (value == null) {
        unsetRootPassword();
      } else {
        setRootPassword((String)value);
      }
      break;

    case MACHINE_PROPERTIES:
      if (value == null) {
        unsetMachineProperties();
      } else {
        setMachineProperties((Map<String,String>)value);
      }
      break;

    case RELATED_SCREEN_ID:
      if (value == null) {
        unsetRelatedScreenId();
      } else {
        setRelatedScreenId((String)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Integer)value);
      }
      break;

    case RELATED_SCREEN_URL:
      if (value == null) {
        unsetRelatedScreenURL();
      } else {
        setRelatedScreenURL((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST_NAME:
      return getHostName();

    case HOST_INNER_IP:
      return getHostInnerIP();

    case HOST_DESC:
      return getHostDesc();

    case HOST_ADMIN:
      return getHostAdmin();

    case ROOT_PASSWORD:
      return getRootPassword();

    case MACHINE_PROPERTIES:
      return getMachineProperties();

    case RELATED_SCREEN_ID:
      return getRelatedScreenId();

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Integer.valueOf(getLastModifyTimestamp());

    case RELATED_SCREEN_URL:
      return getRelatedScreenURL();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST_NAME:
      return isSetHostName();
    case HOST_INNER_IP:
      return isSetHostInnerIP();
    case HOST_DESC:
      return isSetHostDesc();
    case HOST_ADMIN:
      return isSetHostAdmin();
    case ROOT_PASSWORD:
      return isSetRootPassword();
    case MACHINE_PROPERTIES:
      return isSetMachineProperties();
    case RELATED_SCREEN_ID:
      return isSetRelatedScreenId();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    case RELATED_SCREEN_URL:
      return isSetRelatedScreenURL();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Machine)
      return this.equals((Machine)that);
    return false;
  }

  public boolean equals(Machine that) {
    if (that == null)
      return false;

    boolean this_present_hostName = true && this.isSetHostName();
    boolean that_present_hostName = true && that.isSetHostName();
    if (this_present_hostName || that_present_hostName) {
      if (!(this_present_hostName && that_present_hostName))
        return false;
      if (!this.hostName.equals(that.hostName))
        return false;
    }

    boolean this_present_hostInnerIP = true && this.isSetHostInnerIP();
    boolean that_present_hostInnerIP = true && that.isSetHostInnerIP();
    if (this_present_hostInnerIP || that_present_hostInnerIP) {
      if (!(this_present_hostInnerIP && that_present_hostInnerIP))
        return false;
      if (!this.hostInnerIP.equals(that.hostInnerIP))
        return false;
    }

    boolean this_present_hostDesc = true && this.isSetHostDesc();
    boolean that_present_hostDesc = true && that.isSetHostDesc();
    if (this_present_hostDesc || that_present_hostDesc) {
      if (!(this_present_hostDesc && that_present_hostDesc))
        return false;
      if (!this.hostDesc.equals(that.hostDesc))
        return false;
    }

    boolean this_present_hostAdmin = true && this.isSetHostAdmin();
    boolean that_present_hostAdmin = true && that.isSetHostAdmin();
    if (this_present_hostAdmin || that_present_hostAdmin) {
      if (!(this_present_hostAdmin && that_present_hostAdmin))
        return false;
      if (!this.hostAdmin.equals(that.hostAdmin))
        return false;
    }

    boolean this_present_rootPassword = true && this.isSetRootPassword();
    boolean that_present_rootPassword = true && that.isSetRootPassword();
    if (this_present_rootPassword || that_present_rootPassword) {
      if (!(this_present_rootPassword && that_present_rootPassword))
        return false;
      if (!this.rootPassword.equals(that.rootPassword))
        return false;
    }

    boolean this_present_machineProperties = true && this.isSetMachineProperties();
    boolean that_present_machineProperties = true && that.isSetMachineProperties();
    if (this_present_machineProperties || that_present_machineProperties) {
      if (!(this_present_machineProperties && that_present_machineProperties))
        return false;
      if (!this.machineProperties.equals(that.machineProperties))
        return false;
    }

    boolean this_present_relatedScreenId = true && this.isSetRelatedScreenId();
    boolean that_present_relatedScreenId = true && that.isSetRelatedScreenId();
    if (this_present_relatedScreenId || that_present_relatedScreenId) {
      if (!(this_present_relatedScreenId && that_present_relatedScreenId))
        return false;
      if (!this.relatedScreenId.equals(that.relatedScreenId))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    boolean this_present_relatedScreenURL = true && this.isSetRelatedScreenURL();
    boolean that_present_relatedScreenURL = true && that.isSetRelatedScreenURL();
    if (this_present_relatedScreenURL || that_present_relatedScreenURL) {
      if (!(this_present_relatedScreenURL && that_present_relatedScreenURL))
        return false;
      if (!this.relatedScreenURL.equals(that.relatedScreenURL))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Machine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostInnerIP()).compareTo(other.isSetHostInnerIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostInnerIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostInnerIP, other.hostInnerIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostDesc()).compareTo(other.isSetHostDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostDesc, other.hostDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostAdmin()).compareTo(other.isSetHostAdmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostAdmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostAdmin, other.hostAdmin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRootPassword()).compareTo(other.isSetRootPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootPassword, other.rootPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineProperties()).compareTo(other.isSetMachineProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineProperties, other.machineProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedScreenId()).compareTo(other.isSetRelatedScreenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedScreenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedScreenId, other.relatedScreenId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedScreenURL()).compareTo(other.isSetRelatedScreenURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedScreenURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedScreenURL, other.relatedScreenURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Machine(");
    boolean first = true;

    if (isSetHostName()) {
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
    }
    if (isSetHostInnerIP()) {
      if (!first) sb.append(", ");
      sb.append("hostInnerIP:");
      if (this.hostInnerIP == null) {
        sb.append("null");
      } else {
        sb.append(this.hostInnerIP);
      }
      first = false;
    }
    if (isSetHostDesc()) {
      if (!first) sb.append(", ");
      sb.append("hostDesc:");
      if (this.hostDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.hostDesc);
      }
      first = false;
    }
    if (isSetHostAdmin()) {
      if (!first) sb.append(", ");
      sb.append("hostAdmin:");
      if (this.hostAdmin == null) {
        sb.append("null");
      } else {
        sb.append(this.hostAdmin);
      }
      first = false;
    }
    if (isSetRootPassword()) {
      if (!first) sb.append(", ");
      sb.append("rootPassword:");
      if (this.rootPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.rootPassword);
      }
      first = false;
    }
    if (isSetMachineProperties()) {
      if (!first) sb.append(", ");
      sb.append("machineProperties:");
      if (this.machineProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.machineProperties);
      }
      first = false;
    }
    if (isSetRelatedScreenId()) {
      if (!first) sb.append(", ");
      sb.append("relatedScreenId:");
      if (this.relatedScreenId == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedScreenId);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    if (isSetRelatedScreenURL()) {
      if (!first) sb.append(", ");
      sb.append("relatedScreenURL:");
      if (this.relatedScreenURL == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedScreenURL);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MachineStandardSchemeFactory implements SchemeFactory {
    public MachineStandardScheme getScheme() {
      return new MachineStandardScheme();
    }
  }

  private static class MachineStandardScheme extends StandardScheme<Machine> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Machine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostName = iprot.readString();
              struct.setHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST_INNER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostInnerIP = iprot.readString();
              struct.setHostInnerIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostDesc = iprot.readString();
              struct.setHostDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOST_ADMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostAdmin = iprot.readString();
              struct.setHostAdminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROOT_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rootPassword = iprot.readString();
              struct.setRootPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MACHINE_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.machineProperties = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  String _val3;
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.machineProperties.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setMachinePropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RELATED_SCREEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relatedScreenId = iprot.readString();
              struct.setRelatedScreenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastModifyTimestamp = iprot.readI32();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RELATED_SCREEN_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relatedScreenURL = iprot.readString();
              struct.setRelatedScreenURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Machine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostName != null) {
        if (struct.isSetHostName()) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostInnerIP != null) {
        if (struct.isSetHostInnerIP()) {
          oprot.writeFieldBegin(HOST_INNER_IP_FIELD_DESC);
          oprot.writeString(struct.hostInnerIP);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostDesc != null) {
        if (struct.isSetHostDesc()) {
          oprot.writeFieldBegin(HOST_DESC_FIELD_DESC);
          oprot.writeString(struct.hostDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostAdmin != null) {
        if (struct.isSetHostAdmin()) {
          oprot.writeFieldBegin(HOST_ADMIN_FIELD_DESC);
          oprot.writeString(struct.hostAdmin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rootPassword != null) {
        if (struct.isSetRootPassword()) {
          oprot.writeFieldBegin(ROOT_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.rootPassword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineProperties != null) {
        if (struct.isSetMachineProperties()) {
          oprot.writeFieldBegin(MACHINE_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.machineProperties.size()));
            for (Map.Entry<String, String> _iter4 : struct.machineProperties.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.relatedScreenId != null) {
        if (struct.isSetRelatedScreenId()) {
          oprot.writeFieldBegin(RELATED_SCREEN_ID_FIELD_DESC);
          oprot.writeString(struct.relatedScreenId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.relatedScreenURL != null) {
        if (struct.isSetRelatedScreenURL()) {
          oprot.writeFieldBegin(RELATED_SCREEN_URL_FIELD_DESC);
          oprot.writeString(struct.relatedScreenURL);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MachineTupleSchemeFactory implements SchemeFactory {
    public MachineTupleScheme getScheme() {
      return new MachineTupleScheme();
    }
  }

  private static class MachineTupleScheme extends TupleScheme<Machine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Machine struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHostName()) {
        optionals.set(0);
      }
      if (struct.isSetHostInnerIP()) {
        optionals.set(1);
      }
      if (struct.isSetHostDesc()) {
        optionals.set(2);
      }
      if (struct.isSetHostAdmin()) {
        optionals.set(3);
      }
      if (struct.isSetRootPassword()) {
        optionals.set(4);
      }
      if (struct.isSetMachineProperties()) {
        optionals.set(5);
      }
      if (struct.isSetRelatedScreenId()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(7);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(8);
      }
      if (struct.isSetRelatedScreenURL()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetHostName()) {
        oprot.writeString(struct.hostName);
      }
      if (struct.isSetHostInnerIP()) {
        oprot.writeString(struct.hostInnerIP);
      }
      if (struct.isSetHostDesc()) {
        oprot.writeString(struct.hostDesc);
      }
      if (struct.isSetHostAdmin()) {
        oprot.writeString(struct.hostAdmin);
      }
      if (struct.isSetRootPassword()) {
        oprot.writeString(struct.rootPassword);
      }
      if (struct.isSetMachineProperties()) {
        {
          oprot.writeI32(struct.machineProperties.size());
          for (Map.Entry<String, String> _iter5 : struct.machineProperties.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetRelatedScreenId()) {
        oprot.writeString(struct.relatedScreenId);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI32(struct.lastModifyTimestamp);
      }
      if (struct.isSetRelatedScreenURL()) {
        oprot.writeString(struct.relatedScreenURL);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Machine struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.hostName = iprot.readString();
        struct.setHostNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hostInnerIP = iprot.readString();
        struct.setHostInnerIPIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostDesc = iprot.readString();
        struct.setHostDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hostAdmin = iprot.readString();
        struct.setHostAdminIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rootPassword = iprot.readString();
        struct.setRootPasswordIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.machineProperties = new HashMap<String,String>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8;
            String _val9;
            _key8 = iprot.readString();
            _val9 = iprot.readString();
            struct.machineProperties.put(_key8, _val9);
          }
        }
        struct.setMachinePropertiesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.relatedScreenId = iprot.readString();
        struct.setRelatedScreenIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastModifyTimestamp = iprot.readI32();
        struct.setLastModifyTimestampIsSet(true);
      }
      if (incoming.get(9)) {
        struct.relatedScreenURL = iprot.readString();
        struct.setRelatedScreenURLIsSet(true);
      }
    }
  }

}

