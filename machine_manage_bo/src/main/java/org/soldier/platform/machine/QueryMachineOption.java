/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.machine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryMachineOption implements org.apache.thrift.TBase<QueryMachineOption, QueryMachineOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryMachineOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryMachineOption");

  private static final org.apache.thrift.protocol.TField HOST_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("hostNames", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_INNER_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostInnerIPS", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("hostDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HOST_ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("hostAdmin", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLUSTER_PROPERTY_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterPropertyExpression", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField KEY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("keyType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HOST_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("hostNamePartical", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryMachineOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryMachineOptionTupleSchemeFactory());
  }

  public List<String> hostNames; // optional
  public List<String> hostInnerIPS; // optional
  public String hostDesc; // optional
  public String hostAdmin; // optional
  public String clusterPropertyExpression; // optional
  /**
   * 
   * @see KeyType
   */
  public KeyType keyType; // optional
  public String hostNamePartical; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST_NAMES((short)1, "hostNames"),
    HOST_INNER_IPS((short)2, "hostInnerIPS"),
    HOST_DESC((short)3, "hostDesc"),
    HOST_ADMIN((short)4, "hostAdmin"),
    CLUSTER_PROPERTY_EXPRESSION((short)5, "clusterPropertyExpression"),
    /**
     * 
     * @see KeyType
     */
    KEY_TYPE((short)6, "keyType"),
    HOST_NAME_PARTICAL((short)7, "hostNamePartical");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST_NAMES
          return HOST_NAMES;
        case 2: // HOST_INNER_IPS
          return HOST_INNER_IPS;
        case 3: // HOST_DESC
          return HOST_DESC;
        case 4: // HOST_ADMIN
          return HOST_ADMIN;
        case 5: // CLUSTER_PROPERTY_EXPRESSION
          return CLUSTER_PROPERTY_EXPRESSION;
        case 6: // KEY_TYPE
          return KEY_TYPE;
        case 7: // HOST_NAME_PARTICAL
          return HOST_NAME_PARTICAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.HOST_NAMES,_Fields.HOST_INNER_IPS,_Fields.HOST_DESC,_Fields.HOST_ADMIN,_Fields.CLUSTER_PROPERTY_EXPRESSION,_Fields.KEY_TYPE,_Fields.HOST_NAME_PARTICAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST_NAMES, new org.apache.thrift.meta_data.FieldMetaData("hostNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HOST_INNER_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostInnerIPS", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HOST_DESC, new org.apache.thrift.meta_data.FieldMetaData("hostDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_ADMIN, new org.apache.thrift.meta_data.FieldMetaData("hostAdmin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_PROPERTY_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("clusterPropertyExpression", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("keyType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, KeyType.class)));
    tmpMap.put(_Fields.HOST_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("hostNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryMachineOption.class, metaDataMap);
  }

  public QueryMachineOption() {
    this.keyType = org.soldier.platform.machine.KeyType.KEY_HOSTNAME;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryMachineOption(QueryMachineOption other) {
    if (other.isSetHostNames()) {
      List<String> __this__hostNames = new ArrayList<String>(other.hostNames);
      this.hostNames = __this__hostNames;
    }
    if (other.isSetHostInnerIPS()) {
      List<String> __this__hostInnerIPS = new ArrayList<String>(other.hostInnerIPS);
      this.hostInnerIPS = __this__hostInnerIPS;
    }
    if (other.isSetHostDesc()) {
      this.hostDesc = other.hostDesc;
    }
    if (other.isSetHostAdmin()) {
      this.hostAdmin = other.hostAdmin;
    }
    if (other.isSetClusterPropertyExpression()) {
      this.clusterPropertyExpression = other.clusterPropertyExpression;
    }
    if (other.isSetKeyType()) {
      this.keyType = other.keyType;
    }
    if (other.isSetHostNamePartical()) {
      this.hostNamePartical = other.hostNamePartical;
    }
  }

  public QueryMachineOption deepCopy() {
    return new QueryMachineOption(this);
  }

  @Override
  public void clear() {
    this.hostNames = null;
    this.hostInnerIPS = null;
    this.hostDesc = null;
    this.hostAdmin = null;
    this.clusterPropertyExpression = null;
    this.keyType = org.soldier.platform.machine.KeyType.KEY_HOSTNAME;

    this.hostNamePartical = null;
  }

  public int getHostNamesSize() {
    return (this.hostNames == null) ? 0 : this.hostNames.size();
  }

  public java.util.Iterator<String> getHostNamesIterator() {
    return (this.hostNames == null) ? null : this.hostNames.iterator();
  }

  public void addToHostNames(String elem) {
    if (this.hostNames == null) {
      this.hostNames = new ArrayList<String>();
    }
    this.hostNames.add(elem);
  }

  public List<String> getHostNames() {
    return this.hostNames;
  }

  public QueryMachineOption setHostNames(List<String> hostNames) {
    this.hostNames = hostNames;
    return this;
  }

  public void unsetHostNames() {
    this.hostNames = null;
  }

  /** Returns true if field hostNames is set (has been assigned a value) and false otherwise */
  public boolean isSetHostNames() {
    return this.hostNames != null;
  }

  public void setHostNamesIsSet(boolean value) {
    if (!value) {
      this.hostNames = null;
    }
  }

  public int getHostInnerIPSSize() {
    return (this.hostInnerIPS == null) ? 0 : this.hostInnerIPS.size();
  }

  public java.util.Iterator<String> getHostInnerIPSIterator() {
    return (this.hostInnerIPS == null) ? null : this.hostInnerIPS.iterator();
  }

  public void addToHostInnerIPS(String elem) {
    if (this.hostInnerIPS == null) {
      this.hostInnerIPS = new ArrayList<String>();
    }
    this.hostInnerIPS.add(elem);
  }

  public List<String> getHostInnerIPS() {
    return this.hostInnerIPS;
  }

  public QueryMachineOption setHostInnerIPS(List<String> hostInnerIPS) {
    this.hostInnerIPS = hostInnerIPS;
    return this;
  }

  public void unsetHostInnerIPS() {
    this.hostInnerIPS = null;
  }

  /** Returns true if field hostInnerIPS is set (has been assigned a value) and false otherwise */
  public boolean isSetHostInnerIPS() {
    return this.hostInnerIPS != null;
  }

  public void setHostInnerIPSIsSet(boolean value) {
    if (!value) {
      this.hostInnerIPS = null;
    }
  }

  public String getHostDesc() {
    return this.hostDesc;
  }

  public QueryMachineOption setHostDesc(String hostDesc) {
    this.hostDesc = hostDesc;
    return this;
  }

  public void unsetHostDesc() {
    this.hostDesc = null;
  }

  /** Returns true if field hostDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetHostDesc() {
    return this.hostDesc != null;
  }

  public void setHostDescIsSet(boolean value) {
    if (!value) {
      this.hostDesc = null;
    }
  }

  public String getHostAdmin() {
    return this.hostAdmin;
  }

  public QueryMachineOption setHostAdmin(String hostAdmin) {
    this.hostAdmin = hostAdmin;
    return this;
  }

  public void unsetHostAdmin() {
    this.hostAdmin = null;
  }

  /** Returns true if field hostAdmin is set (has been assigned a value) and false otherwise */
  public boolean isSetHostAdmin() {
    return this.hostAdmin != null;
  }

  public void setHostAdminIsSet(boolean value) {
    if (!value) {
      this.hostAdmin = null;
    }
  }

  public String getClusterPropertyExpression() {
    return this.clusterPropertyExpression;
  }

  public QueryMachineOption setClusterPropertyExpression(String clusterPropertyExpression) {
    this.clusterPropertyExpression = clusterPropertyExpression;
    return this;
  }

  public void unsetClusterPropertyExpression() {
    this.clusterPropertyExpression = null;
  }

  /** Returns true if field clusterPropertyExpression is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterPropertyExpression() {
    return this.clusterPropertyExpression != null;
  }

  public void setClusterPropertyExpressionIsSet(boolean value) {
    if (!value) {
      this.clusterPropertyExpression = null;
    }
  }

  /**
   * 
   * @see KeyType
   */
  public KeyType getKeyType() {
    return this.keyType;
  }

  /**
   * 
   * @see KeyType
   */
  public QueryMachineOption setKeyType(KeyType keyType) {
    this.keyType = keyType;
    return this;
  }

  public void unsetKeyType() {
    this.keyType = null;
  }

  /** Returns true if field keyType is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyType() {
    return this.keyType != null;
  }

  public void setKeyTypeIsSet(boolean value) {
    if (!value) {
      this.keyType = null;
    }
  }

  public String getHostNamePartical() {
    return this.hostNamePartical;
  }

  public QueryMachineOption setHostNamePartical(String hostNamePartical) {
    this.hostNamePartical = hostNamePartical;
    return this;
  }

  public void unsetHostNamePartical() {
    this.hostNamePartical = null;
  }

  /** Returns true if field hostNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetHostNamePartical() {
    return this.hostNamePartical != null;
  }

  public void setHostNameParticalIsSet(boolean value) {
    if (!value) {
      this.hostNamePartical = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST_NAMES:
      if (value == null) {
        unsetHostNames();
      } else {
        setHostNames((List<String>)value);
      }
      break;

    case HOST_INNER_IPS:
      if (value == null) {
        unsetHostInnerIPS();
      } else {
        setHostInnerIPS((List<String>)value);
      }
      break;

    case HOST_DESC:
      if (value == null) {
        unsetHostDesc();
      } else {
        setHostDesc((String)value);
      }
      break;

    case HOST_ADMIN:
      if (value == null) {
        unsetHostAdmin();
      } else {
        setHostAdmin((String)value);
      }
      break;

    case CLUSTER_PROPERTY_EXPRESSION:
      if (value == null) {
        unsetClusterPropertyExpression();
      } else {
        setClusterPropertyExpression((String)value);
      }
      break;

    case KEY_TYPE:
      if (value == null) {
        unsetKeyType();
      } else {
        setKeyType((KeyType)value);
      }
      break;

    case HOST_NAME_PARTICAL:
      if (value == null) {
        unsetHostNamePartical();
      } else {
        setHostNamePartical((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST_NAMES:
      return getHostNames();

    case HOST_INNER_IPS:
      return getHostInnerIPS();

    case HOST_DESC:
      return getHostDesc();

    case HOST_ADMIN:
      return getHostAdmin();

    case CLUSTER_PROPERTY_EXPRESSION:
      return getClusterPropertyExpression();

    case KEY_TYPE:
      return getKeyType();

    case HOST_NAME_PARTICAL:
      return getHostNamePartical();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST_NAMES:
      return isSetHostNames();
    case HOST_INNER_IPS:
      return isSetHostInnerIPS();
    case HOST_DESC:
      return isSetHostDesc();
    case HOST_ADMIN:
      return isSetHostAdmin();
    case CLUSTER_PROPERTY_EXPRESSION:
      return isSetClusterPropertyExpression();
    case KEY_TYPE:
      return isSetKeyType();
    case HOST_NAME_PARTICAL:
      return isSetHostNamePartical();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryMachineOption)
      return this.equals((QueryMachineOption)that);
    return false;
  }

  public boolean equals(QueryMachineOption that) {
    if (that == null)
      return false;

    boolean this_present_hostNames = true && this.isSetHostNames();
    boolean that_present_hostNames = true && that.isSetHostNames();
    if (this_present_hostNames || that_present_hostNames) {
      if (!(this_present_hostNames && that_present_hostNames))
        return false;
      if (!this.hostNames.equals(that.hostNames))
        return false;
    }

    boolean this_present_hostInnerIPS = true && this.isSetHostInnerIPS();
    boolean that_present_hostInnerIPS = true && that.isSetHostInnerIPS();
    if (this_present_hostInnerIPS || that_present_hostInnerIPS) {
      if (!(this_present_hostInnerIPS && that_present_hostInnerIPS))
        return false;
      if (!this.hostInnerIPS.equals(that.hostInnerIPS))
        return false;
    }

    boolean this_present_hostDesc = true && this.isSetHostDesc();
    boolean that_present_hostDesc = true && that.isSetHostDesc();
    if (this_present_hostDesc || that_present_hostDesc) {
      if (!(this_present_hostDesc && that_present_hostDesc))
        return false;
      if (!this.hostDesc.equals(that.hostDesc))
        return false;
    }

    boolean this_present_hostAdmin = true && this.isSetHostAdmin();
    boolean that_present_hostAdmin = true && that.isSetHostAdmin();
    if (this_present_hostAdmin || that_present_hostAdmin) {
      if (!(this_present_hostAdmin && that_present_hostAdmin))
        return false;
      if (!this.hostAdmin.equals(that.hostAdmin))
        return false;
    }

    boolean this_present_clusterPropertyExpression = true && this.isSetClusterPropertyExpression();
    boolean that_present_clusterPropertyExpression = true && that.isSetClusterPropertyExpression();
    if (this_present_clusterPropertyExpression || that_present_clusterPropertyExpression) {
      if (!(this_present_clusterPropertyExpression && that_present_clusterPropertyExpression))
        return false;
      if (!this.clusterPropertyExpression.equals(that.clusterPropertyExpression))
        return false;
    }

    boolean this_present_keyType = true && this.isSetKeyType();
    boolean that_present_keyType = true && that.isSetKeyType();
    if (this_present_keyType || that_present_keyType) {
      if (!(this_present_keyType && that_present_keyType))
        return false;
      if (!this.keyType.equals(that.keyType))
        return false;
    }

    boolean this_present_hostNamePartical = true && this.isSetHostNamePartical();
    boolean that_present_hostNamePartical = true && that.isSetHostNamePartical();
    if (this_present_hostNamePartical || that_present_hostNamePartical) {
      if (!(this_present_hostNamePartical && that_present_hostNamePartical))
        return false;
      if (!this.hostNamePartical.equals(that.hostNamePartical))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryMachineOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostNames()).compareTo(other.isSetHostNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostNames, other.hostNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostInnerIPS()).compareTo(other.isSetHostInnerIPS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostInnerIPS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostInnerIPS, other.hostInnerIPS);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostDesc()).compareTo(other.isSetHostDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostDesc, other.hostDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostAdmin()).compareTo(other.isSetHostAdmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostAdmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostAdmin, other.hostAdmin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClusterPropertyExpression()).compareTo(other.isSetClusterPropertyExpression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterPropertyExpression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterPropertyExpression, other.clusterPropertyExpression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyType()).compareTo(other.isSetKeyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyType, other.keyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostNamePartical()).compareTo(other.isSetHostNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostNamePartical, other.hostNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryMachineOption(");
    boolean first = true;

    if (isSetHostNames()) {
      sb.append("hostNames:");
      if (this.hostNames == null) {
        sb.append("null");
      } else {
        sb.append(this.hostNames);
      }
      first = false;
    }
    if (isSetHostInnerIPS()) {
      if (!first) sb.append(", ");
      sb.append("hostInnerIPS:");
      if (this.hostInnerIPS == null) {
        sb.append("null");
      } else {
        sb.append(this.hostInnerIPS);
      }
      first = false;
    }
    if (isSetHostDesc()) {
      if (!first) sb.append(", ");
      sb.append("hostDesc:");
      if (this.hostDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.hostDesc);
      }
      first = false;
    }
    if (isSetHostAdmin()) {
      if (!first) sb.append(", ");
      sb.append("hostAdmin:");
      if (this.hostAdmin == null) {
        sb.append("null");
      } else {
        sb.append(this.hostAdmin);
      }
      first = false;
    }
    if (isSetClusterPropertyExpression()) {
      if (!first) sb.append(", ");
      sb.append("clusterPropertyExpression:");
      if (this.clusterPropertyExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterPropertyExpression);
      }
      first = false;
    }
    if (isSetKeyType()) {
      if (!first) sb.append(", ");
      sb.append("keyType:");
      if (this.keyType == null) {
        sb.append("null");
      } else {
        sb.append(this.keyType);
      }
      first = false;
    }
    if (isSetHostNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("hostNamePartical:");
      if (this.hostNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.hostNamePartical);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryMachineOptionStandardSchemeFactory implements SchemeFactory {
    public QueryMachineOptionStandardScheme getScheme() {
      return new QueryMachineOptionStandardScheme();
    }
  }

  private static class QueryMachineOptionStandardScheme extends StandardScheme<QueryMachineOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryMachineOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.hostNames = new ArrayList<String>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  String _elem42;
                  _elem42 = iprot.readString();
                  struct.hostNames.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setHostNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST_INNER_IPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.hostInnerIPS = new ArrayList<String>(_list43.size);
                for (int _i44 = 0; _i44 < _list43.size; ++_i44)
                {
                  String _elem45;
                  _elem45 = iprot.readString();
                  struct.hostInnerIPS.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setHostInnerIPSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostDesc = iprot.readString();
              struct.setHostDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOST_ADMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostAdmin = iprot.readString();
              struct.setHostAdminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLUSTER_PROPERTY_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterPropertyExpression = iprot.readString();
              struct.setClusterPropertyExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keyType = KeyType.findByValue(iprot.readI32());
              struct.setKeyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HOST_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostNamePartical = iprot.readString();
              struct.setHostNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryMachineOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostNames != null) {
        if (struct.isSetHostNames()) {
          oprot.writeFieldBegin(HOST_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hostNames.size()));
            for (String _iter46 : struct.hostNames)
            {
              oprot.writeString(_iter46);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostInnerIPS != null) {
        if (struct.isSetHostInnerIPS()) {
          oprot.writeFieldBegin(HOST_INNER_IPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hostInnerIPS.size()));
            for (String _iter47 : struct.hostInnerIPS)
            {
              oprot.writeString(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostDesc != null) {
        if (struct.isSetHostDesc()) {
          oprot.writeFieldBegin(HOST_DESC_FIELD_DESC);
          oprot.writeString(struct.hostDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostAdmin != null) {
        if (struct.isSetHostAdmin()) {
          oprot.writeFieldBegin(HOST_ADMIN_FIELD_DESC);
          oprot.writeString(struct.hostAdmin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clusterPropertyExpression != null) {
        if (struct.isSetClusterPropertyExpression()) {
          oprot.writeFieldBegin(CLUSTER_PROPERTY_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.clusterPropertyExpression);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keyType != null) {
        if (struct.isSetKeyType()) {
          oprot.writeFieldBegin(KEY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.keyType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostNamePartical != null) {
        if (struct.isSetHostNamePartical()) {
          oprot.writeFieldBegin(HOST_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.hostNamePartical);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryMachineOptionTupleSchemeFactory implements SchemeFactory {
    public QueryMachineOptionTupleScheme getScheme() {
      return new QueryMachineOptionTupleScheme();
    }
  }

  private static class QueryMachineOptionTupleScheme extends TupleScheme<QueryMachineOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryMachineOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHostNames()) {
        optionals.set(0);
      }
      if (struct.isSetHostInnerIPS()) {
        optionals.set(1);
      }
      if (struct.isSetHostDesc()) {
        optionals.set(2);
      }
      if (struct.isSetHostAdmin()) {
        optionals.set(3);
      }
      if (struct.isSetClusterPropertyExpression()) {
        optionals.set(4);
      }
      if (struct.isSetKeyType()) {
        optionals.set(5);
      }
      if (struct.isSetHostNamePartical()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetHostNames()) {
        {
          oprot.writeI32(struct.hostNames.size());
          for (String _iter48 : struct.hostNames)
          {
            oprot.writeString(_iter48);
          }
        }
      }
      if (struct.isSetHostInnerIPS()) {
        {
          oprot.writeI32(struct.hostInnerIPS.size());
          for (String _iter49 : struct.hostInnerIPS)
          {
            oprot.writeString(_iter49);
          }
        }
      }
      if (struct.isSetHostDesc()) {
        oprot.writeString(struct.hostDesc);
      }
      if (struct.isSetHostAdmin()) {
        oprot.writeString(struct.hostAdmin);
      }
      if (struct.isSetClusterPropertyExpression()) {
        oprot.writeString(struct.clusterPropertyExpression);
      }
      if (struct.isSetKeyType()) {
        oprot.writeI32(struct.keyType.getValue());
      }
      if (struct.isSetHostNamePartical()) {
        oprot.writeString(struct.hostNamePartical);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryMachineOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hostNames = new ArrayList<String>(_list50.size);
          for (int _i51 = 0; _i51 < _list50.size; ++_i51)
          {
            String _elem52;
            _elem52 = iprot.readString();
            struct.hostNames.add(_elem52);
          }
        }
        struct.setHostNamesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hostInnerIPS = new ArrayList<String>(_list53.size);
          for (int _i54 = 0; _i54 < _list53.size; ++_i54)
          {
            String _elem55;
            _elem55 = iprot.readString();
            struct.hostInnerIPS.add(_elem55);
          }
        }
        struct.setHostInnerIPSIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostDesc = iprot.readString();
        struct.setHostDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hostAdmin = iprot.readString();
        struct.setHostAdminIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clusterPropertyExpression = iprot.readString();
        struct.setClusterPropertyExpressionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.keyType = KeyType.findByValue(iprot.readI32());
        struct.setKeyTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hostNamePartical = iprot.readString();
        struct.setHostNameParticalIsSet(true);
      }
    }
  }

}

