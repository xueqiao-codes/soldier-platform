#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class KeyType:
  KEY_HOSTNAME = 1
  KEY_HOSTINNER_IP = 2

  _VALUES_TO_NAMES = {
    1: "KEY_HOSTNAME",
    2: "KEY_HOSTINNER_IP",
  }

  _NAMES_TO_VALUES = {
    "KEY_HOSTNAME": 1,
    "KEY_HOSTINNER_IP": 2,
  }

class MachineManageBoError:
  ERROR_DUPLICATE_HOSTNAME = 7001
  ERROR_DUPLICATE_HOSTINNER_IP = 7002
  ERROR_NO_SUCH_MACHINE = 7003

  _VALUES_TO_NAMES = {
    7001: "ERROR_DUPLICATE_HOSTNAME",
    7002: "ERROR_DUPLICATE_HOSTINNER_IP",
    7003: "ERROR_NO_SUCH_MACHINE",
  }

  _NAMES_TO_VALUES = {
    "ERROR_DUPLICATE_HOSTNAME": 7001,
    "ERROR_DUPLICATE_HOSTINNER_IP": 7002,
    "ERROR_NO_SUCH_MACHINE": 7003,
  }


class Machine:
  """
  Attributes:
   - hostName
   - hostInnerIP
   - hostDesc
   - hostAdmin
   - rootPassword
   - machineProperties
   - relatedScreenId
   - createTimestamp
   - lastModifyTimestamp
   - relatedScreenURL
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'hostName', None, None, ), # 1
    (2, TType.STRING, 'hostInnerIP', None, None, ), # 2
    (3, TType.STRING, 'hostDesc', None, None, ), # 3
    (4, TType.STRING, 'hostAdmin', None, None, ), # 4
    (5, TType.STRING, 'rootPassword', None, None, ), # 5
    (6, TType.MAP, 'machineProperties', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.STRING, 'relatedScreenId', None, None, ), # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'createTimestamp', None, None, ), # 10
    (11, TType.I32, 'lastModifyTimestamp', None, None, ), # 11
    (12, TType.STRING, 'relatedScreenURL', None, None, ), # 12
  )

  def __init__(self, hostName=None, hostInnerIP=None, hostDesc=None, hostAdmin=None, rootPassword=None, machineProperties=None, relatedScreenId=None, createTimestamp=None, lastModifyTimestamp=None, relatedScreenURL=None,):
    self.hostName = hostName
    self.hostInnerIP = hostInnerIP
    self.hostDesc = hostDesc
    self.hostAdmin = hostAdmin
    self.rootPassword = rootPassword
    self.machineProperties = machineProperties
    self.relatedScreenId = relatedScreenId
    self.createTimestamp = createTimestamp
    self.lastModifyTimestamp = lastModifyTimestamp
    self.relatedScreenURL = relatedScreenURL

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.hostName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostInnerIP = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hostDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.hostAdmin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.rootPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.machineProperties = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.machineProperties[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.relatedScreenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.createTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.lastModifyTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.relatedScreenURL = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Machine')
    if self.hostName is not None:
      oprot.writeFieldBegin('hostName', TType.STRING, 1)
      oprot.writeString(self.hostName)
      oprot.writeFieldEnd()
    if self.hostInnerIP is not None:
      oprot.writeFieldBegin('hostInnerIP', TType.STRING, 2)
      oprot.writeString(self.hostInnerIP)
      oprot.writeFieldEnd()
    if self.hostDesc is not None:
      oprot.writeFieldBegin('hostDesc', TType.STRING, 3)
      oprot.writeString(self.hostDesc)
      oprot.writeFieldEnd()
    if self.hostAdmin is not None:
      oprot.writeFieldBegin('hostAdmin', TType.STRING, 4)
      oprot.writeString(self.hostAdmin)
      oprot.writeFieldEnd()
    if self.rootPassword is not None:
      oprot.writeFieldBegin('rootPassword', TType.STRING, 5)
      oprot.writeString(self.rootPassword)
      oprot.writeFieldEnd()
    if self.machineProperties is not None:
      oprot.writeFieldBegin('machineProperties', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.machineProperties))
      for kiter7,viter8 in self.machineProperties.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.relatedScreenId is not None:
      oprot.writeFieldBegin('relatedScreenId', TType.STRING, 7)
      oprot.writeString(self.relatedScreenId)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I32, 10)
      oprot.writeI32(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModifyTimestamp is not None:
      oprot.writeFieldBegin('lastModifyTimestamp', TType.I32, 11)
      oprot.writeI32(self.lastModifyTimestamp)
      oprot.writeFieldEnd()
    if self.relatedScreenURL is not None:
      oprot.writeFieldBegin('relatedScreenURL', TType.STRING, 12)
      oprot.writeString(self.relatedScreenURL)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MachineList:
  """
  Attributes:
   - totalNum
   - machinesMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.MAP, 'machinesMap', (TType.STRING,None,TType.STRUCT,(Machine, Machine.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, machinesMap=None,):
    self.totalNum = totalNum
    self.machinesMap = machinesMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.machinesMap = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readString();
            _val15 = Machine()
            _val15.read(iprot)
            self.machinesMap[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MachineList')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.machinesMap is not None:
      oprot.writeFieldBegin('machinesMap', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.machinesMap))
      for kiter16,viter17 in self.machinesMap.items():
        oprot.writeString(kiter16)
        viter17.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.totalNum is None:
      raise TProtocol.TProtocolException(message='Required field totalNum is unset!')
    if self.machinesMap is None:
      raise TProtocol.TProtocolException(message='Required field machinesMap is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryMachineOption:
  """
  Attributes:
   - hostNames
   - hostInnerIPS
   - hostDesc
   - hostAdmin
   - clusterPropertyExpression
   - keyType
   - hostNamePartical
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'hostNames', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'hostInnerIPS', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'hostDesc', None, None, ), # 3
    (4, TType.STRING, 'hostAdmin', None, None, ), # 4
    (5, TType.STRING, 'clusterPropertyExpression', None, None, ), # 5
    (6, TType.I32, 'keyType', None,     1, ), # 6
    (7, TType.STRING, 'hostNamePartical', None, None, ), # 7
  )

  def __init__(self, hostNames=None, hostInnerIPS=None, hostDesc=None, hostAdmin=None, clusterPropertyExpression=None, keyType=thrift_spec[6][4], hostNamePartical=None,):
    self.hostNames = hostNames
    self.hostInnerIPS = hostInnerIPS
    self.hostDesc = hostDesc
    self.hostAdmin = hostAdmin
    self.clusterPropertyExpression = clusterPropertyExpression
    self.keyType = keyType
    self.hostNamePartical = hostNamePartical

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.hostNames = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readString();
            self.hostNames.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.hostInnerIPS = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = iprot.readString();
            self.hostInnerIPS.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.hostDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.hostAdmin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.clusterPropertyExpression = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.keyType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.hostNamePartical = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryMachineOption')
    if self.hostNames is not None:
      oprot.writeFieldBegin('hostNames', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.hostNames))
      for iter30 in self.hostNames:
        oprot.writeString(iter30)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hostInnerIPS is not None:
      oprot.writeFieldBegin('hostInnerIPS', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.hostInnerIPS))
      for iter31 in self.hostInnerIPS:
        oprot.writeString(iter31)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hostDesc is not None:
      oprot.writeFieldBegin('hostDesc', TType.STRING, 3)
      oprot.writeString(self.hostDesc)
      oprot.writeFieldEnd()
    if self.hostAdmin is not None:
      oprot.writeFieldBegin('hostAdmin', TType.STRING, 4)
      oprot.writeString(self.hostAdmin)
      oprot.writeFieldEnd()
    if self.clusterPropertyExpression is not None:
      oprot.writeFieldBegin('clusterPropertyExpression', TType.STRING, 5)
      oprot.writeString(self.clusterPropertyExpression)
      oprot.writeFieldEnd()
    if self.keyType is not None:
      oprot.writeFieldBegin('keyType', TType.I32, 6)
      oprot.writeI32(self.keyType)
      oprot.writeFieldEnd()
    if self.hostNamePartical is not None:
      oprot.writeFieldBegin('hostNamePartical', TType.STRING, 7)
      oprot.writeString(self.hostNamePartical)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
