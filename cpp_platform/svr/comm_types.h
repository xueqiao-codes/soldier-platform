/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef comm_TYPES_H
#define comm_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace platform { namespace comm {


class ErrorInfo : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  ErrorInfo() : errorCode(0), errorMsg() {
  }

  virtual ~ErrorInfo() throw() {}

  int32_t errorCode;
  std::string errorMsg;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_errorMsg(const std::string& val) {
    errorMsg = val;
  }

  bool operator == (const ErrorInfo & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(errorMsg == rhs.errorMsg))
      return false;
    return true;
  }
  bool operator != (const ErrorInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ErrorInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ErrorInfo &a, ErrorInfo &b);

typedef struct _PlatformArgs__isset {
  _PlatformArgs__isset() : sourceDesc(false), sourceIpV4(false), remoteAddress(false), remotePort(false), xForwardAddress(false), sourceIp(false) {}
  bool sourceDesc;
  bool sourceIpV4;
  bool remoteAddress;
  bool remotePort;
  bool xForwardAddress;
  bool sourceIp;
} _PlatformArgs__isset;

class PlatformArgs {
 public:

  static const char* ascii_fingerprint; // = "B7BA2F05E598EC14CFD3BAD5BD77E637";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xBA,0x2F,0x05,0xE5,0x98,0xEC,0x14,0xCF,0xD3,0xBA,0xD5,0xBD,0x77,0xE6,0x37};

  PlatformArgs() : sourceDesc(), sourceIpV4(0), remoteAddress(), remotePort(0), xForwardAddress(), sourceIp() {
  }

  virtual ~PlatformArgs() throw() {}

  std::string sourceDesc;
  int32_t sourceIpV4;
  std::string remoteAddress;
  int32_t remotePort;
  std::string xForwardAddress;
  std::string sourceIp;

  _PlatformArgs__isset __isset;

  void __set_sourceDesc(const std::string& val) {
    sourceDesc = val;
    __isset.sourceDesc = true;
  }

  void __set_sourceIpV4(const int32_t val) {
    sourceIpV4 = val;
    __isset.sourceIpV4 = true;
  }

  void __set_remoteAddress(const std::string& val) {
    remoteAddress = val;
    __isset.remoteAddress = true;
  }

  void __set_remotePort(const int32_t val) {
    remotePort = val;
    __isset.remotePort = true;
  }

  void __set_xForwardAddress(const std::string& val) {
    xForwardAddress = val;
    __isset.xForwardAddress = true;
  }

  void __set_sourceIp(const std::string& val) {
    sourceIp = val;
    __isset.sourceIp = true;
  }

  bool operator == (const PlatformArgs & rhs) const
  {
    if (__isset.sourceDesc != rhs.__isset.sourceDesc)
      return false;
    else if (__isset.sourceDesc && !(sourceDesc == rhs.sourceDesc))
      return false;
    if (__isset.sourceIpV4 != rhs.__isset.sourceIpV4)
      return false;
    else if (__isset.sourceIpV4 && !(sourceIpV4 == rhs.sourceIpV4))
      return false;
    if (__isset.remoteAddress != rhs.__isset.remoteAddress)
      return false;
    else if (__isset.remoteAddress && !(remoteAddress == rhs.remoteAddress))
      return false;
    if (__isset.remotePort != rhs.__isset.remotePort)
      return false;
    else if (__isset.remotePort && !(remotePort == rhs.remotePort))
      return false;
    if (__isset.xForwardAddress != rhs.__isset.xForwardAddress)
      return false;
    else if (__isset.xForwardAddress && !(xForwardAddress == rhs.xForwardAddress))
      return false;
    if (__isset.sourceIp != rhs.__isset.sourceIp)
      return false;
    else if (__isset.sourceIp && !(sourceIp == rhs.sourceIp))
      return false;
    return true;
  }
  bool operator != (const PlatformArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlatformArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlatformArgs &a, PlatformArgs &b);

}} // namespace

#endif
