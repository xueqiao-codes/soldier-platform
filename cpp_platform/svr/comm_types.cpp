/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "comm_types.h"

#include <algorithm>

namespace platform { namespace comm {

const char* ErrorInfo::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t ErrorInfo::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t ErrorInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorCode = false;
  bool isset_errorMsg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMsg);
          isset_errorMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_errorMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ErrorInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ErrorInfo");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMsg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errorMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ErrorInfo &a, ErrorInfo &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.errorMsg, b.errorMsg);
}

const char* PlatformArgs::ascii_fingerprint = "B7BA2F05E598EC14CFD3BAD5BD77E637";
const uint8_t PlatformArgs::binary_fingerprint[16] = {0xB7,0xBA,0x2F,0x05,0xE5,0x98,0xEC,0x14,0xCF,0xD3,0xBA,0xD5,0xBD,0x77,0xE6,0x37};

uint32_t PlatformArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceDesc);
          this->__isset.sourceDesc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sourceIpV4);
          this->__isset.sourceIpV4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->remoteAddress);
          this->__isset.remoteAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->remotePort);
          this->__isset.remotePort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->xForwardAddress);
          this->__isset.xForwardAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sourceIp);
          this->__isset.sourceIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PlatformArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PlatformArgs");

  if (this->__isset.sourceDesc) {
    xfer += oprot->writeFieldBegin("sourceDesc", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->sourceDesc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceIpV4) {
    xfer += oprot->writeFieldBegin("sourceIpV4", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->sourceIpV4);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remoteAddress) {
    xfer += oprot->writeFieldBegin("remoteAddress", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->remoteAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.remotePort) {
    xfer += oprot->writeFieldBegin("remotePort", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->remotePort);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.xForwardAddress) {
    xfer += oprot->writeFieldBegin("xForwardAddress", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->xForwardAddress);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceIp) {
    xfer += oprot->writeFieldBegin("sourceIp", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->sourceIp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PlatformArgs &a, PlatformArgs &b) {
  using ::std::swap;
  swap(a.sourceDesc, b.sourceDesc);
  swap(a.sourceIpV4, b.sourceIpV4);
  swap(a.remoteAddress, b.remoteAddress);
  swap(a.remotePort, b.remotePort);
  swap(a.xForwardAddress, b.xForwardAddress);
  swap(a.sourceIp, b.sourceIp);
  swap(a.__isset, b.__isset);
}

}} // namespace
