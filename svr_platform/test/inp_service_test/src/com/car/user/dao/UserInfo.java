/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.car.user.dao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable, Comparable<UserInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo");

  private static final org.apache.thrift.protocol.TField USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("userEmail", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField USER_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userNickName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_HEAD_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("userHeadUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("userSource", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField USER_RP_FIELD_DESC = new org.apache.thrift.protocol.TField("userRp", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USER_SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("userSex", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField USER_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userSourceId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USER_ALWAY_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("userAlwayPlace", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField USER_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("userScore", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserInfoTupleSchemeFactory());
  }

  public String userEmail; // optional
  public long userId; // required
  public String userNickName; // optional
  public String userHeadUrl; // optional
  public int userSource; // optional
  public int userRp; // optional
  public int userSex; // optional
  public String userSourceId; // optional
  public String userAlwayPlace; // optional
  public int userScore; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_EMAIL((short)1, "userEmail"),
    USER_ID((short)2, "userId"),
    USER_NICK_NAME((short)3, "userNickName"),
    USER_HEAD_URL((short)4, "userHeadUrl"),
    USER_SOURCE((short)5, "userSource"),
    USER_RP((short)6, "userRp"),
    USER_SEX((short)7, "userSex"),
    USER_SOURCE_ID((short)8, "userSourceId"),
    USER_ALWAY_PLACE((short)9, "userAlwayPlace"),
    USER_SCORE((short)10, "userScore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_EMAIL
          return USER_EMAIL;
        case 2: // USER_ID
          return USER_ID;
        case 3: // USER_NICK_NAME
          return USER_NICK_NAME;
        case 4: // USER_HEAD_URL
          return USER_HEAD_URL;
        case 5: // USER_SOURCE
          return USER_SOURCE;
        case 6: // USER_RP
          return USER_RP;
        case 7: // USER_SEX
          return USER_SEX;
        case 8: // USER_SOURCE_ID
          return USER_SOURCE_ID;
        case 9: // USER_ALWAY_PLACE
          return USER_ALWAY_PLACE;
        case 10: // USER_SCORE
          return USER_SCORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __USERSOURCE_ISSET_ID = 1;
  private static final int __USERRP_ISSET_ID = 2;
  private static final int __USERSEX_ISSET_ID = 3;
  private static final int __USERSCORE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.USER_EMAIL,_Fields.USER_NICK_NAME,_Fields.USER_HEAD_URL,_Fields.USER_SOURCE,_Fields.USER_RP,_Fields.USER_SEX,_Fields.USER_SOURCE_ID,_Fields.USER_ALWAY_PLACE,_Fields.USER_SCORE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("userEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("userNickName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_HEAD_URL, new org.apache.thrift.meta_data.FieldMetaData("userHeadUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("userSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_RP, new org.apache.thrift.meta_data.FieldMetaData("userRp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_SEX, new org.apache.thrift.meta_data.FieldMetaData("userSex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("userSourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ALWAY_PLACE, new org.apache.thrift.meta_data.FieldMetaData("userAlwayPlace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_SCORE, new org.apache.thrift.meta_data.FieldMetaData("userScore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
  }

  public UserInfo() {
    this.userId = 0L;

    this.userSource = 1;

    this.userRp = 0;

    this.userSex = 1;

    this.userSourceId = "";

    this.userScore = 0;

  }

  public UserInfo(
    long userId)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfo(UserInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserEmail()) {
      this.userEmail = other.userEmail;
    }
    this.userId = other.userId;
    if (other.isSetUserNickName()) {
      this.userNickName = other.userNickName;
    }
    if (other.isSetUserHeadUrl()) {
      this.userHeadUrl = other.userHeadUrl;
    }
    this.userSource = other.userSource;
    this.userRp = other.userRp;
    this.userSex = other.userSex;
    if (other.isSetUserSourceId()) {
      this.userSourceId = other.userSourceId;
    }
    if (other.isSetUserAlwayPlace()) {
      this.userAlwayPlace = other.userAlwayPlace;
    }
    this.userScore = other.userScore;
  }

  public UserInfo deepCopy() {
    return new UserInfo(this);
  }

  @Override
  public void clear() {
    this.userEmail = null;
    this.userId = 0L;

    this.userNickName = null;
    this.userHeadUrl = null;
    this.userSource = 1;

    this.userRp = 0;

    this.userSex = 1;

    this.userSourceId = "";

    this.userAlwayPlace = null;
    this.userScore = 0;

  }

  public String getUserEmail() {
    return this.userEmail;
  }

  public UserInfo setUserEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  public void unsetUserEmail() {
    this.userEmail = null;
  }

  /** Returns true if field userEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetUserEmail() {
    return this.userEmail != null;
  }

  public void setUserEmailIsSet(boolean value) {
    if (!value) {
      this.userEmail = null;
    }
  }

  public long getUserId() {
    return this.userId;
  }

  public UserInfo setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getUserNickName() {
    return this.userNickName;
  }

  public UserInfo setUserNickName(String userNickName) {
    this.userNickName = userNickName;
    return this;
  }

  public void unsetUserNickName() {
    this.userNickName = null;
  }

  /** Returns true if field userNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserNickName() {
    return this.userNickName != null;
  }

  public void setUserNickNameIsSet(boolean value) {
    if (!value) {
      this.userNickName = null;
    }
  }

  public String getUserHeadUrl() {
    return this.userHeadUrl;
  }

  public UserInfo setUserHeadUrl(String userHeadUrl) {
    this.userHeadUrl = userHeadUrl;
    return this;
  }

  public void unsetUserHeadUrl() {
    this.userHeadUrl = null;
  }

  /** Returns true if field userHeadUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetUserHeadUrl() {
    return this.userHeadUrl != null;
  }

  public void setUserHeadUrlIsSet(boolean value) {
    if (!value) {
      this.userHeadUrl = null;
    }
  }

  public int getUserSource() {
    return this.userSource;
  }

  public UserInfo setUserSource(int userSource) {
    this.userSource = userSource;
    setUserSourceIsSet(true);
    return this;
  }

  public void unsetUserSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERSOURCE_ISSET_ID);
  }

  /** Returns true if field userSource is set (has been assigned a value) and false otherwise */
  public boolean isSetUserSource() {
    return EncodingUtils.testBit(__isset_bitfield, __USERSOURCE_ISSET_ID);
  }

  public void setUserSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERSOURCE_ISSET_ID, value);
  }

  public int getUserRp() {
    return this.userRp;
  }

  public UserInfo setUserRp(int userRp) {
    this.userRp = userRp;
    setUserRpIsSet(true);
    return this;
  }

  public void unsetUserRp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERRP_ISSET_ID);
  }

  /** Returns true if field userRp is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRp() {
    return EncodingUtils.testBit(__isset_bitfield, __USERRP_ISSET_ID);
  }

  public void setUserRpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERRP_ISSET_ID, value);
  }

  public int getUserSex() {
    return this.userSex;
  }

  public UserInfo setUserSex(int userSex) {
    this.userSex = userSex;
    setUserSexIsSet(true);
    return this;
  }

  public void unsetUserSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERSEX_ISSET_ID);
  }

  /** Returns true if field userSex is set (has been assigned a value) and false otherwise */
  public boolean isSetUserSex() {
    return EncodingUtils.testBit(__isset_bitfield, __USERSEX_ISSET_ID);
  }

  public void setUserSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERSEX_ISSET_ID, value);
  }

  public String getUserSourceId() {
    return this.userSourceId;
  }

  public UserInfo setUserSourceId(String userSourceId) {
    this.userSourceId = userSourceId;
    return this;
  }

  public void unsetUserSourceId() {
    this.userSourceId = null;
  }

  /** Returns true if field userSourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserSourceId() {
    return this.userSourceId != null;
  }

  public void setUserSourceIdIsSet(boolean value) {
    if (!value) {
      this.userSourceId = null;
    }
  }

  public String getUserAlwayPlace() {
    return this.userAlwayPlace;
  }

  public UserInfo setUserAlwayPlace(String userAlwayPlace) {
    this.userAlwayPlace = userAlwayPlace;
    return this;
  }

  public void unsetUserAlwayPlace() {
    this.userAlwayPlace = null;
  }

  /** Returns true if field userAlwayPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAlwayPlace() {
    return this.userAlwayPlace != null;
  }

  public void setUserAlwayPlaceIsSet(boolean value) {
    if (!value) {
      this.userAlwayPlace = null;
    }
  }

  public int getUserScore() {
    return this.userScore;
  }

  public UserInfo setUserScore(int userScore) {
    this.userScore = userScore;
    setUserScoreIsSet(true);
    return this;
  }

  public void unsetUserScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERSCORE_ISSET_ID);
  }

  /** Returns true if field userScore is set (has been assigned a value) and false otherwise */
  public boolean isSetUserScore() {
    return EncodingUtils.testBit(__isset_bitfield, __USERSCORE_ISSET_ID);
  }

  public void setUserScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERSCORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_EMAIL:
      if (value == null) {
        unsetUserEmail();
      } else {
        setUserEmail((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case USER_NICK_NAME:
      if (value == null) {
        unsetUserNickName();
      } else {
        setUserNickName((String)value);
      }
      break;

    case USER_HEAD_URL:
      if (value == null) {
        unsetUserHeadUrl();
      } else {
        setUserHeadUrl((String)value);
      }
      break;

    case USER_SOURCE:
      if (value == null) {
        unsetUserSource();
      } else {
        setUserSource((Integer)value);
      }
      break;

    case USER_RP:
      if (value == null) {
        unsetUserRp();
      } else {
        setUserRp((Integer)value);
      }
      break;

    case USER_SEX:
      if (value == null) {
        unsetUserSex();
      } else {
        setUserSex((Integer)value);
      }
      break;

    case USER_SOURCE_ID:
      if (value == null) {
        unsetUserSourceId();
      } else {
        setUserSourceId((String)value);
      }
      break;

    case USER_ALWAY_PLACE:
      if (value == null) {
        unsetUserAlwayPlace();
      } else {
        setUserAlwayPlace((String)value);
      }
      break;

    case USER_SCORE:
      if (value == null) {
        unsetUserScore();
      } else {
        setUserScore((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_EMAIL:
      return getUserEmail();

    case USER_ID:
      return Long.valueOf(getUserId());

    case USER_NICK_NAME:
      return getUserNickName();

    case USER_HEAD_URL:
      return getUserHeadUrl();

    case USER_SOURCE:
      return Integer.valueOf(getUserSource());

    case USER_RP:
      return Integer.valueOf(getUserRp());

    case USER_SEX:
      return Integer.valueOf(getUserSex());

    case USER_SOURCE_ID:
      return getUserSourceId();

    case USER_ALWAY_PLACE:
      return getUserAlwayPlace();

    case USER_SCORE:
      return Integer.valueOf(getUserScore());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_EMAIL:
      return isSetUserEmail();
    case USER_ID:
      return isSetUserId();
    case USER_NICK_NAME:
      return isSetUserNickName();
    case USER_HEAD_URL:
      return isSetUserHeadUrl();
    case USER_SOURCE:
      return isSetUserSource();
    case USER_RP:
      return isSetUserRp();
    case USER_SEX:
      return isSetUserSex();
    case USER_SOURCE_ID:
      return isSetUserSourceId();
    case USER_ALWAY_PLACE:
      return isSetUserAlwayPlace();
    case USER_SCORE:
      return isSetUserScore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfo)
      return this.equals((UserInfo)that);
    return false;
  }

  public boolean equals(UserInfo that) {
    if (that == null)
      return false;

    boolean this_present_userEmail = true && this.isSetUserEmail();
    boolean that_present_userEmail = true && that.isSetUserEmail();
    if (this_present_userEmail || that_present_userEmail) {
      if (!(this_present_userEmail && that_present_userEmail))
        return false;
      if (!this.userEmail.equals(that.userEmail))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_userNickName = true && this.isSetUserNickName();
    boolean that_present_userNickName = true && that.isSetUserNickName();
    if (this_present_userNickName || that_present_userNickName) {
      if (!(this_present_userNickName && that_present_userNickName))
        return false;
      if (!this.userNickName.equals(that.userNickName))
        return false;
    }

    boolean this_present_userHeadUrl = true && this.isSetUserHeadUrl();
    boolean that_present_userHeadUrl = true && that.isSetUserHeadUrl();
    if (this_present_userHeadUrl || that_present_userHeadUrl) {
      if (!(this_present_userHeadUrl && that_present_userHeadUrl))
        return false;
      if (!this.userHeadUrl.equals(that.userHeadUrl))
        return false;
    }

    boolean this_present_userSource = true && this.isSetUserSource();
    boolean that_present_userSource = true && that.isSetUserSource();
    if (this_present_userSource || that_present_userSource) {
      if (!(this_present_userSource && that_present_userSource))
        return false;
      if (this.userSource != that.userSource)
        return false;
    }

    boolean this_present_userRp = true && this.isSetUserRp();
    boolean that_present_userRp = true && that.isSetUserRp();
    if (this_present_userRp || that_present_userRp) {
      if (!(this_present_userRp && that_present_userRp))
        return false;
      if (this.userRp != that.userRp)
        return false;
    }

    boolean this_present_userSex = true && this.isSetUserSex();
    boolean that_present_userSex = true && that.isSetUserSex();
    if (this_present_userSex || that_present_userSex) {
      if (!(this_present_userSex && that_present_userSex))
        return false;
      if (this.userSex != that.userSex)
        return false;
    }

    boolean this_present_userSourceId = true && this.isSetUserSourceId();
    boolean that_present_userSourceId = true && that.isSetUserSourceId();
    if (this_present_userSourceId || that_present_userSourceId) {
      if (!(this_present_userSourceId && that_present_userSourceId))
        return false;
      if (!this.userSourceId.equals(that.userSourceId))
        return false;
    }

    boolean this_present_userAlwayPlace = true && this.isSetUserAlwayPlace();
    boolean that_present_userAlwayPlace = true && that.isSetUserAlwayPlace();
    if (this_present_userAlwayPlace || that_present_userAlwayPlace) {
      if (!(this_present_userAlwayPlace && that_present_userAlwayPlace))
        return false;
      if (!this.userAlwayPlace.equals(that.userAlwayPlace))
        return false;
    }

    boolean this_present_userScore = true && this.isSetUserScore();
    boolean that_present_userScore = true && that.isSetUserScore();
    if (this_present_userScore || that_present_userScore) {
      if (!(this_present_userScore && that_present_userScore))
        return false;
      if (this.userScore != that.userScore)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserEmail()).compareTo(other.isSetUserEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEmail, other.userEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserNickName()).compareTo(other.isSetUserNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNickName, other.userNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserHeadUrl()).compareTo(other.isSetUserHeadUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserHeadUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userHeadUrl, other.userHeadUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserSource()).compareTo(other.isSetUserSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSource, other.userSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserRp()).compareTo(other.isSetUserRp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRp, other.userRp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserSex()).compareTo(other.isSetUserSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSex, other.userSex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserSourceId()).compareTo(other.isSetUserSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserSourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSourceId, other.userSourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAlwayPlace()).compareTo(other.isSetUserAlwayPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAlwayPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAlwayPlace, other.userAlwayPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserScore()).compareTo(other.isSetUserScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userScore, other.userScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfo(");
    boolean first = true;

    if (isSetUserEmail()) {
      sb.append("userEmail:");
      if (this.userEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.userEmail);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (isSetUserNickName()) {
      if (!first) sb.append(", ");
      sb.append("userNickName:");
      if (this.userNickName == null) {
        sb.append("null");
      } else {
        sb.append(this.userNickName);
      }
      first = false;
    }
    if (isSetUserHeadUrl()) {
      if (!first) sb.append(", ");
      sb.append("userHeadUrl:");
      if (this.userHeadUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.userHeadUrl);
      }
      first = false;
    }
    if (isSetUserSource()) {
      if (!first) sb.append(", ");
      sb.append("userSource:");
      sb.append(this.userSource);
      first = false;
    }
    if (isSetUserRp()) {
      if (!first) sb.append(", ");
      sb.append("userRp:");
      sb.append(this.userRp);
      first = false;
    }
    if (isSetUserSex()) {
      if (!first) sb.append(", ");
      sb.append("userSex:");
      sb.append(this.userSex);
      first = false;
    }
    if (isSetUserSourceId()) {
      if (!first) sb.append(", ");
      sb.append("userSourceId:");
      if (this.userSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.userSourceId);
      }
      first = false;
    }
    if (isSetUserAlwayPlace()) {
      if (!first) sb.append(", ");
      sb.append("userAlwayPlace:");
      if (this.userAlwayPlace == null) {
        sb.append("null");
      } else {
        sb.append(this.userAlwayPlace);
      }
      first = false;
    }
    if (isSetUserScore()) {
      if (!first) sb.append(", ");
      sb.append("userScore:");
      sb.append(this.userScore);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoStandardSchemeFactory implements SchemeFactory {
    public UserInfoStandardScheme getScheme() {
      return new UserInfoStandardScheme();
    }
  }

  private static class UserInfoStandardScheme extends StandardScheme<UserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userEmail = iprot.readString();
              struct.setUserEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userNickName = iprot.readString();
              struct.setUserNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_HEAD_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userHeadUrl = iprot.readString();
              struct.setUserHeadUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userSource = iprot.readI32();
              struct.setUserSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_RP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userRp = iprot.readI32();
              struct.setUserRpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userSex = iprot.readI32();
              struct.setUserSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userSourceId = iprot.readString();
              struct.setUserSourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_ALWAY_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userAlwayPlace = iprot.readString();
              struct.setUserAlwayPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USER_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userScore = iprot.readI32();
              struct.setUserScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userEmail != null) {
        if (struct.isSetUserEmail()) {
          oprot.writeFieldBegin(USER_EMAIL_FIELD_DESC);
          oprot.writeString(struct.userEmail);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      if (struct.userNickName != null) {
        if (struct.isSetUserNickName()) {
          oprot.writeFieldBegin(USER_NICK_NAME_FIELD_DESC);
          oprot.writeString(struct.userNickName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userHeadUrl != null) {
        if (struct.isSetUserHeadUrl()) {
          oprot.writeFieldBegin(USER_HEAD_URL_FIELD_DESC);
          oprot.writeString(struct.userHeadUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserSource()) {
        oprot.writeFieldBegin(USER_SOURCE_FIELD_DESC);
        oprot.writeI32(struct.userSource);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserRp()) {
        oprot.writeFieldBegin(USER_RP_FIELD_DESC);
        oprot.writeI32(struct.userRp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserSex()) {
        oprot.writeFieldBegin(USER_SEX_FIELD_DESC);
        oprot.writeI32(struct.userSex);
        oprot.writeFieldEnd();
      }
      if (struct.userSourceId != null) {
        if (struct.isSetUserSourceId()) {
          oprot.writeFieldBegin(USER_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.userSourceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userAlwayPlace != null) {
        if (struct.isSetUserAlwayPlace()) {
          oprot.writeFieldBegin(USER_ALWAY_PLACE_FIELD_DESC);
          oprot.writeString(struct.userAlwayPlace);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserScore()) {
        oprot.writeFieldBegin(USER_SCORE_FIELD_DESC);
        oprot.writeI32(struct.userScore);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoTupleSchemeFactory implements SchemeFactory {
    public UserInfoTupleScheme getScheme() {
      return new UserInfoTupleScheme();
    }
  }

  private static class UserInfoTupleScheme extends TupleScheme<UserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.userId);
      BitSet optionals = new BitSet();
      if (struct.isSetUserEmail()) {
        optionals.set(0);
      }
      if (struct.isSetUserNickName()) {
        optionals.set(1);
      }
      if (struct.isSetUserHeadUrl()) {
        optionals.set(2);
      }
      if (struct.isSetUserSource()) {
        optionals.set(3);
      }
      if (struct.isSetUserRp()) {
        optionals.set(4);
      }
      if (struct.isSetUserSex()) {
        optionals.set(5);
      }
      if (struct.isSetUserSourceId()) {
        optionals.set(6);
      }
      if (struct.isSetUserAlwayPlace()) {
        optionals.set(7);
      }
      if (struct.isSetUserScore()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUserEmail()) {
        oprot.writeString(struct.userEmail);
      }
      if (struct.isSetUserNickName()) {
        oprot.writeString(struct.userNickName);
      }
      if (struct.isSetUserHeadUrl()) {
        oprot.writeString(struct.userHeadUrl);
      }
      if (struct.isSetUserSource()) {
        oprot.writeI32(struct.userSource);
      }
      if (struct.isSetUserRp()) {
        oprot.writeI32(struct.userRp);
      }
      if (struct.isSetUserSex()) {
        oprot.writeI32(struct.userSex);
      }
      if (struct.isSetUserSourceId()) {
        oprot.writeString(struct.userSourceId);
      }
      if (struct.isSetUserAlwayPlace()) {
        oprot.writeString(struct.userAlwayPlace);
      }
      if (struct.isSetUserScore()) {
        oprot.writeI32(struct.userScore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userId = iprot.readI64();
      struct.setUserIdIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.userEmail = iprot.readString();
        struct.setUserEmailIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userNickName = iprot.readString();
        struct.setUserNickNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userHeadUrl = iprot.readString();
        struct.setUserHeadUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userSource = iprot.readI32();
        struct.setUserSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userRp = iprot.readI32();
        struct.setUserRpIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userSex = iprot.readI32();
        struct.setUserSexIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userSourceId = iprot.readString();
        struct.setUserSourceIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.userAlwayPlace = iprot.readString();
        struct.setUserAlwayPlaceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userScore = iprot.readI32();
        struct.setUserScoreIsSet(true);
      }
    }
  }

}

